{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":36,\"max\":36},\"skills\":{\"hacking\":208,\"strength\":267,\"defense\":267,\"dexterity\":267,\"agility\":267,\"charisma\":5,\"intelligence\":0},\"exp\":{\"hacking\":304471.32159976417,\"strength\":353170.86719993514,\"defense\":352564.1471999352,\"dexterity\":353745.7151999354,\"agility\":352598.83519993525,\"charisma\":48.84479999999992,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.28,\"hacking_speed\":1.28,\"hacking_money\":1.28,\"hacking_grow\":1.28,\"hacking\":1.28,\"hacking_exp\":1.28,\"strength\":1.28,\"strength_exp\":1.28,\"defense\":1.28,\"defense_exp\":1.28,\"dexterity\":1.28,\"dexterity_exp\":1.28,\"agility\":1.28,\"agility_exp\":1.28,\"charisma\":1.4592000000000003,\"charisma_exp\":1.28,\"hacknet_node_money\":1.28,\"hacknet_node_purchase_cost\":0.78125,\"hacknet_node_ram_cost\":0.78125,\"hacknet_node_core_cost\":0.78125,\"hacknet_node_level_cost\":0.78125,\"company_rep\":1.28,\"faction_rep\":1.28,\"work_money\":1.4592000000000003,\"crime_success\":1.28,\"crime_money\":1.28,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"NeuroFlux Governor\"},{\"level\":2,\"name\":\"NeuroFlux Governor\"}],\"city\":\"Sector-12\",\"bitNodeN\":2,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"Slum Snakes\",\"Netburners\"],\"factionInvitations\":[\"Sector-12\"],\"factionRumors\":{\"ctor\":\"JSONSet\",\"data\":[\"Shadows of Anarchy\",\"CyberSec\",\"NiteSec\"]},\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":77,\"moneyGainRatePerSecond\":247.6835711383992,\"onlineTimeSeconds\":184640.00000004008,\"ram\":16,\"totalMoneyGenerated\":45579672.14090141,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":77,\"moneyGainRatePerSecond\":247.6835711383992,\"onlineTimeSeconds\":184519.80000004018,\"ram\":16,\"totalMoneyGenerated\":45579301.41564221,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":77,\"moneyGainRatePerSecond\":247.6835711383992,\"onlineTimeSeconds\":184519.80000004018,\"ram\":16,\"totalMoneyGenerated\":45579038.49707113,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":77,\"moneyGainRatePerSecond\":247.6835711383992,\"onlineTimeSeconds\":184519.6000000402,\"ram\":16,\"totalMoneyGenerated\":45579038.113071136,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":76,\"moneyGainRatePerSecond\":244.46690138335507,\"onlineTimeSeconds\":184519.6000000402,\"ram\":16,\"totalMoneyGenerated\":44980094.00810921,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":76,\"moneyGainRatePerSecond\":244.46690138335507,\"onlineTimeSeconds\":184519.4000000402,\"ram\":16,\"totalMoneyGenerated\":44979780.9944839,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":76,\"moneyGainRatePerSecond\":244.46690138335507,\"onlineTimeSeconds\":184459.20000004026,\"ram\":16,\"totalMoneyGenerated\":44979006.80420355,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":76,\"moneyGainRatePerSecond\":244.46690138335507,\"onlineTimeSeconds\":184459.20000004026,\"ram\":16,\"totalMoneyGenerated\":44975702.75186471,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":76,\"moneyGainRatePerSecond\":244.46690138335507,\"onlineTimeSeconds\":184459.00000004025,\"ram\":16,\"totalMoneyGenerated\":44975600.46027431,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":76,\"moneyGainRatePerSecond\":244.46690138335507,\"onlineTimeSeconds\":184459.00000004025,\"ram\":16,\"totalMoneyGenerated\":44975260.893517934,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":76,\"moneyGainRatePerSecond\":244.46690138335507,\"onlineTimeSeconds\":184458.80000004024,\"ram\":16,\"totalMoneyGenerated\":44975067.509332635,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":76,\"moneyGainRatePerSecond\":244.46690138335507,\"onlineTimeSeconds\":184458.80000004024,\"ram\":16,\"totalMoneyGenerated\":44971423.89023742,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":76,\"moneyGainRatePerSecond\":185.65099002289833,\"onlineTimeSeconds\":184398.60000004031,\"ram\":8,\"totalMoneyGenerated\":34174981.83792211,\"name\":\"hacknet-node-12\"}}],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":-23.279999999999976,\"numPeopleKilled\":0,\"location\":\"Alpha Enterprises\",\"money\":43088154.088544264,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-556320,\"codingcontract\":0,\"corporation\":0,\"crime\":20878080,\"gang\":0,\"hacking\":243857642.5093271,\"hacknet\":576303969.3164544,\"hacknet_expenses\":-12932053.924467428,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":43087041.088544264,\"work\":0,\"servers\":-69224857.37829173,\"other\":-2200000,\"augmentations\":-713039419.4345}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-556320,\"codingcontract\":0,\"corporation\":0,\"crime\":20878080,\"gang\":0,\"hacking\":243857642.5093271,\"hacknet\":576303969.3164544,\"hacknet_expenses\":-12932053.924467428,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":43087041.088544264,\"work\":0,\"servers\":-69224857.37829173,\"other\":-2200000,\"augmentations\":-713039419.4345}},\"playtimeSinceLastAug\":184668800,\"playtimeSinceLastBitnode\":184668800,\"lastAugReset\":1702702099813,\"lastNodeReset\":1702702099813,\"purchasedServers\":[\"vps-arbok\",\"vps-bonsly\",\"vps-buneary\",\"vps-clefairy\",\"vps-cubone\",\"vps-diglet\",\"vps-dragonite\",\"vps-ekans\",\"vps-latios\",\"vps-nuzleaf\",\"vps-scorbunny\",\"vps-zigzagoon\",\"vps-arcanine\",\"vps-charmander\",\"vps-dartrix\",\"vps-eevee\",\"vps-gengar\",\"vps-marowak\",\"vps-meowth\",\"vps-pikachu\",\"vps-poochyena\",\"vps-rattata\",\"vps-treecko\",\"vps-vulpix\",\"vps-absol\"],\"scriptProdSinceLastAug\":10087633.700495297,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,3],[3,3]]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1698143775838},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1698145455843},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1698146115849},{\"ID\":\"WORKOUT\",\"unlockedOn\":1698148695843},{\"ID\":\"TOR\",\"unlockedOn\":1698149535854},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1698151095842},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1698151335842},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1698151635846},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1698154575844},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1698154815845},{\"ID\":\"FROZE\",\"unlockedOn\":1698308283591},{\"ID\":\"NITESEC\",\"unlockedOn\":1698315243602},{\"ID\":\"TRAVEL\",\"unlockedOn\":1698325803591},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1698455311823},{\"ID\":\"DONATION\",\"unlockedOn\":1698538080066},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1698541620050},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1698566851474},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1698571351468},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1698571471475},{\"ID\":\"4S\",\"unlockedOn\":1698575311467},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1698739718915},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1698739838909},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1698741758910},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1698827725138},{\"ID\":\"SF1.1\",\"unlockedOn\":1698913793723},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1699519438328},{\"ID\":\"CORPORATION\",\"unlockedOn\":1699520218332},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1700117027138},{\"ID\":\"CORPORATION_PROD_1000\",\"unlockedOn\":1700311247250},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1700558631797},{\"ID\":\"SF3.1\",\"unlockedOn\":1700559531791},{\"ID\":\"CORPORATION_REAL_ESTATE\",\"unlockedOn\":1700821887826}],\"terminalCommandHistory\":[\"kill 1\",\"biotic 5 --no-vps-upgrade\",\"traceroute The-Cave\",\"home; connect iron-gym; connect zer0; connect omega-net; connect netlink; connect catalyst; connect aevum-police; connect snap-fitness; connect omnia; connect solaris; connect nova-med; connect titan-labs; connect helios; connect .; connect powerhouse-fitness; connect The-Cave\",\"scan\",\"connect w0r1d_d43m0n\",\"analyse\",\"home\",\"bio 5\",\"biotic 5\",\"buy -a\",\"cls\",\"traceroute w0r1d_d43m0n\",\"home; connect sigma-cosmetics; connect nectar-net; connect omega-net; connect avmnite-02h; connect syscore; connect aevum-police; connect galactic-cyber; connect unitalife; connect defcomm; connect nova-med; connect microdyne; connect stormtech; connect omnitek; connect b-and-a; connect The-Cave; connect w0r1d_d43m0n\",\"analyse\",\"backdoor\",\"BACKDOOR\",\"./node-nurse.js \",\"biotic 1\",\"cls\",\"traceroute CSEC\",\"home; connect sigma-cosmetics; connect CSEC\",\"backdoor\",\"analyse\",\"home\",\"ps\\\\\",\"ls\",\"ps\",\"kill 1\",\"cls\",\"home; connect sigma-cosmetics; connect CSEC\",\"backdoor\",\"buy -a\",\"buy -l\",\"buy BruteSSH.exe \",\"buy FTPCrack.exe \",\"cls\",\"home\",\"cls\",\"ps\",\"kill 2\",\"biotic 2\",\"cls\",\"ps\",\"cls\",\"traceroute \",\"home; connect harakiri-sushi; connect max-hardware; connect omega-net; connect computek; connect rothman-uni; connect alpha-ent\",\"home\",\"cls\",\"biotic 1 --no-vps-upgrade\"],\"lastUpdate\":1702886768639,\"lastSave\":1702886759040,\"totalPlaytime\":4743238800,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":915670,\"factionWorkType\":\"security\",\"factionName\":\"Slum Snakes\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"1780e40f4efd62\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"27.2.2.5\",\"isConnectedTo\":true,\"maxRam\":128,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"home\"}}],[\"crawler.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { forEach } from \\\"utils.js\\\";\\n\\nexport function Crawler(ns, options){\\n  \\n  var resultLimit = options.resultLimit;\\n  var rootHost = options.rootHost;\\n  \\n  // These host names have already been scanned.\\n  var completeHosts = [];\\n  \\n  // These host names are recently discovered and\\n  // may not have been scanned.\\n  var discoveredHosts = [];\\n  \\n  // Returns false when there is no more work to do.\\n  async function step(){\\n    \\n    // Run out\\n    if(discoveredHosts.length == 0){\\n      return false;\\n    }\\n    \\n    // Result limit reached\\n    if(discoveredHosts.length >= resultLimit){\\n      return false;\\n    }\\n    \\n    // Processing\\n    var hostname = discoveredHosts.pop();\\n    var alreadyScanned = completeHosts.indexOf(hostname) >= 0;\\n    if (!alreadyScanned){\\n      completeHosts.push(hostname);\\n      var siblings = await ns.scan(hostname);\\n      forEach(siblings, function(i, e){\\n        discoveredHosts.push(e);\\n      });\\n    }\\n    return true;\\n    \\n  }\\n  \\n  async function crawl(){\\n    completeHosts = [];\\n    discoveredHosts = [rootHost];\\n    while(await step()){\\n      await ns.sleep(10);\\n    }\\n    return completeHosts;\\n  }\\n  \\n  return {\\n    crawl\\n  };\\n  \\n}\\n\",\"filename\":\"crawler.js\",\"server\":\"home\"}}],[\"traceroute.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { forEach, pushAll } from \\\"./utils.js\\\";\\n\\nfunction HostCollection(hostnames){\\n  \\n  var items = [...hostnames];\\n  \\n  function addAll(newHostnames){\\n    pushAll(items, newHostnames);\\n  }\\n  \\n  function notContains(hostname){\\n    return items.indexOf(hostname) < 0;\\n  }\\n  \\n  return {\\n    addAll,\\n    notContains\\n  }\\n  \\n}\\n\\nfunction ServerRoute (ns, knownHosts, parentRoute, hostname){\\n  \\n  function getRoute(){\\n    return [hostname].concat([...parentRoute]);\\n  }\\n  \\n  async function findChildren(){\\n    var neighbours = await ns.scan(hostname);\\n    var newHosts = neighbours.filter(knownHosts.notContains);\\n    knownHosts.addAll(newHosts);\\n    var children = newHosts.map(function(childHostname){\\n        return new ServerRoute(ns, knownHosts, getRoute(), childHostname);\\n      });\\n    return children;\\n  }\\n  \\n  return {\\n    hostname,\\n    getRoute,\\n    findChildren\\n  }\\n  \\n}\\n\\nexport function TraceRoute (ns, options){\\n  \\n  var resultLimit = options.resultLimit;\\n  var rootHost = options.rootHost;\\n  \\n  async function crawl(){\\n    \\n    var knownHostCollection = new HostCollection([rootHost]);\\n    var rootRoute = new ServerRoute(ns, knownHostCollection, [], rootHost);\\n    var unscannedHosts = [rootRoute];\\n    var scannedHosts = [];\\n    \\n    while(unscannedHosts.length > 0){\\n      \\n      var nextHost = unscannedHosts.pop();\\n      \\n      var resultLimitReached =\\n        unscannedHosts.length > resultLimit ||\\n        scannedHosts.length > resultLimit;\\n      if(resultLimitReached){\\n        ns.print(\\\"Trace route result limit reached.\\\");\\n        break;\\n      }\\n      \\n      var children = await nextHost.findChildren();\\n      pushAll(unscannedHosts, children);\\n      scannedHosts.push(nextHost);\\n      \\n    }\\n    \\n    return scannedHosts;\\n    \\n  }\\n  \\n  return {\\n    crawl\\n  };\\n  \\n}\\n\\nfunction printRoute(ns, route, connectMode){\\n  var hostnames = route.getRoute().reverse();\\n  var joiner = connectMode ? \\\"; connect \\\" : \\\" -> \\\";\\n  ns.tprint(hostnames.join(joiner));\\n}\\n\\nexport async function main(ns){\\n  \\n  var traceRoute = new TraceRoute(ns, {\\n    resultLimit: 1000,\\n    rootHost: \\\"home\\\"\\n  });\\n  var allRoutes = await traceRoute.crawl();\\n  \\n  var connectMode;\\n  if(ns.args.length >= 2 && ns.args[1] == \\\"--connect\\\"){\\n    connectMode = true;\\n  } else {\\n    connectMode = false;\\n  }\\n\\n  connectMode = true; // Because fuck it\\n  \\n  var matchingRoutes;\\n  if(ns.args.length == 0){\\n    matchingRoutes = allRoutes;\\n  } else {\\n    var targetHostname = ns.args[0];\\n    matchingRoutes = allRoutes\\n      .filter(function(route){\\n        return route.hostname == targetHostname;\\n      });\\n  }\\n  \\n  forEach(matchingRoutes, function(i, route){\\n    printRoute(ns, route, connectMode);\\n  });\\n\\n}\",\"filename\":\"traceroute.js\",\"server\":\"home\"}}],[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"home\"}}],[\"root-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { forEachAsync } from \\\"./utils.js\\\";\\n\\nexport async function portPoppers(ns){\\n  \\n  var possiblePoppers = [\\n    { bin: \\\"FTPCrack.exe\\\", invoke: ns.ftpcrack },\\n    { bin: \\\"BruteSSH.exe\\\", invoke: ns.brutessh },\\n    { bin: \\\"relaySMTP.exe\\\", invoke: ns.relaysmtp },\\n    { bin: \\\"HTTPWorm.exe\\\", invoke: ns.httpworm },\\n    { bin: \\\"SQLInject.exe\\\", invoke: ns.sqlinject }\\n  ];\\n  \\n  var installedPopppers = [];\\n  await forEachAsync(possiblePoppers, async function(i, e){\\n    if (await ns.fileExists(e.bin, \\\"home\\\")){\\n      installedPopppers.push(e);\\n    }\\n  });\\n  \\n  return installedPopppers;\\n  \\n}\\n\\nexport async function isVulnerable(ns, hostname) {\\n  var poppers = await portPoppers(ns);\\n  var myLevel = await ns.getHackingLevel();\\n  var requiredLevel = await ns.getServerRequiredHackingLevel(hostname);\\n  var portsRequired = await ns.getServerNumPortsRequired(hostname);\\n  return myLevel >= requiredLevel && poppers.length >= portsRequired;\\n}\\n\\nexport async function rootServer(ns, hostname){\\n  var hasRootAccess = await ns.hasRootAccess(hostname);\\n  var vulnerable = await isVulnerable(ns, hostname);\\n  if(!hasRootAccess && vulnerable){\\n    var poppers = await portPoppers(ns);\\n    await forEachAsync(poppers, async function(i, e){\\n      await e.invoke(hostname);\\n    });\\n    await ns.nuke(hostname);\\n    return true;\\n  } else {\\n    return false;\\n  }\\n}\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  root-server.js <hostname>\\\");\\n}\\n\\nexport async function main(ns) {\\n  if (ns.args.length == 1){\\n    if(await rootServer(ns, ns.args[0])){\\n      ns.tprint(\\\"Success\\\");\\n    } else {\\n      ns.tprint(\\\"Failed\\\");\\n    }\\n  } else {\\n    printHelp(ns);\\n  }\\n}\",\"filename\":\"root-server.js\",\"server\":\"home\"}}],[\"node-nurse.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nfunction defaultOptions(ns){\\n  return {\\n    maxNodes: ns.hacknet.maxNumNodes(),\\n    maxNodeLevel: 200,\\n    maxNodeRam: 64,\\n    maxNodeCores: 16\\n  };\\n};\\n\\nexport function NodeNurse(ns, options){\\n  \\n  var maxNodes = options.maxNodes;\\n  var maxNodeLevel = options.maxNodeLevel;\\n  var maxNodeRam = options.maxNodeRam;\\n  var maxNodeCores = options.maxNodeCores;\\n  \\n  async function buyNodes(){\\n    while(await ns.hacknet.numNodes() < maxNodes){\\n      var currentFunds = await ns.getServerMoneyAvailable(\\\"home\\\");\\n      var cost = await ns.hacknet.getPurchaseNodeCost();\\n      if (cost > currentFunds) break;\\n      var newNode = await ns.hacknet.purchaseNode();\\n      if (newNode < 0) {\\n        ns.print(\\\"Attempted node purchase failed\\\");\\n        break;\\n      }\\n      await ns.sleep(100);\\n    }\\n  }\\n  \\n  async function nodesByLowest(getSize){\\n    var nodeCount = await ns.hacknet.numNodes();\\n    var scored = [];\\n    for(var i = 0; i < nodeCount; i++){\\n      scored.push({\\n        index: i,\\n        score: await getSize(i)\\n      });\\n    }\\n    return scored\\n      .sort(function(a, b){\\n        return a.score - b.score;\\n      })\\n      .map(function(x){\\n        return x.index;\\n      });\\n  }\\n  \\n  async function increaseOn(\\n      nodeId,\\n      max,\\n      getSize,\\n      getCost,\\n      upgrade){\\n    \\n    if(await getSize(nodeId) >= max) return false;\\n    \\n    var currentFunds = await ns.getServerMoneyAvailable(\\\"home\\\");\\n    var cost = await getCost(nodeId, 1);\\n    if (cost > currentFunds) return false;\\n    \\n    var success = await upgrade(nodeId);\\n    if (!success) {\\n      ns.print(\\\"Attempted upgrade failed\\\");\\n    };\\n    \\n    return success;\\n      \\n  }\\n  \\n  async function increase(max, getSize, getCost, upgrade){\\n    for(var success = true; success; ){\\n      var nodes = await nodesByLowest(getSize);\\n      var success = await increaseOn(\\n          nodes[0],\\n          max,\\n          getSize,\\n          getCost,\\n          upgrade);\\n    }\\n  }\\n  \\n  async function getCoreCount(i){\\n    var stats = await ns.hacknet.getNodeStats(i);\\n    return stats.cores;\\n  }\\n  \\n  async function getRamSize(i){\\n    var stats = await ns.hacknet.getNodeStats(i);\\n    return stats.ram;\\n  }\\n  \\n  async function getLevel(i){\\n    var stats = await ns.hacknet.getNodeStats(i);\\n    return stats.level;\\n  }\\n  \\n  async function maintain(){\\n    await buyNodes();\\n    await increase(\\n      maxNodeRam,\\n      getRamSize,\\n      ns.hacknet.getRamUpgradeCost,\\n      ns.hacknet.upgradeRam);\\n    await increase(\\n      maxNodeLevel,\\n      getLevel,\\n      ns.hacknet.getLevelUpgradeCost,\\n      ns.hacknet.upgradeLevel);\\n    await increase(\\n      maxNodeCores,\\n      getCoreCount,\\n      ns.hacknet.getCoreUpgradeCost,\\n      ns.hacknet.upgradeCore);\\n  }\\n  \\n  return {\\n    maintain\\n  };\\n  \\n}\\n\\nexport async function main(ns){\\n  var nurse = new NodeNurse(ns, defaultOptions(ns));\\n  for(;;){\\n    await nurse.maintain();\\n    await ns.sleep(60 * 1000);\\n  }\\n}\",\"filename\":\"node-nurse.js\",\"server\":\"home\"}}],[\"vps.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport function getVpsNames(){\\n  return [\\n    \\\"vps-absol\\\",\\n    \\\"vps-arbok\\\",\\n    \\\"vps-arcanine\\\",\\n    \\\"vps-bonsly\\\",\\n    \\\"vps-buneary\\\",\\n    \\\"vps-charmander\\\",\\n    \\\"vps-clefairy\\\",\\n    \\\"vps-cubone\\\",\\n    \\\"vps-dartrix\\\",\\n    \\\"vps-diglet\\\",\\n    \\\"vps-dragonite\\\",\\n    \\\"vps-eevee\\\",\\n    \\\"vps-ekans\\\",\\n    \\\"vps-gengar\\\",\\n    \\\"vps-latios\\\",\\n    \\\"vps-marowak\\\",\\n    \\\"vps-meowth\\\",\\n    \\\"vps-nuzleaf\\\",\\n    \\\"vps-pikachu\\\",\\n    \\\"vps-poochyena\\\",\\n    \\\"vps-rattata\\\",\\n    \\\"vps-scorbunny\\\",\\n    \\\"vps-treecko\\\",\\n    \\\"vps-vulpix\\\",\\n    \\\"vps-zigzagoon\\\"\\n  ];\\n}\\n\\nasync function quote(ns, size){\\n  var dollars = await ns.getPurchasedServerCost(size);\\n  var kilodollars = dollars / 1000;\\n  ns.tprint(\\\"$\\\" + kilodollars + \\\"k\\\");\\n}\\n\\nasync function buy(ns, name, size){\\n  var newServer = await ns.purchaseServer(name, size);\\n  if (newServer == \\\"\\\"){\\n    ns.tprint(\\\"Failed to purchase server.\\\");\\n  }\\n}\\n\\nasync function sell(ns, name){\\n  var success = await ns.deleteServer(name);\\n  if (!success){\\n    ns.tprint(\\\"Failed to sell server.\\\");\\n  }\\n}\\n\\nfunction Vps(ns, options){\\n  \\n  var hostname = options.hostname;\\n  var decommission = options.decommission;\\n  var commission = options.commission;\\n  var trace = options.trace;\\n  \\n  async function getSize(){\\n    var exists = await ns.serverExists(hostname);\\n    if (exists){\\n      return await ns.getServerMaxRam(hostname);\\n    } else {\\n      return 0;\\n    }\\n  }\\n  \\n  async function quote(size){\\n    return await ns.getPurchasedServerCost(size);\\n  }\\n  \\n  async function install(size){\\n    var exists = await ns.serverExists(hostname);\\n    if (exists){\\n      await decommission(hostname);\\n      var deleteSuccess = await ns.deleteServer(hostname);\\n      if(!deleteSuccess){\\n        await trace(\\\"Failed to delete server \\\" + hostname);\\n        return false;\\n      }\\n    }\\n    var boughtServerName = await ns.purchaseServer(hostname, size);\\n    if(boughtServerName == \\\"\\\"){\\n      await trace(\\\"Failed to purchase server \\\" + hostname);\\n      return false;\\n    }\\n    await ns.sleep(1000);\\n    await commission(hostname);\\n    return true;\\n  }\\n  \\n  async function considerUpgrade(levelIncrease){\\n    \\n    var currentSize = await getSize();\\n    var newSize;\\n    if (currentSize > 0){\\n      var newSize = currentSize * 2**levelIncrease;\\n    } else {\\n      var newSize = 2**(levelIncrease + 2); // At least 8\\n    }\\n    \\n    async function quoteNewSize(){\\n      return await quote(newSize);\\n    }\\n    \\n    async function installNewSize(){\\n      return await install(newSize);\\n    }\\n    \\n    return {\\n      hostname: hostname,\\n      size: newSize,\\n      quote: quoteNewSize,\\n      install: installNewSize\\n    };\\n    \\n  }\\n\\n  async function currentState(){\\n    \\n    var currentSize = await getSize();\\n    \\n    async function quoteNothing(){\\n      return 0;\\n    }\\n    \\n    async function doNothing(){ }\\n    \\n    return {\\n      hostname: hostname,\\n      size: currentSize,\\n      quote: quoteNothing,\\n      install: doNothing\\n    };\\n    \\n  }\\n  \\n  return {\\n    hostname,\\n    currentState,\\n    considerUpgrade\\n  };\\n  \\n}\\n\\nexport function VpsManager(ns, options){\\n  \\n  var hostnames = options.hostnames;\\n  var decommission = options.decommission;\\n  var commission = options.commission;\\n  var trace = options.trace;\\n  \\n  var servers = hostnames.map(\\n    function(hostname){\\n      return new Vps(ns, {\\n        hostname,\\n        decommission,\\n        commission,\\n        trace\\n      });\\n    });\\n    \\n  async function quoteAll(proposals){\\n    var quote = 0;\\n    for(var i in proposals){\\n      quote += await proposals[i].upgrade.quote();\\n    }\\n    return quote;\\n  }\\n  \\n  async function currentPortfolio(){\\n    var serverStates = [];\\n    for(var i in servers){\\n      serverStates.push({\\n        server: servers[i],\\n        levelIncrease: 0,\\n        upgrade: await servers[i].currentState()\\n      });\\n    }\\n    return serverStates;\\n  }\\n  \\n  async function planUpgrade(){\\n    \\n    var proposals = await currentPortfolio();\\n    proposals.sort(function(a, b){ return a.upgrade.size - b.upgrade.size; });\\n    \\n    for(var i = 0; i < proposals.length; i++){\\n      \\n      // Current proposal\\n      var proposal = proposals[i];\\n      var server = proposal.server;\\n      var levelIncreaseBefore = proposal.levelIncrease;\\n      var upgradeBefore = proposal.upgrade;\\n      var quoteBefore = await upgradeBefore.quote();\\n      var totalQuoteBefore = await quoteAll(proposals);\\n      \\n      // Upgrade Server as much as possible\\n      for(var levelIncreaseAfter = levelIncreaseBefore; ; levelIncreaseAfter++){\\n        \\n        var upgradeAfter = await server.considerUpgrade(levelIncreaseAfter);\\n        var quoteAfter = await upgradeAfter.quote();\\n        var totalQuoteAfter = totalQuoteBefore - quoteBefore + quoteAfter;\\n        \\n        // Can afford it? Update the proposal\\n        var funds = await ns.getServerMoneyAvailable(\\\"home\\\");\\n        if(totalQuoteAfter <= funds){\\n          proposal.levelIncrease = levelIncreaseAfter;\\n          proposal.upgrade = upgradeAfter;\\n        } else {\\n          break;\\n        }\\n        \\n      }\\n      \\n    }\\n    \\n    return proposals;\\n    \\n  }\\n  \\n  async function traceUpgrade(proposals){\\n    for(var i in proposals){\\n      if(proposals[i].levelIncrease > 0){\\n        await trace(\\n          proposals[i].server.hostname\\n          + \\\": +\\\"\\n          + proposals[i].levelIncrease);\\n      }\\n    }\\n  }\\n  \\n  async function executeUpgrade(proposals){\\n    for(var i in proposals){\\n      await proposals[i].upgrade.install();\\n    }\\n  }\\n  \\n  async function upgrade(){\\n    var proposals = await planUpgrade();\\n    await traceUpgrade(proposals);\\n    await executeUpgrade(proposals);\\n  }\\n  \\n  return {\\n    upgrade\\n  }\\n  \\n}\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  vps.js quote <log2(ram)>\\\");\\n  ns.tprint(\\\"  vps.js buy <name> <log2(ram)>\\\");\\n  ns.tprint(\\\"  vps.js sell <name>\\\");\\n  ns.tprint(\\\"  vps.js upgrade\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var managerOptions = {\\n    hostnames: getVpsNames(),\\n    decommission: async function(hostname){\\n        await ns.killall(hostname);\\n      },\\n    commission: async function(hostname) {\\n        ns.tprint(hostname, \\\" has been upgraded.\\\");\\n      },\\n    trace: async function(msg){\\n        ns.tprint(msg);\\n      }\\n  };\\n\\n  if (ns.args.length == 2 && ns.args[0] == \\\"quote\\\"){\\n    await quote(ns, 2**ns.args[1]);\\n  } else if (ns.args.length == 3 && ns.args[0] == \\\"buy\\\"){\\n    await buy(ns, ns.args[1], 2**ns.args[2]);\\n  } else if (ns.args.length == 2 && ns.args[0] == \\\"sell\\\"){\\n    await sell(ns, ns.args[1]);\\n  } else if (ns.args.length == 1 && ns.args[0] == \\\"upgrade\\\"){\\n    var manager = new VpsManager(ns, managerOptions);\\n    await manager.upgrade();\\n    ns.tprint(\\\"Done.\\\");\\n  } else {\\n    printHelp(ns);\\n  }\\n\\n}\",\"filename\":\"vps.js\",\"server\":\"home\"}}],[\"reach.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { Crawler } from \\\"./crawler.js\\\";\\nimport { InstallThief } from \\\"./install-thief.js\\\";\\nimport { rootServer } from \\\"./root-server.js\\\";\\nimport { ServerFinder } from \\\"./find-server.js\\\";\\nimport { forEach, forEachAsync } from \\\"./utils.js\\\";\\nimport { getVpsNames, VpsManager } from \\\"./vps.js\\\";\\n\\nexport function Reach(ns, options){\\n  \\n  var targetLimit = options.targets;\\n  var crawler = options.crawler;\\n  var installer = options.installer;\\n  var decommission = options.decommission;\\n  var trace = options.trace;\\n  \\n  var serverTargets = { };\\n  \\n  function getCurrentServerTarget(server){\\n    return serverTargets[server] || null;\\n  }\\n  \\n  function setCurrentServerTarget(server, target){\\n    serverTargets[server] = target;\\n  }\\n  \\n  async function generateSchedule(servers){\\n    \\n    var hostFinder = new ServerFinder(ns, {\\n      hostnames: servers,\\n      limit: null,\\n      onlyWithRootAccess: true,\\n      onlyNotHome: true,\\n      onlyWithMoney: false,\\n      onlyNotMine: false\\n    });\\n    var bestHosts = await hostFinder.findBestHosts();\\n    var targetFinder = new ServerFinder(ns, {\\n      hostnames: servers,\\n      limit: targetLimit,\\n      onlyWithRootAccess: true,\\n      onlyNotHome: true,\\n      onlyWithMoney: true,\\n      onlyNotMine: true\\n    });\\n    var bestTargets = await targetFinder.findBestTargets();\\n    \\n    var schedule = {};\\n    if(bestTargets.length > 0){\\n      bestHosts.sort();\\n      bestTargets.sort();\\n      forEach(bestHosts, function(i, host){\\n        var correspondingTargetIndex = i % bestTargets.length;\\n        var correspondingTarget = bestTargets[correspondingTargetIndex];\\n        schedule[host] = correspondingTarget;\\n      });\\n    }\\n    return schedule;\\n    \\n  }\\n  \\n  async function tryRootServer(hostname){\\n    var success = await rootServer(ns, hostname);\\n    if (success){\\n      await trace(\\\"> Rooted server \\\" + hostname);\\n    }\\n  }\\n  \\n  async function tryInstall(hostname, target){\\n    var canInstall =\\n      await ns.hasRootAccess(hostname) &&\\n      await ns.hasRootAccess(target) &&\\n      hostname != \\\"home\\\";\\n    if (canInstall){\\n      await trace(\\\"> Updating: \\\" + hostname + \\\" targeting \\\" + target);\\n      await installer.installMax(hostname, target);\\n      setCurrentServerTarget(hostname, target);\\n    } else {\\n      await trace(\\\"! Cannot update: \\\" + hostname);\\n    }\\n  }\\n  \\n  async function deployEverywhere(forceReinstall){\\n    \\n    // Root servers\\n    var servers = await crawler.crawl();\\n    await forEachAsync(servers, async function(i, e){\\n      await tryRootServer(e);\\n    });\\n    \\n    // Schedule hosts and targets\\n    var schedule = await generateSchedule(servers);\\n    for(var server in schedule){\\n      var newTarget = schedule[server] || null;\\n      var currentTarget = getCurrentServerTarget(server);\\n      var reinstall =\\n        newTarget != currentTarget ||\\n        forceReinstall;\\n      if (reinstall && newTarget){\\n        await tryInstall(server, newTarget);\\n        await ns.sleep(500);\\n      } else {\\n        trace(\\\"> No update for \\\" + server);\\n      }\\n    }\\n\\n    trace(\\\"> Deployment complete.\\\");\\n    \\n  }\\n  \\n  async function removeEverywhere(){\\n    var servers = await crawler.crawl();\\n    await forEachAsync(servers, async function(i, e){\\n      if(e != \\\"home\\\"){\\n        await installer.uninstall(e);\\n      }\\n    });\\n  }\\n  \\n  async function upgradeVps(){\\n    var vpsHosts = await getVpsNames();\\n    var manager = new VpsManager(ns, {\\n      hostnames: vpsHosts,\\n      decommission: decommission,\\n      commission: function(){ },\\n      trace: trace\\n    });\\n    await manager.upgrade();\\n    trace(\\\"> VPS upgrade complete.\\\");\\n  }\\n  \\n  async function manage(){\\n    var upgradePeriod = 60*1000;\\n    for(;;){\\n      await upgradeVps();\\n      await deployEverywhere(false);\\n      await ns.sleep(upgradePeriod);\\n    }\\n  }\\n  \\n  return {\\n    deployEverywhere,\\n    manage,\\n    removeEverywhere\\n  };\\n  \\n}\\n\\nexport async function main(ns) {\\n  \\n  var install =\\n    ns.args.length == 2 &&\\n    ns.args[0] == \\\"install\\\";\\n  var manage =\\n    ns.args.length == 2 &&\\n    ns.args[0] == \\\"manage\\\";\\n  var uninstall = \\n    ns.args.length == 1 &&\\n    ns.args[0] == \\\"uninstall\\\";\\n  var target = ns.args.length >= 2 ? ns.args[1] : null;\\n  \\n  var crawler = new Crawler(ns, {\\n    resultLimit: 1000,\\n    rootHost: \\\"home\\\"\\n  });\\n  var installer = new InstallThief(ns);\\n  var reach = new Reach(ns, {\\n    targets: target,\\n    crawler: crawler,\\n    installer: installer,\\n    decommission: async function(hostname){ await ns.killall(hostname); },\\n    trace: manage ? ns.print : ns.tprint\\n  });\\n  \\n  if (install){\\n    await reach.deployEverywhere(true);\\n    ns.tprint(\\\"Done.\\\");\\n  } else if (manage){\\n    await reach.manage();\\n  } else if (uninstall){\\n    await reach.removeEverywhere();\\n    ns.tprint(\\\"Done.\\\");\\n  } else {\\n    ns.tprint(\\\"Usage:\\\");\\n    ns.tprint(\\\"  reach.js install <target limit> <host>\\\");\\n    ns.tprint(\\\"  reach.js manage <target limit>\\\");\\n    ns.tprint(\\\"  reach.js uninstall\\\");\\n  }\\n  \\n}\",\"filename\":\"reach.js\",\"server\":\"home\"}}],[\"cache.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar caches = { };\\n\\nexport function Cache(ns, name){\\n  \\n  var localhost = ns.getHostname();\\n  var cache = null;\\n  \\n  function load(key){\\n    return cache[key];\\n  }\\n\\n  function save(key, value){\\n    cache[key] = value;\\n  }\\n  \\n  async function open(){\\n    \\n    if (typeof(caches[name]) == \\\"undefined\\\"){\\n      caches[name] = { };\\n    }\\n    cache = caches[name];\\n    \\n    return {\\n      load,\\n      save\\n    };\\n    \\n  }\\n  \\n  return {\\n    open\\n  };\\n  \\n}\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cache.js <cache-name> <key>\\\");\\n  ns.tprint(\\\"  cache.js <cache-name> <key> <value>\\\");\\n}\\n\\nexport async function main(ns){\\n  if (ns.args.length == 2){\\n    var dbName = ns.args[0];\\n    var key = ns.args[1];\\n    var cache = await (new Cache(ns, dbName)).open();\\n    ns.tprint(cache.load(key));\\n  } else if (ns.args.length == 3){\\n    var dbName = ns.args[0];\\n    var key = ns.args[1];\\n    var value = ns.args[2];\\n    var cache = await (new Cache(ns, dbName)).open();\\n    cache.save(key, value);\\n  } else {\\n    printHelp(ns);\\n  }\\n}\",\"filename\":\"cache.js\",\"server\":\"home\"}}],[\"install-thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport function InstallThief (ns){\\n  \\n  var scriptName = \\\"thief.js\\\";\\n  var utilsName = \\\"utils.js\\\";\\n  \\n  async function sendScript(host){\\n    await ns.scp(scriptName, host);\\n    await ns.scp(utilsName, host);\\n  }\\n  \\n  async function removeScript(host){\\n    await ns.rm(scriptName, host);\\n    await ns.rm(utilsName, host);\\n  }\\n  \\n  async function stopScript(host){\\n    await ns.scriptKill(scriptName, host);\\n  }\\n  \\n  async function startScript(host, target, threadCount){\\n    await ns.exec(scriptName, host, threadCount, target);\\n  }\\n  \\n  async function install(host, target, threadCount) {\\n    await stopScript(host);\\n    await sendScript(host);\\n    await startScript(host, target, threadCount);\\n  }\\n  \\n  async function installMax(host, target) {\\n    var ramRequired = await ns.getScriptRam(scriptName);\\n    await stopScript(host);\\n    var ramMax = await ns.getServerMaxRam(host);\\n    var ramUsed = await ns.getServerUsedRam(host);\\n    var ramAvailable = ramMax - ramUsed;\\n    var threadCount = Math.floor(ramAvailable / ramRequired);\\n    await sendScript(host);\\n    if (threadCount > 0){\\n      await startScript(host, target, threadCount);\\n    }\\n  }\\n\\n  async function uninstall(host) {\\n    await stopScript(host);\\n    await removeScript(host);\\n  }\\n  \\n  return {\\n    install,\\n    installMax,\\n    uninstall\\n  };\\n  \\n}\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  install-thief.js install <host> <target> <threads>\\\");\\n  ns.tprint(\\\"  install-thief.js install-max <host> <target>\\\");\\n  ns.tprint(\\\"  install-thief.js uninstall <host>\\\");\\n}\\n\\nfunction readArgs(ns){\\n  \\n  var argc  = ns.args.length;\\n  if(argc <= 0){\\n    return null;\\n  }\\n  \\n  var command = ns.args[0];\\n  if (command == \\\"install\\\" && argc == 4){\\n    var host = ns.args[1];\\n    var target = ns.args[2];\\n    var threads = ns.args[3];\\n    return {\\n      mode: \\\"install\\\",\\n      host: host,\\n      target: target,\\n      threads: threads\\n    };\\n  } else if (command == \\\"install-max\\\" && argc == 3){\\n    var host = ns.args[1];\\n    var target = ns.args[2];\\n    return {\\n      mode: \\\"install-max\\\",\\n      host: host,\\n      target: target\\n    };\\n  } else if(command == \\\"uninstall\\\" && argc == 2) {\\n    var host = ns.args[1];\\n    return {\\n      mode: \\\"uninstall\\\",\\n      host: host\\n    };\\n  } else {\\n    return null;\\n  }\\n  \\n}\\n\\nexport async function main(ns) {\\n  var installThief = new InstallThief(ns);\\n  var options = readArgs(ns);\\n  if (options == null){\\n    printHelp(ns);\\n  } else if(options.mode == \\\"install\\\"){\\n    await installThief.install(options.host, options.target, options.threads);\\n  } else if(options.mode == \\\"install-max\\\"){\\n    await installThief.installMax(options.host, options.target);\\n  } else if(options.mode == \\\"uninstall\\\"){\\n    await installThief.uninstall(options.host);\\n  } else {\\n    printHelp(ns);\\n  }\\n}\",\"filename\":\"install-thief.js\",\"server\":\"home\"}}],[\"find-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { forEach, forEachAsync } from \\\"utils.js\\\";\\nimport { Crawler } from \\\"crawler.js\\\";\\n\\nexport function ServerFinder(ns, options){\\n  \\n  var hostnames = options.hostnames;\\n  var limit = options.limit;\\n  var onlyWithRootAccess = options.onlyWithRootAccess;\\n  var onlyWithMoney = options.onlyWithMoney;\\n  var onlyNotMine = options.onlyNotMine;\\n  var onlyNotHome = options.onlyNotHome;\\n  var onlyLowSecurity = options.onlyLowSecurity;\\n    \\n  async function profileServers(){\\n    var profiles = [];\\n    await forEachAsync(hostnames, async function(i, e){\\n      profiles.push({\\n        hostname: e,\\n        hasRootAccess: await ns.hasRootAccess(e),\\n        maxMoney: await ns.getServerMaxMoney(e),\\n        maxRam: await ns.getServerMaxRam(e),\\n        minSecurity: await ns.getServerMinSecurityLevel(e),\\n      });\\n    });\\n    return profiles;\\n  }\\n  \\n  function getHostname(profile){\\n    return profile.hostname;\\n  }\\n  \\n  async function generateFilter(){\\n    \\n    var filters = [];\\n    \\n    if(onlyWithMoney){\\n      filters.push(function(serverProfile){\\n        return serverProfile.maxMoney > 0;\\n      });\\n    }\\n    \\n    if(onlyWithRootAccess){\\n      filters.push(function(serverProfile){\\n        return serverProfile.hasRootAccess;\\n      });\\n    }\\n    \\n    if(onlyNotMine){\\n      var myServers = await ns.getPurchasedServers();\\n      myServers.push(\\\"home\\\");\\n      filters.push(function(serverProfile){\\n        return myServers.indexOf(serverProfile.hostname) < 0;\\n      });\\n    }\\n    \\n    if(onlyNotHome){\\n      filters.push(function(serverProfile){\\n        return serverProfile.hostname != \\\"home\\\";\\n      });\\n    }\\n    \\n    if(onlyLowSecurity){\\n      var hackLevel = await ns.getHackingLevel();\\n      filters.push(function(serverProfile){\\n        var hackRequirement = (\\n          3 *\\n          serverProfile.minSecurity *\\n          serverProfile.minSecurity);\\n        return hackLevel >= hackRequirement ||\\n          serverProfile.minSecurity == 1;\\n      });\\n    }\\n    \\n    return function(serverProfile){\\n      var passing = true;\\n      forEach(filters, function(i, e){\\n        passing = passing && e(serverProfile);\\n      });\\n      return passing;\\n    };\\n    \\n  }\\n  \\n  function scoreTarget(profile){  \\n    var moneyScore = Math.log10(profile.maxMoney);\\n    var securityScore = 100 - profile.minSecurity;\\n    // Rank by min security, but bonus points for more money\\n    return securityScore + moneyScore;\\n  }\\n  \\n  function scoreHost(profile){\\n    return profile.maxRam;\\n  }\\n  \\n  function compareTargetsDesc(a, b){\\n    return scoreTarget(b) - scoreTarget(a);\\n  }\\n  \\n  function compareHostsDesc(a, b){\\n    return scoreHost(b) - scoreHost(a);\\n  }\\n  \\n  async function findBest(compareDesc){\\n    var profiles = await profileServers();\\n    var filter = await generateFilter();\\n    return profiles\\n      .filter(filter)\\n      .sort(compareDesc)\\n      .slice(0, limit || Infinity)\\n      .map(getHostname);\\n  }\\n  \\n  async function findBestTargets(){\\n    return await findBest(compareTargetsDesc);\\n  }\\n  \\n  async function findBestHosts(){\\n    return await findBest(compareHostsDesc);\\n  }\\n  \\n  return {\\n    findBestTargets,\\n    findBestHosts\\n  };\\n  \\n}\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  find-server.js host <limit>\\\");\\n  ns.tprint(\\\"  find-server.js target <limit>\\\");\\n}\\n\\nexport async function main(ns){\\n  \\n  var findHosts = ns.args.length == 2 && ns.args[0] == \\\"host\\\";\\n  var findTargets = ns.args.length == 2 && ns.args[0] == \\\"target\\\";\\n  var showHelp = !findHosts && !findTargets;\\n  \\n  if(showHelp){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var crawler = new Crawler(ns, {\\n    resultLimit: 1000,\\n    rootHost: \\\"home\\\"\\n  });\\n  var servers = await crawler.crawl();\\n  \\n  var serverFinder = new ServerFinder(ns, {\\n    hostnames: servers,\\n    limit: ns.args[1],\\n    onlyWithMoney: findTargets,\\n    onlyWithRootAccess: true,\\n    onlyNotMine: findTargets,\\n    onlyNotHome: true\\n  });\\n  \\n  var results;\\n  if (findHosts){\\n    results = await serverFinder.findBestHosts();\\n  } else {\\n    results = await serverFinder.findBestTargets();\\n  }\\n  \\n  forEach(results, function(i, e){\\n    ns.tprint(i+1, \\\": \\\", e);\\n  });\\n  \\n}\",\"filename\":\"find-server.js\",\"server\":\"home\"}}],[\"biotic.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { Crawler } from \\\"crawler.js\\\";\\nimport { ServerFinder } from \\\"find-server.js\\\";\\nimport { Cell, InstallCell } from \\\"install-cell.js\\\";\\nimport { rootServer } from \\\"root-server.js\\\";\\nimport { forEach, forEachAsync, safeLoop } from \\\"utils.js\\\";\\nimport { getVpsNames, VpsManager } from \\\"vps.js\\\";\\n\\nvar _bioticState;\\n\\nfunction getBioticState(){\\n  if(typeof(_bioticState) === \\\"undefined\\\"){\\n    _bioticState = {};\\n  }\\n  if(typeof(_bioticState.cellPool) === \\\"undefined\\\"){\\n    _bioticState.cellPool = new CellPool();\\n  }\\n  return _bioticState;\\n}\\n\\n// A distribution of jobs that a collection of Cells can handle.\\nfunction Schedule(weaken, grow, hack){\\n\\n  var total = weaken + grow + hack;\\n  var weakenProportion = weaken / total;\\n  var growProportion = grow / total;\\n  var hackProportion = 1 - weakenProportion - growProportion;\\n\\n  return {\\n    weaken: weakenProportion,\\n    grow: growProportion,\\n    hack: hackProportion\\n  };\\n\\n}\\n\\n// An allocation of work to a given target\\nfunction Allocation(target, cells, schedule){\\n  \\n  async function assignWork(assignCell){\\n    \\n    var totalCells = cells.length;\\n    var totalWeaken = Math.ceil(totalCells * schedule.weaken);\\n    var totalGrow = Math.floor(totalCells * schedule.grow);\\n    var totalHack = Math.floor(totalCells * schedule.hack);\\n    \\n    for(var i = 0; i < totalWeaken; i++){\\n      var cell = cells[i];\\n      await assignCell(cell, \\\"weaken\\\", target);\\n    }\\n    for(var i = 0; i < totalGrow; i++){\\n      var cell = cells[totalWeaken + i];\\n      await assignCell(cell, \\\"grow\\\", target);\\n    }\\n    for(var i = 0; i < totalHack; i++){\\n      var cell = cells[totalWeaken + totalGrow + i];\\n      await assignCell(cell, \\\"hack\\\", target);\\n    }\\n    \\n  }\\n  \\n  return {\\n    assignWork\\n  };\\n  \\n}\\n\\n// A maintainable collection of cells\\nfunction CellPool(){\\n  \\n  var hosts = {};\\n  \\n  function removeHost(hostname){\\n    delete hosts[hostname];\\n  }\\n  \\n  function addHost(hostname, cells){\\n    hosts[hostname] = cells;\\n  }\\n  \\n  function getCells(){\\n    var allCells = [];\\n    for(var hostname in hosts){\\n      var cells = hosts[hostname];\\n      forEach(cells, function(i, e){\\n        allCells.push(e);\\n      });\\n    }\\n    return allCells;\\n  }\\n  \\n  function clear(){\\n    hosts = {};\\n  }\\n  \\n  return {\\n    removeHost,\\n    addHost,\\n    getCells,\\n    clear\\n  };\\n  \\n}\\n\\nfunction Allocator(ns){\\n  \\n  var weakenSchedule = new Schedule(1,0,0);\\n  var growSchedule = new Schedule(1,3,0);\\n  var hackSchedule = new Schedule(1,1,1);\\n  \\n  async function updateCellCommand(cell, command, target){\\n    \\n    async function runUpdate(){\\n      await ns.exec(\\n        \\\"cell.js\\\",\\n        cell.hostname,\\n        1,\\n        cell.instanceId,\\n        command,\\n        target);\\n    }\\n    \\n    async function updateStillRunning(){\\n      return await ns.isRunning(\\n        \\\"cell.js\\\",\\n        cell.hostname,\\n        cell.instanceId,\\n        command,\\n        target)\\n    }\\n    \\n    await runUpdate();\\n    await ns.sleep(10);\\n    while(await updateStillRunning()){\\n      await ns.sleep(10);\\n    }\\n    \\n  }\\n  \\n  async function allocateWork(target, cells){\\n    \\n    var currentSecurity = await ns.getServerSecurityLevel(target);\\n    var targetMaxSecurity = await ns.getServerMinSecurityLevel(target) + 3;\\n    var weakenStage = currentSecurity > targetMaxSecurity;\\n    \\n    var currentMoney = await ns.getServerMoneyAvailable(target);\\n    var targetMinMoney = await ns.getServerMaxMoney(target) * 0.9;\\n    var growStage = currentMoney < targetMinMoney;\\n    \\n    var schedule;\\n    if(weakenStage){\\n      ns.tprint(\\\"Weakening \\\", target, \\\" (\\\", cells.length, \\\")\\\");\\n      schedule = weakenSchedule;\\n    } else if(growStage){\\n      ns.tprint(\\\"Growing \\\", target, \\\" (\\\", cells.length, \\\")\\\");\\n      schedule = growSchedule;\\n    } else {\\n      ns.tprint(\\\"Hacking \\\", target, \\\" (\\\", cells.length, \\\")\\\");\\n      schedule = hackSchedule;\\n    }\\n    \\n    return new Allocation(target, cells, schedule);\\n    \\n  }\\n  \\n  function allocateCells(targets, allCells){\\n    \\n    var totalCells = allCells.length;\\n    var totalTargets = targets.length;\\n    var cellsForFirst = Math.ceil(totalCells / totalTargets);\\n    var cellsForRest = Math.floor(totalCells / totalTargets);\\n    \\n    var allocations = [];\\n    forEach(targets, function(i, target){\\n      \\n      var firstCell;\\n      var stopCell;\\n      if (i==0){\\n        firstCell = 0;\\n        stopCell = cellsForFirst;\\n      } else {\\n        firstCell = cellsForFirst + cellsForRest*(i-1);\\n        stopCell = firstCell + cellsForRest;\\n      }\\n      \\n      allocations.push({\\n        target,\\n        cells: allCells.slice(firstCell, stopCell)\\n      });\\n      \\n    });\\n    \\n    return allocations;\\n    \\n  }\\n  \\n  async function allocate(targets, cellPool){\\n    var allCells = cellPool.getCells();\\n    var cellAllocation = allocateCells(targets, allCells);\\n    await forEachAsync(cellAllocation, async function(i, e){\\n      var workAllocation = await allocateWork(e.target, e.cells);\\n      await workAllocation.assignWork(updateCellCommand);\\n    });\\n  }\\n  \\n  async function spam(target, cellPool){\\n    var allCells = cellPool.getCells();\\n    var cellAllocation = allocateCells([target], allCells)[0];\\n    var workAllocation = new Allocation(\\n      cellAllocation.target,\\n      cellAllocation.cells,\\n      weakenSchedule);\\n    await workAllocation.assignWork(updateCellCommand);\\n  }\\n  \\n  return {\\n    allocate,\\n    spam\\n  };\\n  \\n}\\n\\nfunction CellManager(ns, options){\\n  \\n  var installer = options.installer;\\n  var crawler = options.crawler;\\n  \\n  var cellPool = getBioticState().cellPool;\\n  \\n  async function uninstallOn(hostname){\\n    await installer.uninstall(hostname);\\n  }\\n  \\n  async function installOn(hostname){\\n    var newCells = await installer.install(hostname);\\n    cellPool.addHost(hostname, newCells);\\n  }\\n  \\n  async function install(hostname){\\n    \\n    // Identify hosts\\n    var allServers = await crawler.crawl();\\n    var hosts = [];\\n    await forEachAsync(allServers, async function(i, hostname){\\n      var isHome = hostname == \\\"home\\\";\\n      var isRooted = await ns.hasRootAccess(hostname);\\n      if(isRooted && !isHome){\\n        hosts.push(hostname);\\n      }\\n    });\\n    \\n    // Install on hosts\\n    cellPool.clear();\\n    await forEachAsync(hosts, async function(i, hostname){\\n      await installOn(hostname);\\n    });\\n    \\n  }\\n  \\n  return {\\n    uninstallOn,\\n    installOn,\\n    install\\n  };\\n  \\n}\\n\\nfunction Biotic (ns, options){\\n  \\n  var trace = options.trace;\\n  var cellManager = options.cellManager;\\n  var crawler = options.crawler;\\n  var allocator = options.allocator;\\n  var targetLimit = options.targetLimit;\\n  var vpsUpgrade = options.vpsUpgrade;\\n  var spam = options.spam;\\n  \\n  var bioticState = getBioticState();\\n  var cellPool = bioticState.cellPool;\\n  \\n  var upgradePeriod = 60*1000;\\n  \\n  async function rootServers(){\\n    var allServers = await crawler.crawl();\\n    await forEachAsync(allServers, async function(i, hostname){\\n      var success = await rootServer(ns, hostname);\\n      if (success){\\n        await ns.sleep(1000);\\n        await cellManager.installOn(hostname);\\n        await trace(\\\"Rooted server \\\" + hostname);\\n      }\\n    });\\n  }\\n  \\n  async function upgradeVps(){\\n    var vpsHosts = await getVpsNames();\\n    var manager = new VpsManager(ns, {\\n      hostnames: vpsHosts,\\n      decommission: cellManager.uninstallOn,\\n      commission: cellManager.installOn,\\n      trace: trace\\n    });\\n    await manager.upgrade();\\n  }\\n  \\n  async function allocateWork(){\\n    if(!spam){\\n      var allServers = await crawler.crawl();\\n      var targetFinder = new ServerFinder(ns, {\\n        hostnames: allServers,\\n        limit: targetLimit,\\n        onlyWithRootAccess: true,\\n        onlyWithMoney: true,\\n        onlyNotMine: true,\\n        onlyNotHome: true,\\n        onlyLowSecurity: true\\n      });\\n      var targets = await targetFinder.findBestTargets();\\n      await allocator.allocate(targets, cellPool);\\n    } else {\\n      await allocator.spam(\\\"n00dles\\\", cellPool);\\n    }\\n  }\\n  \\n  async function manage(){\\n    await cellManager.install();\\n    await safeLoop(ns, async function (){\\n      await rootServers();\\n      if(vpsUpgrade){\\n        await upgradeVps();\\n      }\\n      await allocateWork();\\n      await ns.sleep(upgradePeriod);\\n    });\\n  }\\n  \\n  return {\\n    manage\\n  };\\n  \\n}\\n\\nexport async function main(ns) {\\n  \\n  var targetLimit;\\n  if(ns.args.length > 0){\\n    targetLimit = ns.args[0];\\n  }\\n  if (!targetLimit) {\\n    targetLimit = 1;\\n  }\\n  \\n  var vpsUpgrade = ns.args.indexOf(\\\"--no-vps-upgrade\\\") < 0;\\n  var spam = ns.args.indexOf(\\\"--spam\\\") >= 0;\\n  \\n  var crawler = new Crawler(ns, {\\n    resultLimit: 1000,\\n    rootHost: \\\"home\\\"\\n  });\\n  var allocator = new Allocator(ns);\\n  var installer = new InstallCell(ns);\\n  var cellManager = new CellManager(ns, {\\n    installer: installer,\\n    crawler: crawler\\n  });\\n  var biotic = new Biotic(ns, {\\n    trace: ns.tprint,\\n    cellManager: cellManager,\\n    crawler: crawler,\\n    allocator: allocator,\\n    targetLimit: targetLimit,\\n    vpsUpgrade: vpsUpgrade,\\n    spam: spam\\n  });\\n  await biotic.manage();\\n  \\n}\",\"filename\":\"biotic.js\",\"server\":\"home\"}}],[\"install-cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { forEachAsync } from \\\"utils.js\\\";\\n\\n// A model for an instance of Cell.js running on a server\\nexport function Cell(hostname, index){\\n  \\n  return {\\n    hostname,\\n    index,\\n    instanceId: hostname + \\\"|\\\" + index\\n  };\\n  \\n}\\n\\nexport function InstallCell (ns){\\n  \\n  var mainScript = \\\"cell.js\\\";\\n  var scripts = [\\n    \\\"utils.js\\\",\\n    \\\"cell.js\\\"\\n  ];\\n  \\n  async function install(hostname){\\n    \\n    await forEachAsync(scripts, async function(i,e){\\n      await ns.scriptKill(e, hostname);\\n    });\\n    await forEachAsync(scripts, async function(i,e){\\n      await ns.scp(e, hostname);\\n    });\\n    \\n    var spareInstances = 1; // How many instances-worth of RAM to leave free\\n    var ramRequired = await ns.getScriptRam(mainScript);\\n    var ramMax = await ns.getServerMaxRam(hostname);\\n    var ramUsed = await ns.getServerUsedRam(hostname);\\n    var ramAvailable = ramMax - ramUsed;\\n    var ramDedicated = ramAvailable - spareInstances * ramRequired;\\n    \\n    var instanceCount = Math.floor(ramDedicated / ramRequired);\\n    var instanceSize = 1;\\n    while(instanceCount > 200){\\n      instanceSize *= 2;\\n      instanceCount = Math.floor(\\n        ramDedicated\\n        / ramRequired\\n        / instanceSize);\\n    }\\n    \\n    var newCells = [];\\n    for(var i = 0; i < instanceCount; i++){\\n      var newCell = new Cell(hostname, i);\\n      await ns.sleep(10);\\n      await ns.exec(\\n        mainScript,\\n        hostname,\\n        instanceSize,\\n        newCell.instanceId);\\n      newCells.push(newCell);\\n    }\\n    \\n    return newCells;\\n    \\n  }\\n  \\n  async function uninstall(hostname){\\n    await forEachAsync(scripts, async function(i,e){\\n      await ns.scriptKill(e, hostname);\\n    });\\n    await forEachAsync(scripts, async function(i,e){\\n      await ns.rm(e, hostname);\\n    });\\n  }\\n  \\n  return {\\n    install,\\n    uninstall\\n  };\\n  \\n}\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  install-cell.js install <host>\\\");\\n  ns.tprint(\\\"  install-cell.js uninstall <host>\\\");\\n}\\n\\nexport async function main(ns) {\\n  var installCell = new InstallCell(ns);\\n  if(ns.args.length == 2 && ns.args[0] == \\\"install\\\"){\\n    var newCells = await installCell.install(ns.args[1]);\\n    ns.tprint(\\\"Instances installed: \\\", newCells.length);\\n  } else if(ns.args.length == 2 && ns.args[0] == \\\"uninstall\\\"){\\n    await installCell.uninstall(ns.args[1]);\\n  } else {\\n    printHelp(ns);\\n  }\\n}\",\"filename\":\"install-cell.js\",\"server\":\"home\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"home\"}}],[\"bubble-rider.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { numberWithMagnitude } from \\\"format.js\\\";\\nimport { forEach, forEachAsync } from \\\"utils.js\\\";\\n\\nvar transactionCost = 100*1000;\\nvar packetSize = 1000*1000*1000;\\nvar buyInGrowth = 0.55;\\nvar sellGrowth = 0.5;\\n  \\nasync function analyseMarket(ns){\\n  var symbols = await ns.stock.getSymbols();\\n  var profiles = [];\\n  await forEachAsync(symbols, async function(i, e){\\n    var position = await ns.stock.getPosition(e);\\n    var ownedShares = position[0];\\n    var maxShares = await ns.stock.getMaxShares(e);\\n    profiles.push({\\n      symbol: e,\\n      shares: ownedShares,\\n      askPrice: await ns.stock.getAskPrice(e),\\n      bidPrice: await ns.stock.getBidPrice(e),\\n      growthChance: await ns.stock.getForecast(e),\\n      maxShares: maxShares,\\n      availableShares: maxShares - ownedShares\\n    });\\n  });\\n  return profiles;\\n}\\n\\nfunction bestForecast(profiles){\\n  return profiles\\n    .filter(function(profile){\\n      var maxPurchase = profile.askPrice * profile.availableShares;\\n      return maxPurchase > packetSize;\\n    })\\n    .sort(function(a,b){\\n      return b.growthChance - a.growthChance\\n    })\\n    [0];\\n}\\n\\nasync function sellRisky(ns, profiles){\\n  await forEachAsync(profiles, async function(i ,e){\\n    var sellValue = e.bidPrice * e.shares;\\n    var sell =\\n      sellValue > transactionCost &&\\n      e.growthChance <= sellGrowth;\\n    if(sell){\\n      ns.tprint(\\n        \\\"Selling \\\",\\n        e.symbol,\\n        \\\" ($ \\\",\\n        numberWithMagnitude(e.shares * e.bidPrice, 2),\\n        \\\")\\\");\\n      await ns.stock.sellStock(e.symbol, e.shares);\\n    }\\n  });\\n}\\n\\nasync function buyBest(ns, profiles){\\n  var funds = await ns.getServerMoneyAvailable(\\\"home\\\");\\n  var bestStock = bestForecast(profiles);\\n  if(bestStock.growthChance > buyInGrowth){\\n    var maxPurchase = bestStock.askPrice * bestStock.availableShares;\\n    var maxPackets = Math.floor(maxPurchase / packetSize);\\n    var fundablePackets = Math.floor((funds - transactionCost) / packetSize);\\n    var packets = Math.min(maxPackets, fundablePackets);\\n    var shares = Math.floor(packets * packetSize / bestStock.askPrice);\\n    if(packets > 0){\\n      ns.tprint(\\n        \\\"Buying \\\",\\n        bestStock.symbol,\\n        \\\" ($ \\\",\\n        numberWithMagnitude(shares * bestStock.askPrice, 2),\\n        \\\")\\\");\\n      await ns.stock.buyStock(bestStock.symbol, shares);\\n    }\\n  }\\n}\\n\\n\\nasync function trade(ns, profiles){\\n    await sellRisky(ns, profiles);\\n    await buyBest(ns, profiles);\\n}\\n\\nasync function printNetWorth(ns, analysis){\\n  var total = 0;\\n  forEach(analysis, function(i, e){\\n    if(e.shares > 0){\\n      total += e.shares * e.bidPrice;\\n    }\\n  });\\n  ns.tprint(\\n    \\\"Current value: \\\",\\n    \\\" ($ \\\",\\n    numberWithMagnitude(total, 2),\\n    \\\")\\\");\\n}\\n\\nexport async function main(ns){\\n  \\n  async function loop(f){\\n    for(;;){\\n      var analysis = await analyseMarket(ns);\\n      await f(ns, analysis);\\n      await ns.sleep(6*1000);\\n    }\\n  }\\n  \\n  var f;\\n  if(ns.args.length == 1 && ns.args[0] == \\\"buy\\\"){\\n    await loop(buyBest);\\n  } else if(ns.args.length == 1 && ns.args[0] == \\\"sell\\\"){\\n    await loop(sellRisky);\\n  } else if(ns.args.length == 1 && ns.args[0] == \\\"trade\\\"){\\n    await loop(trade);\\n  } else if(ns.args.length == 1 && ns.args[0] == \\\"show-value\\\"){\\n    var analysis = await analyseMarket(ns);\\n    await printNetWorth(ns, analysis);\\n    return;\\n  } else {\\n    ns.tprint(\\\"Usage:\\\");\\n    ns.tprint(\\\"  bubble-rider.js buy\\\");\\n    ns.tprint(\\\"  bubble-rider.js sell\\\");\\n    ns.tprint(\\\"  bubble-rider.js trade\\\");\\n    ns.tprint(\\\"  bubble-rider.js show-value\\\");\\n    return;\\n  }\\n  \\n}\\n\",\"filename\":\"bubble-rider.js\",\"server\":\"home\"}}],[\"format.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\nexport function numberWithMagnitude(number, fractionDigits){\\n    \\n    var base = 1000;\\n    var magnitudes = [\\n      ' ',\\n      'k',\\n      'm',\\n      'b',\\n      't',\\n      'q'\\n    ];\\n    \\n    var multiple = number;\\n    var multipleRounded = multiple.toFixed(fractionDigits);\\n    var exponent;\\n    for(exponent = 0; exponent < magnitudes.length - 1; exponent++){\\n      if(multipleRounded < base){\\n        break;\\n      } else {\\n        multiple = multiple / base;\\n        multipleRounded = multiple.toFixed(fractionDigits);\\n        continue;\\n      }\\n    }\\n    \\n    var mantissa = multipleRounded;\\n    var magnitude = magnitudes[exponent];\\n    \\n    return mantissa.toString() + magnitude;\\n    \\n}\\n\\nexport async function main(ns){\\n\\n\\tns.tprint(\\\"Testing formats:\\\");\\n  \\n\\tns.tprint(numberWithMagnitude(123.456, 1));\\n\\tns.tprint(numberWithMagnitude(123.456, 2));\\n\\tns.tprint(numberWithMagnitude(123.456, 4));\\n\\n\\tns.tprint(numberWithMagnitude(1123.456, 1));\\n\\tns.tprint(numberWithMagnitude(1123.456, 2));\\n\\tns.tprint(numberWithMagnitude(1123.456, 4));\\n\\n\\tns.tprint(numberWithMagnitude(1234567.456, 1));\\n\\tns.tprint(numberWithMagnitude(1234567.456, 2));\\n\\tns.tprint(numberWithMagnitude(1234567.456, 4));\\n\\n\\tns.tprint(numberWithMagnitude(1234567.456 * 1000, 1));\\n\\tns.tprint(numberWithMagnitude(1234567.456 * 1000, 2));\\n\\tns.tprint(numberWithMagnitude(1234567.456 * 1000, 4));\\n\\n\\tns.tprint(numberWithMagnitude(1234567.456 * 1000 * 1000, 1));\\n\\tns.tprint(numberWithMagnitude(1234567.456 * 1000 * 1000, 2));\\n\\tns.tprint(numberWithMagnitude(1234567.456 * 1000 * 1000, 4));\\n\\n\\tns.tprint(numberWithMagnitude(1234567.456 * 1000 * 1000 * 1000, 1));\\n\\tns.tprint(numberWithMagnitude(1234567.456 * 1000 * 1000 * 1000, 2));\\n\\tns.tprint(numberWithMagnitude(1234567.456 * 1000 * 1000 * 1000, 4));\\n\\n\\tns.tprint(numberWithMagnitude(1234567.456 * 1000000 * 1000000, 1));\\n\\tns.tprint(numberWithMagnitude(1234567.456 * 1000000 * 1000000, 2));\\n\\tns.tprint(numberWithMagnitude(1234567.456 * 1000000 * 1000000, 4));\\n  \\n\\tns.tprint(numberWithMagnitude(1000 * 1000 * 1000 - 1, 2));\\n\\n}\",\"filename\":\"format.js\",\"server\":\"home\"}}],[\"portfolio.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { numberWithMagnitude } from \\\"format.js\\\";\\nimport { forEach, forEachAsync } from \\\"utils.js\\\";\\n\\nasync function analyseMarket(ns){\\n  var symbols = await ns.stock.getSymbols();\\n  var profiles = [];\\n  await forEachAsync(symbols, async function(i, e){\\n    var position = await ns.stock.getPosition(e);\\n    var ownedShares = position[0];\\n    var maxShares = await ns.stock.getMaxShares(e);\\n    profiles.push({\\n      symbol: e,\\n      shares: ownedShares,\\n      askPrice: await ns.stock.getAskPrice(e),\\n      bidPrice: await ns.stock.getBidPrice(e),\\n      growthChance: await ns.stock.getForecast(e),\\n      maxShares: maxShares,\\n      availableShares: maxShares - ownedShares\\n    });\\n  });\\n  return profiles;\\n}\\n\\nasync function printNetWorth(ns, analysis){\\n  var total = 0;\\n  forEach(analysis, function(i, e){\\n    if(e.shares > 0){\\n      total += e.shares * e.bidPrice;\\n    }\\n  });\\n  ns.print(\\n    \\\"Current value: \\\",\\n    \\\" $\\\",\\n    numberWithMagnitude(total, 2));\\n}\\n\\nexport async function main(ns){\\n  for(;;){\\n    await ns.sleep(6*1000);\\n    var analysis = await analyseMarket(ns);\\n    await printNetWorth(ns, analysis);\\n  }\\n}\\n\",\"filename\":\"portfolio.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"vps-arbok\",\"vps-bonsly\",\"vps-buneary\",\"vps-clefairy\",\"vps-cubone\",\"vps-diglet\",\"vps-dragonite\",\"vps-ekans\",\"vps-latios\",\"darkweb\",\"vps-nuzleaf\",\"vps-scorbunny\",\"vps-zigzagoon\",\"vps-arcanine\",\"vps-charmander\",\"vps-dartrix\",\"vps-eevee\",\"vps-gengar\",\"vps-marowak\",\"vps-meowth\",\"vps-pikachu\",\"vps-poochyena\",\"vps-rattata\",\"vps-treecko\",\"vps-vulpix\",\"vps-absol\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[1,\"--no-vps-upgrade\"],\"dataMap\":{},\"filename\":\"biotic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":570.6099999999929,\"ramUsage\":14.65,\"server\":\"home\",\"scriptKey\":\"biotic.js*[1,\\\"--no-vps-upgrade\\\"]\",\"title\":\"biotic.js 1 --no-vps-upgrade\",\"threads\":1,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"96.1.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":13438547321.2,\"moneyMax\":67192736606,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1325,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"58.6.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":20575938974.4,\"moneyMax\":102879694872,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1235,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-364625-Netburners.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[11,6],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"86.0.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":9960494957.6,\"moneyMax\":49802474788,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":917,\"serverGrowth\":65,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"42.3.8.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":6643306219.200001,\"moneyMax\":33216531096,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1024,\"serverGrowth\":60,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-542210.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0110110100001111\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-24550.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[96,188,99,124,61,129,6,55,100,173,32,194,85,97,127,129,12,178,84,160,78,117,155,96,101,10,178,21,56,69,128,154,88,138,145,102],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"64.6.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":13593200889.6,\"moneyMax\":67966004448,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1199,\"serverGrowth\":92,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-649606.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,7],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-141311.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1110000000000000100000111111111100011001111101010000100000101101\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"80.0.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":8149030560,\"moneyMax\":40745152800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1146,\"serverGrowth\":68,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-399601.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"11000011110111100011000000101101\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-210560-Netburners.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":49978,\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"97.0.5.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":5458583599.6,\"moneyMax\":27292917998,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1068,\"serverGrowth\":96,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-588054.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[7],[3,4],[1,8,7],[4,2,2,2],[3,4,3,7,2],[8,3,9,4,7,8]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-134429.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"64765504\",-93],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"74.0.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":8876325564.4,\"moneyMax\":44381627822,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":943,\"serverGrowth\":99,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-981122.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[154,[3,4,7,8,10,13,14,16,17,18,19]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-702478-Netburners.cct\",\"type\":\"Array Jumping Game\",\"data\":[10,3,0,8,1,4,0,0,0,9,7,8,2,6,5,2,0],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"69.5.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":11336503686.800001,\"moneyMax\":56682518434,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":962,\"serverGrowth\":91,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"91.9.8.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":702216550.4000001,\"moneyMax\":3511082752,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1233,\"serverGrowth\":93,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"45.2.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":400000,\"moneyMax\":2000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1275,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-789344.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[83,100,85,140,167,24,199,141,174,97,20,88,17,116,104,58,40,51,124,14,69,129,102,57],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-919965.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()a(a(\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"24.7.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":472332498.8,\"moneyMax\":2361662494,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":908,\"serverGrowth\":72,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-581777-Netburners.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[152,[2,3,5,8,9,12,13,15,17,20,22]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"43.4.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":353839994,\"moneyMax\":1769199970,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":979,\"serverGrowth\":70,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-578905.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[0,-8,-3,-9,9,0,-1,-1,6,3,-2,10,-5,-6,-8,-7,5,5,0,9,-10,-4,-5,-8,2],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-509462.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[13,13],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"2.6.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":276396324,\"moneyMax\":1381981620,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":949,\"serverGrowth\":54,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"48.1.2.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":254592667.60000002,\"moneyMax\":1272963338,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":810,\"serverGrowth\":72,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-389505.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[2,4],[2,9,6],[4,3,2,9],[6,7,2,9,5],[9,6,5,4,5,6],[2,8,4,9,8,2,9],[7,6,1,4,2,9,2,2]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"41.6.7.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":307162950.8,\"moneyMax\":1535814754,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":804,\"serverGrowth\":76,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-916968.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-1,-4,4,-1,10,-2,2,8,-9,10,-9,-2,5,2,-6,8,5,-1,-5,1,-7,5,9,8,-2,-8,-3,-1,8,-6],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"66.9.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":366603733.20000005,\"moneyMax\":1833018666,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":924,\"serverGrowth\":89,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-795930.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":567131785,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"34.8.9.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":479737984.8,\"moneyMax\":2398689924,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":857,\"serverGrowth\":82,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-695177.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"6917847\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"77.7.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":329564254,\"moneyMax\":1647821270,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":808,\"serverGrowth\":64,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-623992.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[8,4],[6,9,2],[5,8,3,3],[6,9,4,3,4],[1,8,1,4,4,7],[9,4,2,6,8,5,3]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-986703.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,1,1,1],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,1,0,0,1,1],[0,0,0,0,1,1,0],[0,1,1,0,0,0,0]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-123899.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,1,0,0,1,0,1,0],[0,0,1,0,0,0,0,1,1,0],[0,0,0,1,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[1,0,1,1,1,1,0,0,0,0],[0,1,1,0,0,0,1,0,0,0],[0,1,1,1,1,0,0,0,1,0]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"2.5.7.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":223694458.8,\"moneyMax\":1118472294,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":855,\"serverGrowth\":89,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"48.9.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":350701227.6,\"moneyMax\":1753506138,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":918,\"serverGrowth\":72,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"55.8.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":303456613.6,\"moneyMax\":1517283068,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":868,\"serverGrowth\":76,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"81.2.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":464778252.40000004,\"moneyMax\":2323891262,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":856,\"serverGrowth\":64,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"94.8.4.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":385630668.8,\"moneyMax\":1928153344,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":920,\"serverGrowth\":62,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-385422.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[2],[3,4],[1,3,6],[6,7,5,6],[8,8,2,3,3],[9,7,7,6,7,7],[4,8,7,9,7,5,9]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-268118.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[13,[[1,6],[8,12],[3,6],[4,11],[2,6],[0,3],[1,4],[4,9],[0,8],[5,12],[2,4],[2,7],[0,9],[7,8],[0,2],[10,11],[1,7],[6,9],[6,11],[1,5]]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-620889.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9AmPtL4Clc045q6s949KlXJCxUDq025o158R6rOfLcd557iEnmJdi691h3321r55\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"64.1.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":408160354.8,\"moneyMax\":2040801774,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":782,\"serverGrowth\":70,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-974534.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"6Ki61Zz765wQzDj9341UCr497NlOSlsL7243QzA369a8B5VauC647\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-467727-Netburners.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[122,124,198,24,104,150,105,200,148,39,150,117,197,89,81,73,44,149,90,183,47,137,194,188,5,124,9,162,50,30,155,133,31,31,65,20],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"53.4.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":398607464.40000004,\"moneyMax\":1993037322,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":800,\"serverGrowth\":73,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-548524-Netburners.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[7,10],[8,11],[15,24],[5,11],[9,10],[8,9],[8,18],[6,15]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-589128.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[89,[1,2,3,4,6,7,9,12]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"8.4.6.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":330281105.20000005,\"moneyMax\":1651405526,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":776,\"serverGrowth\":73,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"40.4.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":551584358.4,\"moneyMax\":2757921792,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":874,\"serverGrowth\":69,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-746731.cct\",\"type\":\"Array Jumping Game\",\"data\":[7,0,5,7,8,0,6,0,1,10,7,3,7,6,6,9,0,0,9,3],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-410964-Netburners.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0,1],[0,0,0,0],[0,0,0,0],[0,0,0,0]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"45.5.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\",\"omnia\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":682840071.2,\"moneyMax\":3414200356,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":811,\"serverGrowth\":86,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-336202.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[9,16],[15,16],[6,9],[24,27],[21,24],[19,20],[25,26],[5,7],[4,12],[7,9],[24,27],[20,22],[10,11],[9,12],[10,15],[10,20],[21,22]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-394826-Netburners.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[49,25,168,141,97,122,166,192,105,73,98,73,21,175,123,58,179,132],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"41.3.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":449960202.40000004,\"moneyMax\":2249801012,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":818,\"serverGrowth\":83,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"14.7.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":590471971.6,\"moneyMax\":2952359858,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":806,\"serverGrowth\":70,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-439234.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[102,146,29,108,65,159,184,47,18,20,147,172,87,42,76]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"34.2.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":434465265.20000005,\"moneyMax\":2172326326,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":789,\"serverGrowth\":76,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-900791-Netburners.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,1,0,0,0],[1,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,1,0,0,0]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"19.8.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"catalyst\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":304130191.2,\"moneyMax\":1520650956,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":744,\"serverGrowth\":59,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-532278.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"QUEUE VIRUS TABLE ARRAY LOGIC\",25],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-17281.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,7],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"97.3.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":206638852,\"moneyMax\":1033194260,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":496,\"serverGrowth\":49,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-746801-Netburners.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"LOGINLOGICMOUSELINUXMODEM\",\"NOTEBOOK\"],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"29.5.7.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":278734397.2,\"moneyMax\":1393671986,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":583,\"serverGrowth\":59,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-824455.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[170,181,50,122,48,11,104,104],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"93.0.9.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":119968800.80000001,\"moneyMax\":599844004,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":414,\"serverGrowth\":42,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-444917.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"CACHE MEDIA FRAME QUEUE LOGIN\",23],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-128148.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,1,0,0,0],[0,0,0,1,0,1,0,1,0,0,0],[0,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"68.4.6.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\",\"alpha-ent\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":85049545.60000001,\"moneyMax\":425247728,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":427,\"serverGrowth\":43,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"31.3.8.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":389730413.20000005,\"moneyMax\":1948652066,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":767,\"serverGrowth\":79,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-394193.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[59,[4,6,7,8,9,12,13,14,15]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-385993-Netburners.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,1],[0,1,0,1,1,0,0],[1,0,0,1,0,0,0],[1,1,0,1,0,0,0],[1,0,1,0,0,1,0],[0,0,0,0,0,0,0]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-290915.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"6kTJjr6kTJjr6ZE38UNjr6ZLt7qHpi2pi2SQS42iqQSc2awtQScc2h3tQScc2h3cc2h3cMvc1Mvc1MvApwXc1M\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"58.5.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":94162932.80000001,\"moneyMax\":470814664,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":459,\"serverGrowth\":49,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-393491.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":3394674759,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"89.0.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":208709508,\"moneyMax\":1043547540,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":578,\"serverGrowth\":64,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"45.3.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":120121268.80000001,\"moneyMax\":600606344,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":405,\"serverGrowth\":35,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-747.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"5640\",25],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"59.3.3.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":38,\"minDifficulty\":13,\"moneyAvailable\":63515382.800000004,\"moneyMax\":317576914,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":310,\"serverGrowth\":52,\"runningScripts\":[]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-848037.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"FRAME LINUX MODEM MOUSE LOGIN\",1],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-154029.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"CLOUD SHELL FRAME LINUX PRINT\",23],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"62.7.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":97667686.4,\"moneyMax\":488338432,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":318,\"serverGrowth\":65,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-506985.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"11001000100000001000100100111110\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"70.3.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":110000000,\"moneyMax\":550000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":391,\"serverGrowth\":75,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"86.7.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\",\"zb-institute\",\"syscore\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":32794933.6,\"moneyMax\":163974668,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":258,\"serverGrowth\":43,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-49454.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[109,167,148,36,193,130,187,65,108,85,172]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-645189-Netburners.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[55,184,125,83,164,118,115,70,161,112,196,92,54,193,74,17,6,161,179,114,189,16,38,26,23,124,58,198,53,119,111,57,7,25,47],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"5.0.2.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"n00dles\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.106,\"minDifficulty\":1,\"moneyAvailable\":90712.54690122575,\"moneyMax\":140000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles|0\"],\"dataMap\":{\"n00dles\":[13130.449337757864,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":13130.449337757864,\"onlineRunningTime\":565.6099999999917,\"ramUsage\":2,\"server\":\"n00dles\",\"scriptKey\":\"cell.js*[\\\"n00dles|0\\\"]\",\"title\":\"cell.js n00dles|0\",\"threads\":1,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-954672-Netburners.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[10,[[4,8],[1,7],[5,6],[1,4],[2,9],[0,1],[1,5],[2,4],[3,8],[4,9],[2,6],[6,7],[5,9],[0,9],[0,8]]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"65.4.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"foodnstuff\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":800000,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff|0\"],\"dataMap\":{\"n00dles\":[13881.494282600406,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":13881.494282600406,\"onlineRunningTime\":565.8099999999918,\"ramUsage\":2,\"server\":\"foodnstuff\",\"scriptKey\":\"cell.js*[\\\"foodnstuff|0\\\"]\",\"title\":\"cell.js foodnstuff|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff|1\"],\"dataMap\":{\"n00dles\":[13953.934255732003,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":13953.934255732003,\"onlineRunningTime\":565.8099999999918,\"ramUsage\":2,\"server\":\"foodnstuff\",\"scriptKey\":\"cell.js*[\\\"foodnstuff|1\\\"]\",\"title\":\"cell.js foodnstuff|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff|2\"],\"dataMap\":{\"n00dles\":[13909.001010992408,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":13909.001010992408,\"onlineRunningTime\":565.6099999999917,\"ramUsage\":2,\"server\":\"foodnstuff\",\"scriptKey\":\"cell.js*[\\\"foodnstuff|2\\\"]\",\"title\":\"cell.js foodnstuff|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff|3\"],\"dataMap\":{\"n00dles\":[13835.478934481791,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":13835.478934481791,\"onlineRunningTime\":565.6099999999917,\"ramUsage\":2,\"server\":\"foodnstuff\",\"scriptKey\":\"cell.js*[\\\"foodnstuff|3\\\"]\",\"title\":\"cell.js foodnstuff|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff|4\"],\"dataMap\":{\"n00dles\":[13770.014024471104,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":13770.014024471104,\"onlineRunningTime\":565.6099999999917,\"ramUsage\":2,\"server\":\"foodnstuff\",\"scriptKey\":\"cell.js*[\\\"foodnstuff|4\\\"]\",\"title\":\"cell.js foodnstuff|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff|5\"],\"dataMap\":{\"n00dles\":[13697.229829465747,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":13697.229829465747,\"onlineRunningTime\":565.6099999999917,\"ramUsage\":2,\"server\":\"foodnstuff\",\"scriptKey\":\"cell.js*[\\\"foodnstuff|5\\\"]\",\"title\":\"cell.js foodnstuff|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff|6\"],\"dataMap\":{\"n00dles\":[13624.831806704275,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":13624.831806704275,\"onlineRunningTime\":565.6099999999917,\"ramUsage\":2,\"server\":\"foodnstuff\",\"scriptKey\":\"cell.js*[\\\"foodnstuff|6\\\"]\",\"title\":\"cell.js foodnstuff|6\",\"threads\":1,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-443171-Netburners.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((a))))a)(a\",\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-290396.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[7,12],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"57.7.3.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"sigma-cosmetics\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":2168770.2179633975,\"moneyMax\":4600000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics|0\"],\"dataMap\":{\"n00dles\":[15185.527740928212,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":15185.527740928212,\"onlineRunningTime\":566.0099999999918,\"ramUsage\":2,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"cell.js*[\\\"sigma-cosmetics|0\\\"]\",\"title\":\"cell.js sigma-cosmetics|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics|1\"],\"dataMap\":{\"n00dles\":[15105.207489314102,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":15105.207489314102,\"onlineRunningTime\":566.0099999999918,\"ramUsage\":2,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"cell.js*[\\\"sigma-cosmetics|1\\\"]\",\"title\":\"cell.js sigma-cosmetics|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics|2\"],\"dataMap\":{\"n00dles\":[15116.7449321487,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":15116.7449321487,\"onlineRunningTime\":566.0099999999918,\"ramUsage\":2,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"cell.js*[\\\"sigma-cosmetics|2\\\"]\",\"title\":\"cell.js sigma-cosmetics|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics|3\"],\"dataMap\":{\"n00dles\":[15036.792998285762,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":15036.792998285762,\"onlineRunningTime\":566.0099999999918,\"ramUsage\":2,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"cell.js*[\\\"sigma-cosmetics|3\\\"]\",\"title\":\"cell.js sigma-cosmetics|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics|4\"],\"dataMap\":{\"n00dles\":[14957.265526424108,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":14957.265526424108,\"onlineRunningTime\":566.0099999999918,\"ramUsage\":2,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"cell.js*[\\\"sigma-cosmetics|4\\\"]\",\"title\":\"cell.js sigma-cosmetics|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics|5\"],\"dataMap\":{\"n00dles\":[14878.18291467111,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":14878.18291467111,\"onlineRunningTime\":566.0099999999918,\"ramUsage\":2,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"cell.js*[\\\"sigma-cosmetics|5\\\"]\",\"title\":\"cell.js sigma-cosmetics|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics|6\"],\"dataMap\":{\"n00dles\":[14814.81143467205,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":14814.81143467205,\"onlineRunningTime\":566.0099999999918,\"ramUsage\":2,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"cell.js*[\\\"sigma-cosmetics|6\\\"]\",\"title\":\"cell.js sigma-cosmetics|6\",\"threads\":1,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"37.7.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"joesguns\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":1000000,\"moneyMax\":5000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns|0\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.809999999992,\"ramUsage\":2,\"server\":\"joesguns\",\"scriptKey\":\"cell.js*[\\\"joesguns|0\\\"]\",\"title\":\"cell.js joesguns|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns|1\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.809999999992,\"ramUsage\":2,\"server\":\"joesguns\",\"scriptKey\":\"cell.js*[\\\"joesguns|1\\\"]\",\"title\":\"cell.js joesguns|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns|2\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.809999999992,\"ramUsage\":2,\"server\":\"joesguns\",\"scriptKey\":\"cell.js*[\\\"joesguns|2\\\"]\",\"title\":\"cell.js joesguns|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns|3\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.809999999992,\"ramUsage\":2,\"server\":\"joesguns\",\"scriptKey\":\"cell.js*[\\\"joesguns|3\\\"]\",\"title\":\"cell.js joesguns|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns|4\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.809999999992,\"ramUsage\":2,\"server\":\"joesguns\",\"scriptKey\":\"cell.js*[\\\"joesguns|4\\\"]\",\"title\":\"cell.js joesguns|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns|5\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.6099999999919,\"ramUsage\":2,\"server\":\"joesguns\",\"scriptKey\":\"cell.js*[\\\"joesguns|5\\\"]\",\"title\":\"cell.js joesguns|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns|6\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.6099999999919,\"ramUsage\":2,\"server\":\"joesguns\",\"scriptKey\":\"cell.js*[\\\"joesguns|6\\\"]\",\"title\":\"cell.js joesguns|6\",\"threads\":1,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"74.0.4.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"zer0\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":3000000,\"moneyMax\":15000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|0\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.6099999999919,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|0\\\"]\",\"title\":\"cell.js zer0|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|1\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.6099999999919,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|1\\\"]\",\"title\":\"cell.js zer0|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|2\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.6099999999919,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|2\\\"]\",\"title\":\"cell.js zer0|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|3\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.6099999999919,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|3\\\"]\",\"title\":\"cell.js zer0|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|4\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.6099999999919,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|4\\\"]\",\"title\":\"cell.js zer0|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|5\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.6099999999919,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|5\\\"]\",\"title\":\"cell.js zer0|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|6\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.6099999999919,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|6\\\"]\",\"title\":\"cell.js zer0|6\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|7\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.6099999999919,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|7\\\"]\",\"title\":\"cell.js zer0|7\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|8\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.6099999999919,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|8\\\"]\",\"title\":\"cell.js zer0|8\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|9\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.6099999999919,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|9\\\"]\",\"title\":\"cell.js zer0|9\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|10\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.6099999999919,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|10\\\"]\",\"title\":\"cell.js zer0|10\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|11\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.6099999999919,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|11\\\"]\",\"title\":\"cell.js zer0|11\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|12\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.6099999999919,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|12\\\"]\",\"title\":\"cell.js zer0|12\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|13\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.6099999999919,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|13\\\"]\",\"title\":\"cell.js zer0|13\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|14\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.6099999999919,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|14\\\"]\",\"title\":\"cell.js zer0|14\",\"threads\":1,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-144427-Netburners.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"MEDIA LOGIC ARRAY LOGIN EMAIL\",13],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"94.4.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"nectar-net\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":1100000,\"moneyMax\":5500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net|0\"],\"dataMap\":{\"n00dles\":[13583.488496068296,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":13583.488496068296,\"onlineRunningTime\":565.6099999999917,\"ramUsage\":2,\"server\":\"nectar-net\",\"scriptKey\":\"cell.js*[\\\"nectar-net|0\\\"]\",\"title\":\"cell.js nectar-net|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net|1\"],\"dataMap\":{\"n00dles\":[13515.532353563802,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":13515.532353563802,\"onlineRunningTime\":565.6099999999917,\"ramUsage\":2,\"server\":\"nectar-net\",\"scriptKey\":\"cell.js*[\\\"nectar-net|1\\\"]\",\"title\":\"cell.js nectar-net|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net|2\"],\"dataMap\":{\"n00dles\":[13444.109499675022,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":13444.109499675022,\"onlineRunningTime\":565.6099999999917,\"ramUsage\":2,\"server\":\"nectar-net\",\"scriptKey\":\"cell.js*[\\\"nectar-net|2\\\"]\",\"title\":\"cell.js nectar-net|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net|3\"],\"dataMap\":{\"n00dles\":[13380.728771468497,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":13380.728771468497,\"onlineRunningTime\":565.6099999999917,\"ramUsage\":2,\"server\":\"nectar-net\",\"scriptKey\":\"cell.js*[\\\"nectar-net|3\\\"]\",\"title\":\"cell.js nectar-net|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net|4\"],\"dataMap\":{\"n00dles\":[13310.011420348375,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":13310.011420348375,\"onlineRunningTime\":565.6099999999917,\"ramUsage\":2,\"server\":\"nectar-net\",\"scriptKey\":\"cell.js*[\\\"nectar-net|4\\\"]\",\"title\":\"cell.js nectar-net|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net|5\"],\"dataMap\":{\"n00dles\":[13266.482634201391,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":13266.482634201391,\"onlineRunningTime\":565.6099999999917,\"ramUsage\":2,\"server\":\"nectar-net\",\"scriptKey\":\"cell.js*[\\\"nectar-net|5\\\"]\",\"title\":\"cell.js nectar-net|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net|6\"],\"dataMap\":{\"n00dles\":[13200.2078204849,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":13200.2078204849,\"onlineRunningTime\":565.6099999999917,\"ramUsage\":2,\"server\":\"nectar-net\",\"scriptKey\":\"cell.js*[\\\"nectar-net|6\\\"]\",\"title\":\"cell.js nectar-net|6\",\"threads\":1,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"79.9.6.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"neo-net\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":2000000,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|0\"],\"dataMap\":{\"n00dles\":[14581.260352126345,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":14581.260352126345,\"onlineRunningTime\":565.8099999999918,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|0\\\"]\",\"title\":\"cell.js neo-net|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|1\"],\"dataMap\":{\"n00dles\":[14504.153411249867,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":14504.153411249867,\"onlineRunningTime\":565.8099999999918,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|1\\\"]\",\"title\":\"cell.js neo-net|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|2\"],\"dataMap\":{\"n00dles\":[14427.511264014303,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":14427.511264014303,\"onlineRunningTime\":565.8099999999918,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|2\\\"]\",\"title\":\"cell.js neo-net|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|3\"],\"dataMap\":{\"n00dles\":[14366.52615342452,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":14366.52615342452,\"onlineRunningTime\":565.8099999999918,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|3\\\"]\",\"title\":\"cell.js neo-net|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|4\"],\"dataMap\":{\"n00dles\":[14320.939581413488,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":14320.939581413488,\"onlineRunningTime\":565.8099999999918,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|4\\\"]\",\"title\":\"cell.js neo-net|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|5\"],\"dataMap\":{\"n00dles\":[14249.049025800303,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":14249.049025800303,\"onlineRunningTime\":565.8099999999918,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|5\\\"]\",\"title\":\"cell.js neo-net|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|6\"],\"dataMap\":{\"n00dles\":[14173.70693525986,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":14173.70693525986,\"onlineRunningTime\":565.8099999999918,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|6\\\"]\",\"title\":\"cell.js neo-net|6\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|7\"],\"dataMap\":{\"n00dles\":[14167.889568770264,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":14167.889568770264,\"onlineRunningTime\":565.8099999999918,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|7\\\"]\",\"title\":\"cell.js neo-net|7\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|8\"],\"dataMap\":{\"n00dles\":[14096.812334836075,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":14096.812334836075,\"onlineRunningTime\":565.8099999999918,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|8\\\"]\",\"title\":\"cell.js neo-net|8\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|9\"],\"dataMap\":{\"n00dles\":[14026.11214690053,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":14026.11214690053,\"onlineRunningTime\":565.8099999999918,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|9\\\"]\",\"title\":\"cell.js neo-net|9\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|10\"],\"dataMap\":{\"n00dles\":[13951.95564275949,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":13951.95564275949,\"onlineRunningTime\":565.8099999999918,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|10\\\"]\",\"title\":\"cell.js neo-net|10\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|11\"],\"dataMap\":{\"n00dles\":[14159.576253426827,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":14159.576253426827,\"onlineRunningTime\":565.8099999999918,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|11\\\"]\",\"title\":\"cell.js neo-net|11\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|12\"],\"dataMap\":{\"n00dles\":[14084.71862022374,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":14084.71862022374,\"onlineRunningTime\":565.8099999999918,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|12\\\"]\",\"title\":\"cell.js neo-net|12\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|13\"],\"dataMap\":{\"n00dles\":[14025.550609049897,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":14025.550609049897,\"onlineRunningTime\":565.8099999999918,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|13\\\"]\",\"title\":\"cell.js neo-net|13\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|14\"],\"dataMap\":{\"n00dles\":[13955.266907224475,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":13955.266907224475,\"onlineRunningTime\":565.8099999999918,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|14\\\"]\",\"title\":\"cell.js neo-net|14\",\"threads\":1,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"4.4.8.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"silver-helix\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"zer0\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":18000000,\"moneyMax\":90000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|0\"],\"dataMap\":{\"n00dles\":[17358.446176358273,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":17358.446176358273,\"onlineRunningTime\":566.4099999999919,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|0\\\"]\",\"title\":\"cell.js silver-helix|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|1\"],\"dataMap\":{\"n00dles\":[17281.9157837587,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":17281.9157837587,\"onlineRunningTime\":566.4099999999919,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|1\\\"]\",\"title\":\"cell.js silver-helix|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|2\"],\"dataMap\":{\"n00dles\":[17190.45742641244,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":17190.45742641244,\"onlineRunningTime\":566.4099999999919,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|2\\\"]\",\"title\":\"cell.js silver-helix|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|3\"],\"dataMap\":{\"n00dles\":[17099.48490754228,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":17099.48490754228,\"onlineRunningTime\":566.4099999999919,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|3\\\"]\",\"title\":\"cell.js silver-helix|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|4\"],\"dataMap\":{\"n00dles\":[17008.995636675652,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":17008.995636675652,\"onlineRunningTime\":566.2099999999919,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|4\\\"]\",\"title\":\"cell.js silver-helix|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|5\"],\"dataMap\":{\"n00dles\":[16918.987037203304,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":16918.987037203304,\"onlineRunningTime\":566.2099999999919,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|5\\\"]\",\"title\":\"cell.js silver-helix|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|6\"],\"dataMap\":{\"n00dles\":[16829.456546304824,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":16829.456546304824,\"onlineRunningTime\":566.2099999999919,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|6\\\"]\",\"title\":\"cell.js silver-helix|6\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|7\"],\"dataMap\":{\"n00dles\":[16764.873432265616,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":16764.873432265616,\"onlineRunningTime\":566.2099999999919,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|7\\\"]\",\"title\":\"cell.js silver-helix|7\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|8\"],\"dataMap\":{\"n00dles\":[16676.154182305036,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":16676.154182305036,\"onlineRunningTime\":566.2099999999919,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|8\\\"]\",\"title\":\"cell.js silver-helix|8\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|9\"],\"dataMap\":{\"n00dles\":[16587.9062053834,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":16587.9062053834,\"onlineRunningTime\":566.2099999999919,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|9\\\"]\",\"title\":\"cell.js silver-helix|9\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|10\"],\"dataMap\":{\"n00dles\":[16500.126988769345,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":16500.126988769345,\"onlineRunningTime\":566.2099999999919,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|10\\\"]\",\"title\":\"cell.js silver-helix|10\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|11\"],\"dataMap\":{\"n00dles\":[16413.000117040585,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":16413.000117040585,\"onlineRunningTime\":566.2099999999919,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|11\\\"]\",\"title\":\"cell.js silver-helix|11\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|12\"],\"dataMap\":{\"n00dles\":[16326.148971814904,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":16326.148971814904,\"onlineRunningTime\":566.2099999999919,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|12\\\"]\",\"title\":\"cell.js silver-helix|12\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|13\"],\"dataMap\":{\"n00dles\":[16262.798271174726,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":16262.798271174726,\"onlineRunningTime\":566.2099999999919,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|13\\\"]\",\"title\":\"cell.js silver-helix|13\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|14\"],\"dataMap\":{\"n00dles\":[16176.766623069208,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":16176.766623069208,\"onlineRunningTime\":566.2099999999919,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|14\\\"]\",\"title\":\"cell.js silver-helix|14\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|15\"],\"dataMap\":{\"n00dles\":[16091.196266067505,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":16091.196266067505,\"onlineRunningTime\":566.2099999999919,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|15\\\"]\",\"title\":\"cell.js silver-helix|15\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|16\"],\"dataMap\":{\"n00dles\":[16006.054236379015,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":16006.054236379015,\"onlineRunningTime\":566.2099999999919,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|16\\\"]\",\"title\":\"cell.js silver-helix|16\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|17\"],\"dataMap\":{\"n00dles\":[15921.364413732486,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":15921.364413732486,\"onlineRunningTime\":566.2099999999919,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|17\\\"]\",\"title\":\"cell.js silver-helix|17\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|18\"],\"dataMap\":{\"n00dles\":[15837.24728787469,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":15837.24728787469,\"onlineRunningTime\":566.2099999999919,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|18\\\"]\",\"title\":\"cell.js silver-helix|18\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|19\"],\"dataMap\":{\"n00dles\":[15753.45336223208,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":15753.45336223208,\"onlineRunningTime\":566.2099999999919,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|19\\\"]\",\"title\":\"cell.js silver-helix|19\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|20\"],\"dataMap\":{\"n00dles\":[15670.104460365232,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":15670.104460365232,\"onlineRunningTime\":566.2099999999919,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|20\\\"]\",\"title\":\"cell.js silver-helix|20\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|21\"],\"dataMap\":{\"n00dles\":[15587.198209953993,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":15587.198209953993,\"onlineRunningTime\":566.2099999999919,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|21\\\"]\",\"title\":\"cell.js silver-helix|21\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|22\"],\"dataMap\":{\"n00dles\":[15504.732251371248,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":15504.732251371248,\"onlineRunningTime\":566.0099999999918,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|22\\\"]\",\"title\":\"cell.js silver-helix|22\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|23\"],\"dataMap\":{\"n00dles\":[15422.76661703783,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":15422.76661703783,\"onlineRunningTime\":566.0099999999918,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|23\\\"]\",\"title\":\"cell.js silver-helix|23\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|24\"],\"dataMap\":{\"n00dles\":[15370.378912756649,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":15370.378912756649,\"onlineRunningTime\":566.0099999999918,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|24\\\"]\",\"title\":\"cell.js silver-helix|24\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|25\"],\"dataMap\":{\"n00dles\":[15357.281022597435,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":15357.281022597435,\"onlineRunningTime\":566.0099999999918,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|25\\\"]\",\"title\":\"cell.js silver-helix|25\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|26\"],\"dataMap\":{\"n00dles\":[15276.038620827145,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":15276.038620827145,\"onlineRunningTime\":566.0099999999918,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|26\\\"]\",\"title\":\"cell.js silver-helix|26\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|27\"],\"dataMap\":{\"n00dles\":[15195.227628376468,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":15195.227628376468,\"onlineRunningTime\":566.0099999999918,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|27\\\"]\",\"title\":\"cell.js silver-helix|27\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|28\"],\"dataMap\":{\"n00dles\":[15154.214832302658,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":15154.214832302658,\"onlineRunningTime\":566.0099999999918,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|28\\\"]\",\"title\":\"cell.js silver-helix|28\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|29\"],\"dataMap\":{\"n00dles\":[15166.222392260499,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":15166.222392260499,\"onlineRunningTime\":566.0099999999918,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|29\\\"]\",\"title\":\"cell.js silver-helix|29\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|30\"],\"dataMap\":{\"n00dles\":[15085.998837524658,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":15085.998837524658,\"onlineRunningTime\":566.0099999999918,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|30\\\"]\",\"title\":\"cell.js silver-helix|30\",\"threads\":1,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"52.2.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"hong-fang-tea\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":1200000,\"moneyMax\":6000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea|0\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.809999999992,\"ramUsage\":2,\"server\":\"hong-fang-tea\",\"scriptKey\":\"cell.js*[\\\"hong-fang-tea|0\\\"]\",\"title\":\"cell.js hong-fang-tea|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea|1\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.809999999992,\"ramUsage\":2,\"server\":\"hong-fang-tea\",\"scriptKey\":\"cell.js*[\\\"hong-fang-tea|1\\\"]\",\"title\":\"cell.js hong-fang-tea|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea|2\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.809999999992,\"ramUsage\":2,\"server\":\"hong-fang-tea\",\"scriptKey\":\"cell.js*[\\\"hong-fang-tea|2\\\"]\",\"title\":\"cell.js hong-fang-tea|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea|3\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.809999999992,\"ramUsage\":2,\"server\":\"hong-fang-tea\",\"scriptKey\":\"cell.js*[\\\"hong-fang-tea|3\\\"]\",\"title\":\"cell.js hong-fang-tea|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea|4\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.809999999992,\"ramUsage\":2,\"server\":\"hong-fang-tea\",\"scriptKey\":\"cell.js*[\\\"hong-fang-tea|4\\\"]\",\"title\":\"cell.js hong-fang-tea|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea|5\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.809999999992,\"ramUsage\":2,\"server\":\"hong-fang-tea\",\"scriptKey\":\"cell.js*[\\\"hong-fang-tea|5\\\"]\",\"title\":\"cell.js hong-fang-tea|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea|6\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.809999999992,\"ramUsage\":2,\"server\":\"hong-fang-tea\",\"scriptKey\":\"cell.js*[\\\"hong-fang-tea|6\\\"]\",\"title\":\"cell.js hong-fang-tea|6\",\"threads\":1,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-10205.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"19437200121\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-626042.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[10,[[0,1],[6,8],[2,3],[5,7],[0,7],[6,9],[2,9],[4,6],[1,7],[0,6]]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"63.6.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"harakiri-sushi\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":1600000,\"moneyMax\":8000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi|0\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.009999999992,\"ramUsage\":2,\"server\":\"harakiri-sushi\",\"scriptKey\":\"cell.js*[\\\"harakiri-sushi|0\\\"]\",\"title\":\"cell.js harakiri-sushi|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi|1\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.009999999992,\"ramUsage\":2,\"server\":\"harakiri-sushi\",\"scriptKey\":\"cell.js*[\\\"harakiri-sushi|1\\\"]\",\"title\":\"cell.js harakiri-sushi|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi|2\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.009999999992,\"ramUsage\":2,\"server\":\"harakiri-sushi\",\"scriptKey\":\"cell.js*[\\\"harakiri-sushi|2\\\"]\",\"title\":\"cell.js harakiri-sushi|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi|3\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.009999999992,\"ramUsage\":2,\"server\":\"harakiri-sushi\",\"scriptKey\":\"cell.js*[\\\"harakiri-sushi|3\\\"]\",\"title\":\"cell.js harakiri-sushi|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi|4\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.009999999992,\"ramUsage\":2,\"server\":\"harakiri-sushi\",\"scriptKey\":\"cell.js*[\\\"harakiri-sushi|4\\\"]\",\"title\":\"cell.js harakiri-sushi|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi|5\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.009999999992,\"ramUsage\":2,\"server\":\"harakiri-sushi\",\"scriptKey\":\"cell.js*[\\\"harakiri-sushi|5\\\"]\",\"title\":\"cell.js harakiri-sushi|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi|6\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.009999999992,\"ramUsage\":2,\"server\":\"harakiri-sushi\",\"scriptKey\":\"cell.js*[\\\"harakiri-sushi|6\\\"]\",\"title\":\"cell.js harakiri-sushi|6\",\"threads\":1,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-290121.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[15,29,22],[47,1,4]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"87.6.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"phantasy\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"zer0\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":9600000,\"moneyMax\":48000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|0\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.6099999999919,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|0\\\"]\",\"title\":\"cell.js phantasy|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|1\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.4099999999919,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|1\\\"]\",\"title\":\"cell.js phantasy|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|2\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.4099999999919,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|2\\\"]\",\"title\":\"cell.js phantasy|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|3\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.4099999999919,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|3\\\"]\",\"title\":\"cell.js phantasy|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|4\"],\"dataMap\":{\"n00dles\":[18370.089278187876,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":18370.089278187876,\"onlineRunningTime\":566.4099999999919,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|4\\\"]\",\"title\":\"cell.js phantasy|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|5\"],\"dataMap\":{\"n00dles\":[18276.717349162638,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":18276.717349162638,\"onlineRunningTime\":566.4099999999919,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|5\\\"]\",\"title\":\"cell.js phantasy|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|6\"],\"dataMap\":{\"n00dles\":[18179.97282426589,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":18179.97282426589,\"onlineRunningTime\":566.4099999999919,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|6\\\"]\",\"title\":\"cell.js phantasy|6\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|7\"],\"dataMap\":{\"n00dles\":[18083.742332180373,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":18083.742332180373,\"onlineRunningTime\":566.4099999999919,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|7\\\"]\",\"title\":\"cell.js phantasy|7\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|8\"],\"dataMap\":{\"n00dles\":[17988.023131501497,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":17988.023131501497,\"onlineRunningTime\":566.4099999999919,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|8\\\"]\",\"title\":\"cell.js phantasy|8\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|9\"],\"dataMap\":{\"n00dles\":[17908.19224427951,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":17908.19224427951,\"onlineRunningTime\":566.4099999999919,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|9\\\"]\",\"title\":\"cell.js phantasy|9\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|10\"],\"dataMap\":{\"n00dles\":[17813.406212803486,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":17813.406212803486,\"onlineRunningTime\":566.4099999999919,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|10\\\"]\",\"title\":\"cell.js phantasy|10\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|11\"],\"dataMap\":{\"n00dles\":[17719.123767100595,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":17719.123767100595,\"onlineRunningTime\":566.4099999999919,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|11\\\"]\",\"title\":\"cell.js phantasy|11\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|12\"],\"dataMap\":{\"n00dles\":[17636.997213140883,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":17636.997213140883,\"onlineRunningTime\":566.4099999999919,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|12\\\"]\",\"title\":\"cell.js phantasy|12\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|13\"],\"dataMap\":{\"n00dles\":[17543.651844995555,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":17543.651844995555,\"onlineRunningTime\":566.4099999999919,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|13\\\"]\",\"title\":\"cell.js phantasy|13\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|14\"],\"dataMap\":{\"n00dles\":[17450.80238085506,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":17450.80238085506,\"onlineRunningTime\":566.4099999999919,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|14\\\"]\",\"title\":\"cell.js phantasy|14\",\"threads\":1,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-702234.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[133,181,24,63,7,78,63,139,192,35,154,101,4,163,138,175],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-680698.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"YVvenatr2Gaa5r2Gl5r2Gl5r2fQ8cmMifQVqifQVqifQVq0sSVdVdVdVdV\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-716599.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"2278537\",77],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-303949.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":54895990268789,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"73.8.4.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"max-hardware\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"harakiri-sushi\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|0\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.009999999992,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|0\\\"]\",\"title\":\"cell.js max-hardware|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|1\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.009999999992,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|1\\\"]\",\"title\":\"cell.js max-hardware|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|2\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.009999999992,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|2\\\"]\",\"title\":\"cell.js max-hardware|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|3\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.009999999992,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|3\\\"]\",\"title\":\"cell.js max-hardware|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|4\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.009999999992,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|4\\\"]\",\"title\":\"cell.js max-hardware|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|5\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.009999999992,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|5\\\"]\",\"title\":\"cell.js max-hardware|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|6\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.009999999992,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|6\\\"]\",\"title\":\"cell.js max-hardware|6\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|7\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.009999999992,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|7\\\"]\",\"title\":\"cell.js max-hardware|7\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|8\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.009999999992,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|8\\\"]\",\"title\":\"cell.js max-hardware|8\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|9\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.009999999992,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|9\\\"]\",\"title\":\"cell.js max-hardware|9\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|10\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.809999999992,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|10\\\"]\",\"title\":\"cell.js max-hardware|10\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|11\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.809999999992,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|11\\\"]\",\"title\":\"cell.js max-hardware|11\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|12\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.809999999992,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|12\\\"]\",\"title\":\"cell.js max-hardware|12\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|13\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.809999999992,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|13\\\"]\",\"title\":\"cell.js max-hardware|13\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|14\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":566.809999999992,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|14\\\"]\",\"title\":\"cell.js max-hardware|14\",\"threads\":1,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"85.6.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"max-hardware\",\"computek\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":34,\"hackDifficulty\":34,\"minDifficulty\":11,\"moneyAvailable\":25614531.6,\"moneyMax\":128072658,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":219,\"serverGrowth\":39,\"runningScripts\":[]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-987452-Netburners.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[143,119,38,193,152,57,127,61,59,129,62,140,177,190,199,195,117,44,59,189,163,52,149,143,200,29,38,150],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"67.1.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":38,\"minDifficulty\":13,\"moneyAvailable\":21425280,\"moneyMax\":107126400,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":271,\"serverGrowth\":33,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-641445.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1581558417\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-619525.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[4,3],[9,9,9],[1,7,8,2],[4,2,8,4,3],[6,7,2,6,8,4],[4,9,8,8,6,2,6],[6,3,9,4,1,5,3,9],[8,3,5,8,7,2,5,9,3],[6,7,7,2,2,3,3,2,7,4],[5,8,8,9,5,8,8,9,6,1,1]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"42.4.7.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"iron-gym\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":8000000,\"moneyMax\":40000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|0\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.2099999999921,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|0\\\"]\",\"title\":\"cell.js iron-gym|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|1\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.2099999999921,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|1\\\"]\",\"title\":\"cell.js iron-gym|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|2\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.2099999999921,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|2\\\"]\",\"title\":\"cell.js iron-gym|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|3\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.2099999999921,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|3\\\"]\",\"title\":\"cell.js iron-gym|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|4\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.2099999999921,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|4\\\"]\",\"title\":\"cell.js iron-gym|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|5\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.2099999999921,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|5\\\"]\",\"title\":\"cell.js iron-gym|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|6\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.2099999999921,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|6\\\"]\",\"title\":\"cell.js iron-gym|6\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|7\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.2099999999921,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|7\\\"]\",\"title\":\"cell.js iron-gym|7\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|8\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.2099999999921,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|8\\\"]\",\"title\":\"cell.js iron-gym|8\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|9\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.2099999999921,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|9\\\"]\",\"title\":\"cell.js iron-gym|9\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|10\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.2099999999921,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|10\\\"]\",\"title\":\"cell.js iron-gym|10\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|11\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.2099999999921,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|11\\\"]\",\"title\":\"cell.js iron-gym|11\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|12\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.2099999999921,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|12\\\"]\",\"title\":\"cell.js iron-gym|12\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|13\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.2099999999921,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|13\\\"]\",\"title\":\"cell.js iron-gym|13\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|14\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.009999999992,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|14\\\"]\",\"title\":\"cell.js iron-gym|14\",\"threads\":1,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-935370-Netburners.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,11],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-869364.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"ryioA4d48ByF48ByF48BH2aBH2e2LfqtWWPRs3zwzwzwzwzwz7Uczwz\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-802992.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"76867320228\",82],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-306531.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,1,0,1,0,0,1,0],[0,0,1,0,1,0,0,0,1],[1,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,1,0,0],[0,0,0,1,0,1,0,1,0],[0,0,1,0,0,0,0,0,0],[0,1,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"58.7.4.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":100000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":480,\"serverGrowth\":35,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"78.1.6.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":360000000,\"moneyMax\":1800000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":973,\"serverGrowth\":57,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"65.4.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":180000000,\"moneyMax\":900000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":786,\"serverGrowth\":51,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"56.3.3.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":535,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-869411.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"AdxKRRAAo00u44DDDDDDDDTPPPZSSKKKxUUo2MMQQaaVVVVMMMMMMYSSSSSSShhhhh888\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-342917.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"10000000100000001100001011110001\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-389647.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[12,6],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"56.9.5.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":358,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"45.0.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":212,\"serverGrowth\":1,\"runningScripts\":[]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"49.8.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":547,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"25.0.8.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"CSEC\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":57,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC|0\"],\"dataMap\":{\"n00dles\":[14736.462959509017,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":14736.462959509017,\"onlineRunningTime\":566.0099999999918,\"ramUsage\":2,\"server\":\"CSEC\",\"scriptKey\":\"cell.js*[\\\"CSEC|0\\\"]\",\"title\":\"cell.js CSEC|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC|1\"],\"dataMap\":{\"n00dles\":[14666.211523950149,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":14666.211523950149,\"onlineRunningTime\":566.0099999999918,\"ramUsage\":2,\"server\":\"CSEC\",\"scriptKey\":\"cell.js*[\\\"CSEC|1\\\"]\",\"title\":\"cell.js CSEC|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC|2\"],\"dataMap\":{\"n00dles\":[14592.59697321455,33,12,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.07999999999993,\"onlineMoneyMade\":14592.59697321455,\"onlineRunningTime\":565.8099999999918,\"ramUsage\":2,\"server\":\"CSEC\",\"scriptKey\":\"cell.js*[\\\"CSEC|2\\\"]\",\"title\":\"cell.js CSEC|2\",\"threads\":1,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-38415.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[11,[[1,5],[5,7],[3,10],[2,9],[5,8],[0,5],[7,9],[4,6],[5,6],[4,8],[2,9],[2,10],[3,5],[8,10],[2,4],[1,9],[3,4]]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-433086-Netburners.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"66175170249\",\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"45.3.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"99.2.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":15000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"19.4.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"vps-arbok\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-arbok\",\"httpPortOpen\":false,\"ip\":\"47.7.5.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-arbok\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"vps-arbok\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-arbok|0\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.2099999999921,\"ramUsage\":2,\"server\":\"vps-arbok\",\"scriptKey\":\"cell.js*[\\\"vps-arbok|0\\\"]\",\"title\":\"cell.js vps-arbok|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-arbok|1\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.2099999999921,\"ramUsage\":2,\"server\":\"vps-arbok\",\"scriptKey\":\"cell.js*[\\\"vps-arbok|1\\\"]\",\"title\":\"cell.js vps-arbok|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-arbok|2\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.2099999999921,\"ramUsage\":2,\"server\":\"vps-arbok\",\"scriptKey\":\"cell.js*[\\\"vps-arbok|2\\\"]\",\"title\":\"cell.js vps-arbok|2\",\"threads\":1,\"temporary\":false}}]}},\"vps-bonsly\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-bonsly\",\"httpPortOpen\":false,\"ip\":\"73.0.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-bonsly\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"vps-bonsly\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-bonsly|0\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.4099999999921,\"ramUsage\":2,\"server\":\"vps-bonsly\",\"scriptKey\":\"cell.js*[\\\"vps-bonsly|0\\\"]\",\"title\":\"cell.js vps-bonsly|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-bonsly|1\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.4099999999921,\"ramUsage\":2,\"server\":\"vps-bonsly\",\"scriptKey\":\"cell.js*[\\\"vps-bonsly|1\\\"]\",\"title\":\"cell.js vps-bonsly|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-bonsly|2\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.4099999999921,\"ramUsage\":2,\"server\":\"vps-bonsly\",\"scriptKey\":\"cell.js*[\\\"vps-bonsly|2\\\"]\",\"title\":\"cell.js vps-bonsly|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-bonsly|3\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.4099999999921,\"ramUsage\":2,\"server\":\"vps-bonsly\",\"scriptKey\":\"cell.js*[\\\"vps-bonsly|3\\\"]\",\"title\":\"cell.js vps-bonsly|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-bonsly|4\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.4099999999921,\"ramUsage\":2,\"server\":\"vps-bonsly\",\"scriptKey\":\"cell.js*[\\\"vps-bonsly|4\\\"]\",\"title\":\"cell.js vps-bonsly|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-bonsly|5\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.4099999999921,\"ramUsage\":2,\"server\":\"vps-bonsly\",\"scriptKey\":\"cell.js*[\\\"vps-bonsly|5\\\"]\",\"title\":\"cell.js vps-bonsly|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-bonsly|6\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.2099999999921,\"ramUsage\":2,\"server\":\"vps-bonsly\",\"scriptKey\":\"cell.js*[\\\"vps-bonsly|6\\\"]\",\"title\":\"cell.js vps-bonsly|6\",\"threads\":1,\"temporary\":false}}]}},\"vps-buneary\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-buneary\",\"httpPortOpen\":false,\"ip\":\"97.3.5.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-buneary\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"vps-buneary\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-buneary|0\"],\"dataMap\":{\"n00dles\":[0,0,12,8]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":84.48000000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.4099999999921,\"ramUsage\":2,\"server\":\"vps-buneary\",\"scriptKey\":\"cell.js*[\\\"vps-buneary|0\\\"]\",\"title\":\"cell.js vps-buneary|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-buneary|1\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.4099999999921,\"ramUsage\":2,\"server\":\"vps-buneary\",\"scriptKey\":\"cell.js*[\\\"vps-buneary|1\\\"]\",\"title\":\"cell.js vps-buneary|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-buneary|2\"],\"dataMap\":{\"n00dles\":[0,0,22,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":92.92800000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.4099999999921,\"ramUsage\":2,\"server\":\"vps-buneary\",\"scriptKey\":\"cell.js*[\\\"vps-buneary|2\\\"]\",\"title\":\"cell.js vps-buneary|2\",\"threads\":1,\"temporary\":false}}]}},\"vps-clefairy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-clefairy\",\"httpPortOpen\":false,\"ip\":\"52.4.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-clefairy\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"vps-clefairy\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-clefairy|0\"],\"dataMap\":{\"n00dles\":[0,0,12,8]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":84.48000000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.4099999999921,\"ramUsage\":2,\"server\":\"vps-clefairy\",\"scriptKey\":\"cell.js*[\\\"vps-clefairy|0\\\"]\",\"title\":\"cell.js vps-clefairy|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-clefairy|1\"],\"dataMap\":{\"n00dles\":[0,0,12,8]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":84.48000000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.4099999999921,\"ramUsage\":2,\"server\":\"vps-clefairy\",\"scriptKey\":\"cell.js*[\\\"vps-clefairy|1\\\"]\",\"title\":\"cell.js vps-clefairy|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-clefairy|2\"],\"dataMap\":{\"n00dles\":[0,0,12,8]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":84.48000000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.4099999999921,\"ramUsage\":2,\"server\":\"vps-clefairy\",\"scriptKey\":\"cell.js*[\\\"vps-clefairy|2\\\"]\",\"title\":\"cell.js vps-clefairy|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-clefairy|3\"],\"dataMap\":{\"n00dles\":[0,0,12,8]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":84.48000000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.4099999999921,\"ramUsage\":2,\"server\":\"vps-clefairy\",\"scriptKey\":\"cell.js*[\\\"vps-clefairy|3\\\"]\",\"title\":\"cell.js vps-clefairy|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-clefairy|4\"],\"dataMap\":{\"n00dles\":[0,0,12,8]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":84.48000000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.4099999999921,\"ramUsage\":2,\"server\":\"vps-clefairy\",\"scriptKey\":\"cell.js*[\\\"vps-clefairy|4\\\"]\",\"title\":\"cell.js vps-clefairy|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-clefairy|5\"],\"dataMap\":{\"n00dles\":[0,0,12,8]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":84.48000000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.4099999999921,\"ramUsage\":2,\"server\":\"vps-clefairy\",\"scriptKey\":\"cell.js*[\\\"vps-clefairy|5\\\"]\",\"title\":\"cell.js vps-clefairy|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-clefairy|6\"],\"dataMap\":{\"n00dles\":[0,0,12,8]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":84.48000000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.4099999999921,\"ramUsage\":2,\"server\":\"vps-clefairy\",\"scriptKey\":\"cell.js*[\\\"vps-clefairy|6\\\"]\",\"title\":\"cell.js vps-clefairy|6\",\"threads\":1,\"temporary\":false}}]}},\"vps-cubone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-cubone\",\"httpPortOpen\":false,\"ip\":\"80.7.9.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-cubone\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"vps-cubone\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-cubone|0\"],\"dataMap\":{\"n00dles\":[0,0,12,8]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":84.48000000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.6099999999922,\"ramUsage\":2,\"server\":\"vps-cubone\",\"scriptKey\":\"cell.js*[\\\"vps-cubone|0\\\"]\",\"title\":\"cell.js vps-cubone|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-cubone|1\"],\"dataMap\":{\"n00dles\":[0,0,12,8]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":84.48000000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.6099999999922,\"ramUsage\":2,\"server\":\"vps-cubone\",\"scriptKey\":\"cell.js*[\\\"vps-cubone|1\\\"]\",\"title\":\"cell.js vps-cubone|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-cubone|2\"],\"dataMap\":{\"n00dles\":[0,0,12,8]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":84.48000000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.4099999999921,\"ramUsage\":2,\"server\":\"vps-cubone\",\"scriptKey\":\"cell.js*[\\\"vps-cubone|2\\\"]\",\"title\":\"cell.js vps-cubone|2\",\"threads\":1,\"temporary\":false}}]}},\"vps-diglet\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-diglet\",\"httpPortOpen\":false,\"ip\":\"54.0.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-diglet\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"vps-diglet\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-diglet|0\"],\"dataMap\":{\"n00dles\":[0,0,12,8]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":84.48000000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.6099999999922,\"ramUsage\":2,\"server\":\"vps-diglet\",\"scriptKey\":\"cell.js*[\\\"vps-diglet|0\\\"]\",\"title\":\"cell.js vps-diglet|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-diglet|1\"],\"dataMap\":{\"n00dles\":[0,0,12,8]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":84.48000000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.6099999999922,\"ramUsage\":2,\"server\":\"vps-diglet\",\"scriptKey\":\"cell.js*[\\\"vps-diglet|1\\\"]\",\"title\":\"cell.js vps-diglet|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-diglet|2\"],\"dataMap\":{\"n00dles\":[0,0,12,8]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":84.48000000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.6099999999922,\"ramUsage\":2,\"server\":\"vps-diglet\",\"scriptKey\":\"cell.js*[\\\"vps-diglet|2\\\"]\",\"title\":\"cell.js vps-diglet|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-diglet|3\"],\"dataMap\":{\"n00dles\":[0,0,12,8]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":84.48000000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.6099999999922,\"ramUsage\":2,\"server\":\"vps-diglet\",\"scriptKey\":\"cell.js*[\\\"vps-diglet|3\\\"]\",\"title\":\"cell.js vps-diglet|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-diglet|4\"],\"dataMap\":{\"n00dles\":[0,0,12,8]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":84.48000000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.6099999999922,\"ramUsage\":2,\"server\":\"vps-diglet\",\"scriptKey\":\"cell.js*[\\\"vps-diglet|4\\\"]\",\"title\":\"cell.js vps-diglet|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-diglet|5\"],\"dataMap\":{\"n00dles\":[0,0,12,8]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":84.48000000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.6099999999922,\"ramUsage\":2,\"server\":\"vps-diglet\",\"scriptKey\":\"cell.js*[\\\"vps-diglet|5\\\"]\",\"title\":\"cell.js vps-diglet|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-diglet|6\"],\"dataMap\":{\"n00dles\":[0,0,12,8]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":84.48000000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.6099999999922,\"ramUsage\":2,\"server\":\"vps-diglet\",\"scriptKey\":\"cell.js*[\\\"vps-diglet|6\\\"]\",\"title\":\"cell.js vps-diglet|6\",\"threads\":1,\"temporary\":false}}]}},\"vps-dragonite\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-dragonite\",\"httpPortOpen\":false,\"ip\":\"3.7.0.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-dragonite\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"vps-dragonite\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-dragonite|0\"],\"dataMap\":{\"n00dles\":[0,0,12,8]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":84.48000000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.6099999999922,\"ramUsage\":2,\"server\":\"vps-dragonite\",\"scriptKey\":\"cell.js*[\\\"vps-dragonite|0\\\"]\",\"title\":\"cell.js vps-dragonite|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-dragonite|1\"],\"dataMap\":{\"n00dles\":[0,0,12,8]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":84.48000000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.6099999999922,\"ramUsage\":2,\"server\":\"vps-dragonite\",\"scriptKey\":\"cell.js*[\\\"vps-dragonite|1\\\"]\",\"title\":\"cell.js vps-dragonite|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-dragonite|2\"],\"dataMap\":{\"n00dles\":[0,0,12,8]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":84.48000000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.6099999999922,\"ramUsage\":2,\"server\":\"vps-dragonite\",\"scriptKey\":\"cell.js*[\\\"vps-dragonite|2\\\"]\",\"title\":\"cell.js vps-dragonite|2\",\"threads\":1,\"temporary\":false}}]}},\"vps-ekans\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-ekans\",\"httpPortOpen\":false,\"ip\":\"43.9.4.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-ekans\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"vps-ekans\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-ekans|0\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.6099999999922,\"ramUsage\":2,\"server\":\"vps-ekans\",\"scriptKey\":\"cell.js*[\\\"vps-ekans|0\\\"]\",\"title\":\"cell.js vps-ekans|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-ekans|1\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.6099999999922,\"ramUsage\":2,\"server\":\"vps-ekans\",\"scriptKey\":\"cell.js*[\\\"vps-ekans|1\\\"]\",\"title\":\"cell.js vps-ekans|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-ekans|2\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.6099999999922,\"ramUsage\":2,\"server\":\"vps-ekans\",\"scriptKey\":\"cell.js*[\\\"vps-ekans|2\\\"]\",\"title\":\"cell.js vps-ekans|2\",\"threads\":1,\"temporary\":false}}]}},\"vps-latios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-latios\",\"httpPortOpen\":false,\"ip\":\"58.2.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-latios\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"vps-latios\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-latios|0\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.8099999999922,\"ramUsage\":2,\"server\":\"vps-latios\",\"scriptKey\":\"cell.js*[\\\"vps-latios|0\\\"]\",\"title\":\"cell.js vps-latios|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-latios|1\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.8099999999922,\"ramUsage\":2,\"server\":\"vps-latios\",\"scriptKey\":\"cell.js*[\\\"vps-latios|1\\\"]\",\"title\":\"cell.js vps-latios|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-latios|2\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.8099999999922,\"ramUsage\":2,\"server\":\"vps-latios\",\"scriptKey\":\"cell.js*[\\\"vps-latios|2\\\"]\",\"title\":\"cell.js vps-latios|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-latios|3\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.8099999999922,\"ramUsage\":2,\"server\":\"vps-latios\",\"scriptKey\":\"cell.js*[\\\"vps-latios|3\\\"]\",\"title\":\"cell.js vps-latios|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-latios|4\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.8099999999922,\"ramUsage\":2,\"server\":\"vps-latios\",\"scriptKey\":\"cell.js*[\\\"vps-latios|4\\\"]\",\"title\":\"cell.js vps-latios|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-latios|5\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.6099999999922,\"ramUsage\":2,\"server\":\"vps-latios\",\"scriptKey\":\"cell.js*[\\\"vps-latios|5\\\"]\",\"title\":\"cell.js vps-latios|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-latios|6\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.6099999999922,\"ramUsage\":2,\"server\":\"vps-latios\",\"scriptKey\":\"cell.js*[\\\"vps-latios|6\\\"]\",\"title\":\"cell.js vps-latios|6\",\"threads\":1,\"temporary\":false}}]}},\"vps-nuzleaf\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-nuzleaf\",\"httpPortOpen\":false,\"ip\":\"78.3.1.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-nuzleaf\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"vps-nuzleaf\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-nuzleaf|0\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.8099999999922,\"ramUsage\":2,\"server\":\"vps-nuzleaf\",\"scriptKey\":\"cell.js*[\\\"vps-nuzleaf|0\\\"]\",\"title\":\"cell.js vps-nuzleaf|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-nuzleaf|1\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.8099999999922,\"ramUsage\":2,\"server\":\"vps-nuzleaf\",\"scriptKey\":\"cell.js*[\\\"vps-nuzleaf|1\\\"]\",\"title\":\"cell.js vps-nuzleaf|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-nuzleaf|2\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.8099999999922,\"ramUsage\":2,\"server\":\"vps-nuzleaf\",\"scriptKey\":\"cell.js*[\\\"vps-nuzleaf|2\\\"]\",\"title\":\"cell.js vps-nuzleaf|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-nuzleaf|3\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.8099999999922,\"ramUsage\":2,\"server\":\"vps-nuzleaf\",\"scriptKey\":\"cell.js*[\\\"vps-nuzleaf|3\\\"]\",\"title\":\"cell.js vps-nuzleaf|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-nuzleaf|4\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.8099999999922,\"ramUsage\":2,\"server\":\"vps-nuzleaf\",\"scriptKey\":\"cell.js*[\\\"vps-nuzleaf|4\\\"]\",\"title\":\"cell.js vps-nuzleaf|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-nuzleaf|5\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.8099999999922,\"ramUsage\":2,\"server\":\"vps-nuzleaf\",\"scriptKey\":\"cell.js*[\\\"vps-nuzleaf|5\\\"]\",\"title\":\"cell.js vps-nuzleaf|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-nuzleaf|6\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.8099999999922,\"ramUsage\":2,\"server\":\"vps-nuzleaf\",\"scriptKey\":\"cell.js*[\\\"vps-nuzleaf|6\\\"]\",\"title\":\"cell.js vps-nuzleaf|6\",\"threads\":1,\"temporary\":false}}]}},\"vps-scorbunny\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-scorbunny\",\"httpPortOpen\":false,\"ip\":\"81.7.1.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-scorbunny\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"vps-scorbunny\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-scorbunny|0\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.8099999999922,\"ramUsage\":2,\"server\":\"vps-scorbunny\",\"scriptKey\":\"cell.js*[\\\"vps-scorbunny|0\\\"]\",\"title\":\"cell.js vps-scorbunny|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-scorbunny|1\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.8099999999922,\"ramUsage\":2,\"server\":\"vps-scorbunny\",\"scriptKey\":\"cell.js*[\\\"vps-scorbunny|1\\\"]\",\"title\":\"cell.js vps-scorbunny|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-scorbunny|2\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.8099999999922,\"ramUsage\":2,\"server\":\"vps-scorbunny\",\"scriptKey\":\"cell.js*[\\\"vps-scorbunny|2\\\"]\",\"title\":\"cell.js vps-scorbunny|2\",\"threads\":1,\"temporary\":false}}]}},\"vps-zigzagoon\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-zigzagoon\",\"httpPortOpen\":false,\"ip\":\"23.6.1.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-zigzagoon\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"vps-zigzagoon\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-zigzagoon|0\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.0099999999923,\"ramUsage\":2,\"server\":\"vps-zigzagoon\",\"scriptKey\":\"cell.js*[\\\"vps-zigzagoon|0\\\"]\",\"title\":\"cell.js vps-zigzagoon|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-zigzagoon|1\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.8099999999922,\"ramUsage\":2,\"server\":\"vps-zigzagoon\",\"scriptKey\":\"cell.js*[\\\"vps-zigzagoon|1\\\"]\",\"title\":\"cell.js vps-zigzagoon|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-zigzagoon|2\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":567.8099999999922,\"ramUsage\":2,\"server\":\"vps-zigzagoon\",\"scriptKey\":\"cell.js*[\\\"vps-zigzagoon|2\\\"]\",\"title\":\"cell.js vps-zigzagoon|2\",\"threads\":1,\"temporary\":false}}]}},\"vps-arcanine\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-arcanine\",\"httpPortOpen\":false,\"ip\":\"32.7.0.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-arcanine\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"vps-arcanine\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-arcanine|0\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.0099999999923,\"ramUsage\":2,\"server\":\"vps-arcanine\",\"scriptKey\":\"cell.js*[\\\"vps-arcanine|0\\\"]\",\"title\":\"cell.js vps-arcanine|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-arcanine|1\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.0099999999923,\"ramUsage\":2,\"server\":\"vps-arcanine\",\"scriptKey\":\"cell.js*[\\\"vps-arcanine|1\\\"]\",\"title\":\"cell.js vps-arcanine|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-arcanine|2\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.0099999999923,\"ramUsage\":2,\"server\":\"vps-arcanine\",\"scriptKey\":\"cell.js*[\\\"vps-arcanine|2\\\"]\",\"title\":\"cell.js vps-arcanine|2\",\"threads\":1,\"temporary\":false}}]}},\"vps-charmander\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-charmander\",\"httpPortOpen\":false,\"ip\":\"81.1.5.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-charmander\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"vps-charmander\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-charmander|0\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.0099999999923,\"ramUsage\":2,\"server\":\"vps-charmander\",\"scriptKey\":\"cell.js*[\\\"vps-charmander|0\\\"]\",\"title\":\"cell.js vps-charmander|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-charmander|1\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.0099999999923,\"ramUsage\":2,\"server\":\"vps-charmander\",\"scriptKey\":\"cell.js*[\\\"vps-charmander|1\\\"]\",\"title\":\"cell.js vps-charmander|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-charmander|2\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.0099999999923,\"ramUsage\":2,\"server\":\"vps-charmander\",\"scriptKey\":\"cell.js*[\\\"vps-charmander|2\\\"]\",\"title\":\"cell.js vps-charmander|2\",\"threads\":1,\"temporary\":false}}]}},\"vps-dartrix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-dartrix\",\"httpPortOpen\":false,\"ip\":\"3.8.9.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-dartrix\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"vps-dartrix\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-dartrix|0\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.0099999999923,\"ramUsage\":2,\"server\":\"vps-dartrix\",\"scriptKey\":\"cell.js*[\\\"vps-dartrix|0\\\"]\",\"title\":\"cell.js vps-dartrix|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-dartrix|1\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.0099999999923,\"ramUsage\":2,\"server\":\"vps-dartrix\",\"scriptKey\":\"cell.js*[\\\"vps-dartrix|1\\\"]\",\"title\":\"cell.js vps-dartrix|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-dartrix|2\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.0099999999923,\"ramUsage\":2,\"server\":\"vps-dartrix\",\"scriptKey\":\"cell.js*[\\\"vps-dartrix|2\\\"]\",\"title\":\"cell.js vps-dartrix|2\",\"threads\":1,\"temporary\":false}}]}},\"vps-eevee\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-eevee\",\"httpPortOpen\":false,\"ip\":\"76.1.1.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-eevee\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"vps-eevee\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-eevee|0\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.0099999999923,\"ramUsage\":2,\"server\":\"vps-eevee\",\"scriptKey\":\"cell.js*[\\\"vps-eevee|0\\\"]\",\"title\":\"cell.js vps-eevee|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-eevee|1\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.0099999999923,\"ramUsage\":2,\"server\":\"vps-eevee\",\"scriptKey\":\"cell.js*[\\\"vps-eevee|1\\\"]\",\"title\":\"cell.js vps-eevee|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-eevee|2\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.0099999999923,\"ramUsage\":2,\"server\":\"vps-eevee\",\"scriptKey\":\"cell.js*[\\\"vps-eevee|2\\\"]\",\"title\":\"cell.js vps-eevee|2\",\"threads\":1,\"temporary\":false}}]}},\"vps-gengar\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-gengar\",\"httpPortOpen\":false,\"ip\":\"25.1.2.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-gengar\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"vps-gengar\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-gengar|0\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.0099999999923,\"ramUsage\":2,\"server\":\"vps-gengar\",\"scriptKey\":\"cell.js*[\\\"vps-gengar|0\\\"]\",\"title\":\"cell.js vps-gengar|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-gengar|1\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.0099999999923,\"ramUsage\":2,\"server\":\"vps-gengar\",\"scriptKey\":\"cell.js*[\\\"vps-gengar|1\\\"]\",\"title\":\"cell.js vps-gengar|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-gengar|2\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.0099999999923,\"ramUsage\":2,\"server\":\"vps-gengar\",\"scriptKey\":\"cell.js*[\\\"vps-gengar|2\\\"]\",\"title\":\"cell.js vps-gengar|2\",\"threads\":1,\"temporary\":false}}]}},\"vps-marowak\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-marowak\",\"httpPortOpen\":false,\"ip\":\"73.0.3.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-marowak\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"vps-marowak\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-marowak|0\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.2099999999923,\"ramUsage\":2,\"server\":\"vps-marowak\",\"scriptKey\":\"cell.js*[\\\"vps-marowak|0\\\"]\",\"title\":\"cell.js vps-marowak|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-marowak|1\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.2099999999923,\"ramUsage\":2,\"server\":\"vps-marowak\",\"scriptKey\":\"cell.js*[\\\"vps-marowak|1\\\"]\",\"title\":\"cell.js vps-marowak|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-marowak|2\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.2099999999923,\"ramUsage\":2,\"server\":\"vps-marowak\",\"scriptKey\":\"cell.js*[\\\"vps-marowak|2\\\"]\",\"title\":\"cell.js vps-marowak|2\",\"threads\":1,\"temporary\":false}}]}},\"vps-meowth\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-meowth\",\"httpPortOpen\":false,\"ip\":\"1.8.0.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-meowth\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"vps-meowth\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-meowth|0\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.2099999999923,\"ramUsage\":2,\"server\":\"vps-meowth\",\"scriptKey\":\"cell.js*[\\\"vps-meowth|0\\\"]\",\"title\":\"cell.js vps-meowth|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-meowth|1\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.2099999999923,\"ramUsage\":2,\"server\":\"vps-meowth\",\"scriptKey\":\"cell.js*[\\\"vps-meowth|1\\\"]\",\"title\":\"cell.js vps-meowth|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-meowth|2\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.2099999999923,\"ramUsage\":2,\"server\":\"vps-meowth\",\"scriptKey\":\"cell.js*[\\\"vps-meowth|2\\\"]\",\"title\":\"cell.js vps-meowth|2\",\"threads\":1,\"temporary\":false}}]}},\"vps-pikachu\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-pikachu\",\"httpPortOpen\":false,\"ip\":\"42.8.0.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-pikachu\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"vps-pikachu\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-pikachu|0\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.2099999999923,\"ramUsage\":2,\"server\":\"vps-pikachu\",\"scriptKey\":\"cell.js*[\\\"vps-pikachu|0\\\"]\",\"title\":\"cell.js vps-pikachu|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-pikachu|1\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.2099999999923,\"ramUsage\":2,\"server\":\"vps-pikachu\",\"scriptKey\":\"cell.js*[\\\"vps-pikachu|1\\\"]\",\"title\":\"cell.js vps-pikachu|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-pikachu|2\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.2099999999923,\"ramUsage\":2,\"server\":\"vps-pikachu\",\"scriptKey\":\"cell.js*[\\\"vps-pikachu|2\\\"]\",\"title\":\"cell.js vps-pikachu|2\",\"threads\":1,\"temporary\":false}}]}},\"vps-poochyena\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-poochyena\",\"httpPortOpen\":false,\"ip\":\"5.4.2.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-poochyena\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"vps-poochyena\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-poochyena|0\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.2099999999923,\"ramUsage\":2,\"server\":\"vps-poochyena\",\"scriptKey\":\"cell.js*[\\\"vps-poochyena|0\\\"]\",\"title\":\"cell.js vps-poochyena|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-poochyena|1\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.2099999999923,\"ramUsage\":2,\"server\":\"vps-poochyena\",\"scriptKey\":\"cell.js*[\\\"vps-poochyena|1\\\"]\",\"title\":\"cell.js vps-poochyena|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-poochyena|2\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.2099999999923,\"ramUsage\":2,\"server\":\"vps-poochyena\",\"scriptKey\":\"cell.js*[\\\"vps-poochyena|2\\\"]\",\"title\":\"cell.js vps-poochyena|2\",\"threads\":1,\"temporary\":false}}]}},\"vps-rattata\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-rattata\",\"httpPortOpen\":false,\"ip\":\"70.7.0.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-rattata\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"vps-rattata\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-rattata|0\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.2099999999923,\"ramUsage\":2,\"server\":\"vps-rattata\",\"scriptKey\":\"cell.js*[\\\"vps-rattata|0\\\"]\",\"title\":\"cell.js vps-rattata|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-rattata|1\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.2099999999923,\"ramUsage\":2,\"server\":\"vps-rattata\",\"scriptKey\":\"cell.js*[\\\"vps-rattata|1\\\"]\",\"title\":\"cell.js vps-rattata|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-rattata|2\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.2099999999923,\"ramUsage\":2,\"server\":\"vps-rattata\",\"scriptKey\":\"cell.js*[\\\"vps-rattata|2\\\"]\",\"title\":\"cell.js vps-rattata|2\",\"threads\":1,\"temporary\":false}}]}},\"vps-treecko\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-treecko\",\"httpPortOpen\":false,\"ip\":\"56.6.6.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-treecko\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"vps-treecko\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-treecko|0\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.4099999999924,\"ramUsage\":2,\"server\":\"vps-treecko\",\"scriptKey\":\"cell.js*[\\\"vps-treecko|0\\\"]\",\"title\":\"cell.js vps-treecko|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-treecko|1\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.2099999999923,\"ramUsage\":2,\"server\":\"vps-treecko\",\"scriptKey\":\"cell.js*[\\\"vps-treecko|1\\\"]\",\"title\":\"cell.js vps-treecko|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-treecko|2\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.2099999999923,\"ramUsage\":2,\"server\":\"vps-treecko\",\"scriptKey\":\"cell.js*[\\\"vps-treecko|2\\\"]\",\"title\":\"cell.js vps-treecko|2\",\"threads\":1,\"temporary\":false}}]}},\"vps-vulpix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-vulpix\",\"httpPortOpen\":false,\"ip\":\"49.8.4.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-vulpix\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"vps-vulpix\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-vulpix|0\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.4099999999924,\"ramUsage\":2,\"server\":\"vps-vulpix\",\"scriptKey\":\"cell.js*[\\\"vps-vulpix|0\\\"]\",\"title\":\"cell.js vps-vulpix|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-vulpix|1\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.4099999999924,\"ramUsage\":2,\"server\":\"vps-vulpix\",\"scriptKey\":\"cell.js*[\\\"vps-vulpix|1\\\"]\",\"title\":\"cell.js vps-vulpix|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-vulpix|2\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.4099999999924,\"ramUsage\":2,\"server\":\"vps-vulpix\",\"scriptKey\":\"cell.js*[\\\"vps-vulpix|2\\\"]\",\"title\":\"cell.js vps-vulpix|2\",\"threads\":1,\"temporary\":false}}]}},\"vps-absol\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-absol\",\"httpPortOpen\":false,\"ip\":\"58.3.5.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-absol\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"vps-absol\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-absol|0\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.4099999999924,\"ramUsage\":2,\"server\":\"vps-absol\",\"scriptKey\":\"cell.js*[\\\"vps-absol|0\\\"]\",\"title\":\"cell.js vps-absol|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-absol|1\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.4099999999924,\"ramUsage\":2,\"server\":\"vps-absol\",\"scriptKey\":\"cell.js*[\\\"vps-absol|1\\\"]\",\"title\":\"cell.js vps-absol|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vps-absol|2\"],\"dataMap\":{\"n00dles\":[0,0,0,18]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76.03200000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":568.4099999999924,\"ramUsage\":2,\"server\":\"vps-absol\",\"scriptKey\":\"cell.js*[\\\"vps-absol|2\\\"]\",\"title\":\"cell.js vps-absol|2\",\"threads\":1,\"temporary\":false}}]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"favor\":2,\"discovery\":\"known\",\"playerReputation\":79105.00575377706}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":2,\"discovery\":\"known\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}}}","AliasesSave":"{\"analyse\":\"analyze\",\"traceroute\":\"./traceroute.js\",\"reach\":\"./reach.js\",\"biotic\":\"./biotic.js\",\"portfolio\":\"./portfolio.js --tail\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"36","AllGangsSave":"","LastExportBonus":"1702886768698","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}