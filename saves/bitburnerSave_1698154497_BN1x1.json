{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":11,\"max\":11},\"skills\":{\"hacking\":197,\"strength\":11,\"defense\":12,\"dexterity\":44,\"agility\":44,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":246439.79000000466,\"strength\":218,\"defense\":234,\"dexterity\":1534.799999999977,\"agility\":1534.799999999977,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"}],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"Sector-12\",\"Netburners\",\"CyberSec\"],\"factionInvitations\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":61,\"moneyGainRatePerSecond\":116.41355254314144,\"onlineTimeSeconds\":8415.599999995553,\"ram\":8,\"totalMoneyGenerated\":908852.380331914,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":61,\"moneyGainRatePerSecond\":116.41355254314144,\"onlineTimeSeconds\":8415.599999995553,\"ram\":8,\"totalMoneyGenerated\":906879.7135177801,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":60,\"moneyGainRatePerSecond\":114.50513364899157,\"onlineTimeSeconds\":8415.399999995552,\"ram\":8,\"totalMoneyGenerated\":893490.2157005899,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":60,\"moneyGainRatePerSecond\":114.50513364899157,\"onlineTimeSeconds\":8415.399999995552,\"ram\":8,\"totalMoneyGenerated\":892336.8639792862,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":60,\"moneyGainRatePerSecond\":114.50513364899157,\"onlineTimeSeconds\":8415.199999995551,\"ram\":8,\"totalMoneyGenerated\":892237.0448480359,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":60,\"moneyGainRatePerSecond\":114.50513364899157,\"onlineTimeSeconds\":8415.199999995551,\"ram\":8,\"totalMoneyGenerated\":884826.096324019,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":60,\"moneyGainRatePerSecond\":99.78460874999998,\"onlineTimeSeconds\":8414.99999999555,\"ram\":4,\"totalMoneyGenerated\":781647.5056193447,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":60,\"moneyGainRatePerSecond\":99.78460874999998,\"onlineTimeSeconds\":8414.99999999555,\"ram\":4,\"totalMoneyGenerated\":780995.9425299201,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":60,\"moneyGainRatePerSecond\":99.78460874999998,\"onlineTimeSeconds\":8414.79999999555,\"ram\":4,\"totalMoneyGenerated\":780397.6862874205,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":60,\"moneyGainRatePerSecond\":99.78460874999998,\"onlineTimeSeconds\":8414.59999999555,\"ram\":4,\"totalMoneyGenerated\":780304.2362874205,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":60,\"moneyGainRatePerSecond\":99.78460874999998,\"onlineTimeSeconds\":7814.399999995084,\"ram\":4,\"totalMoneyGenerated\":764740.423787432,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":60,\"moneyGainRatePerSecond\":99.78460874999998,\"onlineTimeSeconds\":7055.199999995774,\"ram\":4,\"totalMoneyGenerated\":698234.2843796444,\"name\":\"hacknet-node-11\"}}],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":-53.63999999999921,\"numPeopleKilled\":0,\"location\":\"Alpha Enterprises\",\"money\":1745651.1987216393,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-815424,\"codingcontract\":0,\"corporation\":0,\"crime\":12760000,\"gang\":0,\"hacking\":100728082.494618,\"hacknet\":9964942.393579673,\"hacknet_expenses\":-5783318.817499251,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":1744538.1987216384,\"work\":0,\"servers\":-104409743.87200001,\"other\":-5200000,\"augmentations\":-5500000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-815424,\"codingcontract\":0,\"corporation\":0,\"crime\":12760000,\"gang\":0,\"hacking\":100728082.494618,\"hacknet\":9964942.393579673,\"hacknet_expenses\":-5783318.817499251,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":1744538.1987216384,\"work\":0,\"servers\":-104409743.87200001,\"other\":-5200000,\"augmentations\":-5500000}},\"playtimeSinceLastAug\":10973200,\"playtimeSinceLastBitnode\":10973200,\"lastAugReset\":-1,\"lastNodeReset\":-1,\"purchasedServers\":[\"vps-bonsly\",\"vps-clefairy\",\"vps-poochyena\",\"vps-treecko\",\"vps-vulpix\",\"vps-zigzagoon\",\"vps-absol\",\"vps-arbok\",\"vps-arcanine\",\"vps-buneary\",\"vps-charmander\",\"vps-cubone\",\"vps-dartrix\",\"vps-diglet\",\"vps-dragonite\",\"vps-eevee\",\"vps-ekans\",\"vps-gengar\",\"vps-latios\",\"vps-marowak\",\"vps-meowth\",\"vps-nuzleaf\",\"vps-pikachu\",\"vps-rattata\",\"vps-scorbunny\"],\"scriptProdSinceLastAug\":100727261.494618,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1698143775838},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1698145455843},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1698146115849},{\"ID\":\"WORKOUT\",\"unlockedOn\":1698148695843},{\"ID\":\"TOR\",\"unlockedOn\":1698149535854},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1698151095842},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1698151335842},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1698151635846}],\"terminalCommandHistory\":[\"./reach.js scan 1\",\"./reach.js scan 2\",\"./reach.js scan 100\",\"./reach.js scan 1000\",\"./reach.js \",\"./reach.js install 100 n00dles\",\"./reach.js manage\",\"./reach.js manage 1\",\"./reach.js \",\"ps\",\"kill 84\",\"./reach.js \",\"connect iron-gym\",\"analyse\",\"home\",\"nano ./find-server.js \",\"ps\",\"./reach.js manage\",\"./reach.js manage 2\",\"cls\",\"buy\",\"buy -l\",\"ps\",\"kill 100\",\"buy relaySMTP.exe\",\"./reach.js \",\"./reach.js manage 2\",\"connect CSEC\",\"./find-server.js CSEC\",\"ps\",\"top\",\"kill 149\",\"./find-server.js CSEC\",\"./traceroute.js CSEC\",\"./traceroute.js \",\"./traceroute.js /?\",\"cat ./traceroute.js\",\"./traceroute.js --help\",\"./traceroute.js --connect\",\"./traceroute.js CSEC --connect\",\"home; connect foodnstuff; connect CSEC\",\"backdoor\",\"buy -l\",\"home\",\"ps\",\"./reach.js manage 2\",\"ls\",\"ps\",\"kill 227\",\"cls\"],\"lastUpdate\":1698154497037,\"lastSave\":1698154443838,\"totalPlaytime\":10973200,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":1048,\"factionWorkType\":\"hacking\",\"factionName\":\"Netburners\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"1780e40f4efd62\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"27.2.2.5\",\"isConnectedTo\":true,\"maxRam\":16,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"relaySMTP.exe\",\"FTPCrack.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"home\"}}],[\"crawler.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { forEach } from \\\"utils.js\\\";\\n\\nexport function Crawler(ns, options){\\n  \\n  var resultLimit = options.resultLimit;\\n  var rootHost = options.rootHost;\\n  \\n  // These host names have already been scanned.\\n  var completeHosts = [];\\n  \\n  // These host names are recently discovered and\\n  // may not have been scanned.\\n  var discoveredHosts = [];\\n  \\n  // Returns false when there is no more work to do.\\n  async function step(){\\n    \\n    // Run out\\n    if(discoveredHosts.length == 0){\\n      return false;\\n    }\\n    \\n    // Result limit reached\\n    if(discoveredHosts.length >= resultLimit){\\n      return false;\\n    }\\n    \\n    // Processing\\n    var hostname = discoveredHosts.pop();\\n    var alreadyScanned = completeHosts.indexOf(hostname) >= 0;\\n    if (!alreadyScanned){\\n      completeHosts.push(hostname);\\n      var siblings = await ns.scan(hostname);\\n      forEach(siblings, function(i, e){\\n        discoveredHosts.push(e);\\n      });\\n    }\\n    return true;\\n    \\n  }\\n  \\n  async function crawl(){\\n    discoveredHosts = [rootHost];\\n    while(await step()){\\n      await ns.sleep(10);\\n    }\\n    return completeHosts;\\n  }\\n  \\n  return {\\n    crawl\\n  };\\n  \\n}\\n\",\"filename\":\"crawler.js\",\"server\":\"home\"}}],[\"traceroute.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { forEach, pushAll } from \\\"./utils.js\\\";\\n\\nfunction HostCollection(hostnames){\\n  \\n  var items = [...hostnames];\\n  \\n  function addAll(newHostnames){\\n    pushAll(items, newHostnames);\\n  }\\n  \\n  function notContains(hostname){\\n    return items.indexOf(hostname) < 0;\\n  }\\n  \\n  return {\\n    addAll,\\n    notContains\\n  }\\n  \\n}\\n\\nfunction ServerRoute (ns, knownHosts, parentRoute, hostname){\\n  \\n  function getRoute(){\\n    return [hostname].concat([...parentRoute]);\\n  }\\n  \\n  async function findChildren(){\\n    var neighbours = await ns.scan(hostname);\\n    var newHosts = neighbours.filter(knownHosts.notContains);\\n    knownHosts.addAll(newHosts);\\n    var children = newHosts.map(function(childHostname){\\n        return new ServerRoute(ns, knownHosts, getRoute(), childHostname);\\n      });\\n    return children;\\n  }\\n  \\n  return {\\n    hostname,\\n    getRoute,\\n    findChildren\\n  }\\n  \\n}\\n\\nexport function TraceRoute (ns, options){\\n  \\n  var resultLimit = options.resultLimit;\\n  var rootHost = options.rootHost;\\n  \\n  async function crawl(){\\n    \\n    var knownHostCollection = new HostCollection([rootHost]);\\n    var rootRoute = new ServerRoute(ns, knownHostCollection, [], rootHost);\\n    var unscannedHosts = [rootRoute];\\n    var scannedHosts = [];\\n    \\n    while(unscannedHosts.length > 0){\\n      \\n      var nextHost = unscannedHosts.pop();\\n      \\n      var resultLimitReached =\\n        unscannedHosts.length > resultLimit ||\\n        scannedHosts.length > resultLimit;\\n      if(resultLimitReached){\\n        ns.print(\\\"Trace route result limit reached.\\\");\\n        break;\\n      }\\n      \\n      var children = await nextHost.findChildren();\\n      pushAll(unscannedHosts, children);\\n      scannedHosts.push(nextHost);\\n      \\n    }\\n    \\n    return scannedHosts;\\n    \\n  }\\n  \\n  return {\\n    crawl\\n  };\\n  \\n}\\n\\nfunction printRoute(ns, route, connectMode){\\n  var hostnames = route.getRoute().reverse();\\n  var joiner = connectMode ? \\\"; connect \\\" : \\\" -> \\\";\\n  ns.tprint(hostnames.join(joiner));\\n}\\n\\nexport async function main(ns){\\n  \\n  var traceRoute = new TraceRoute(ns, {\\n    resultLimit: 1000,\\n    rootHost: \\\"home\\\"\\n  });\\n  var allRoutes = await traceRoute.crawl();\\n  \\n  var connectMode;\\n  if(ns.args.length >= 2 && ns.args[1] == \\\"--connect\\\"){\\n    connectMode = true;\\n  } else {\\n    connectMode = false;\\n  }\\n  \\n  var matchingRoutes;\\n  if(ns.args.length == 0){\\n    matchingRoutes = allRoutes;\\n  } else {\\n    var targetHostname = ns.args[0];\\n    matchingRoutes = allRoutes\\n      .filter(function(route){\\n        return route.hostname == targetHostname;\\n      });\\n  }\\n  \\n  forEach(matchingRoutes, function(i, route){\\n    printRoute(ns, route, connectMode);\\n  });\\n\\n}\",\"filename\":\"traceroute.js\",\"server\":\"home\"}}],[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"home\"}}],[\"root-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { forEachAsync } from \\\"./utils.js\\\";\\n\\nexport async function portPoppers(ns){\\n  \\n  var possiblePoppers = [\\n    { bin: \\\"FTPCrack.exe\\\", invoke: ns.ftpcrack },\\n    { bin: \\\"BruteSSH.exe\\\", invoke: ns.brutessh },\\n    { bin: \\\"relaySMTP.exe\\\", invoke: ns.relaysmtp },\\n    { bin: \\\"HTTPWorm.exe\\\", invoke: ns.httpworm },\\n    { bin: \\\"SQLInject.exe\\\", invoke: ns.sqlinject }\\n  ];\\n  \\n  var installedPopppers = [];\\n  await forEachAsync(possiblePoppers, async function(i, e){\\n    if (await ns.fileExists(e.bin, \\\"home\\\")){\\n      installedPopppers.push(e);\\n    }\\n  });\\n  \\n  return installedPopppers;\\n  \\n}\\n\\nexport async function isVulnerable(ns, hostname) {\\n  var poppers = await portPoppers(ns);\\n  var myLevel = await ns.getHackingLevel();\\n  var requiredLevel = await ns.getServerRequiredHackingLevel(hostname);\\n  var portsRequired = await ns.getServerNumPortsRequired(hostname);\\n  return myLevel >= requiredLevel && poppers.length >= portsRequired;\\n}\\n\\nexport async function rootServer(ns, hostname){\\n  var hasRootAccess = await ns.hasRootAccess(hostname);\\n  var vulnerable = await isVulnerable(ns, hostname);\\n  if(!hasRootAccess && vulnerable){\\n    var poppers = await portPoppers(ns);\\n    await forEachAsync(poppers, async function(i, e){\\n      await e.invoke(hostname);\\n    });\\n    await ns.nuke(hostname);\\n    return true;\\n  } else {\\n    return false;\\n  }\\n}\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  root-server.js <hostname>\\\");\\n}\\n\\nexport async function main(ns) {\\n  if (ns.args.length == 1){\\n    if(await rootServer(ns, ns.args[0])){\\n      ns.tprint(\\\"Success\\\");\\n    } else {\\n      ns.tprint(\\\"Failed\\\");\\n    }\\n  } else {\\n    printHelp(ns);\\n  }\\n}\",\"filename\":\"root-server.js\",\"server\":\"home\"}}],[\"node-nurse.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nfunction defaultOptions(){\\n  return {\\n    maxNodes: 32,\\n    maxNodeLevel: 200,\\n    maxNodeRam: 64,\\n    maxNodeCores: 16\\n  };\\n};\\n\\nexport function NodeNurse(ns, options){\\n  \\n  var maxNodes = options.maxNodes;\\n  var maxNodeLevel = options.maxNodeLevel;\\n  var maxNodeRam = options.maxNodeRam;\\n  var maxNodeCores = options.maxNodeCores;\\n  \\n  async function buyNodes(){\\n    while(await ns.hacknet.numNodes() < maxNodes){\\n      var currentFunds = await ns.getServerMoneyAvailable(\\\"home\\\");\\n      var cost = await ns.hacknet.getPurchaseNodeCost();\\n      if (cost > currentFunds) break;\\n      var newNode = await ns.hacknet.purchaseNode();\\n      if (newNode < 0) {\\n        ns.print(\\\"Attempted node purchase failed\\\");\\n        break;\\n      }\\n      await ns.sleep(100);\\n    }\\n  }\\n  \\n  async function nodesByLowest(getSize){\\n    var nodeCount = await ns.hacknet.numNodes();\\n    var scored = [];\\n    for(var i = 0; i < nodeCount; i++){\\n      scored.push({\\n        index: i,\\n        score: await getSize(i)\\n      });\\n    }\\n    return scored\\n      .sort(function(a, b){\\n        return a.score - b.score;\\n      })\\n      .map(function(x){\\n        return x.index;\\n      });\\n  }\\n  \\n  async function increaseOn(\\n      nodeId,\\n      max,\\n      getSize,\\n      getCost,\\n      upgrade){\\n    \\n    if(await getSize(nodeId) >= max) return false;\\n    \\n    var currentFunds = await ns.getServerMoneyAvailable(\\\"home\\\");\\n    var cost = await getCost(nodeId, 1);\\n    if (cost > currentFunds) return false;\\n    \\n    var success = await upgrade(nodeId);\\n    if (!success) {\\n      ns.print(\\\"Attempted upgrade failed\\\");\\n    };\\n    \\n    return success;\\n      \\n  }\\n  \\n  async function increase(max, getSize, getCost, upgrade){\\n    for(var success = true; success; ){\\n      var nodes = await nodesByLowest(getSize);\\n      var success = await increaseOn(\\n          nodes[0],\\n          max,\\n          getSize,\\n          getCost,\\n          upgrade);\\n    }\\n  }\\n  \\n  async function getCoreCount(i){\\n    var stats = await ns.hacknet.getNodeStats(i);\\n    return stats.cores;\\n  }\\n  \\n  async function getRamSize(i){\\n    var stats = await ns.hacknet.getNodeStats(i);\\n    return stats.ram;\\n  }\\n  \\n  async function getLevel(i){\\n    var stats = await ns.hacknet.getNodeStats(i);\\n    return stats.level;\\n  }\\n  \\n  async function maintain(){\\n    await buyNodes();\\n    await increase(\\n      maxNodeRam,\\n      getRamSize,\\n      ns.hacknet.getRamUpgradeCost,\\n      ns.hacknet.upgradeRam);\\n    await increase(\\n      maxNodeLevel,\\n      getLevel,\\n      ns.hacknet.getLevelUpgradeCost,\\n      ns.hacknet.upgradeLevel);\\n    await increase(\\n      maxNodeCores,\\n      getCoreCount,\\n      ns.hacknet.getCoreUpgradeCost,\\n      ns.hacknet.upgradeCore);\\n  }\\n  \\n  return {\\n    maintain\\n  };\\n  \\n}\\n\\nexport async function main(ns){\\n  var nurse = new NodeNurse(ns, defaultOptions());\\n  for(;;){\\n    await nurse.maintain();\\n    await ns.sleep(60 * 1000);\\n  }\\n}\",\"filename\":\"node-nurse.js\",\"server\":\"home\"}}],[\"vps.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport function getVpsNames(){\\n  return [\\n    \\\"vps-absol\\\",\\n    \\\"vps-arbok\\\",\\n    \\\"vps-arcanine\\\",\\n    \\\"vps-bonsly\\\",\\n    \\\"vps-buneary\\\",\\n    \\\"vps-charmander\\\",\\n    \\\"vps-clefairy\\\",\\n    \\\"vps-cubone\\\",\\n    \\\"vps-dartrix\\\",\\n    \\\"vps-diglet\\\",\\n    \\\"vps-dragonite\\\",\\n    \\\"vps-eevee\\\",\\n    \\\"vps-ekans\\\",\\n    \\\"vps-gengar\\\",\\n    \\\"vps-latios\\\",\\n    \\\"vps-marowak\\\",\\n    \\\"vps-meowth\\\",\\n    \\\"vps-nuzleaf\\\",\\n    \\\"vps-pikachu\\\",\\n    \\\"vps-poochyena\\\",\\n    \\\"vps-rattata\\\",\\n    \\\"vps-scorbunny\\\",\\n    \\\"vps-treecko\\\",\\n    \\\"vps-vulpix\\\",\\n    \\\"vps-zigzagoon\\\"\\n  ];\\n}\\n\\nasync function quote(ns, size){\\n  var dollars = await ns.getPurchasedServerCost(size);\\n  var kilodollars = dollars / 1000;\\n  ns.tprint(\\\"$\\\" + kilodollars + \\\"k\\\");\\n}\\n\\nasync function buy(ns, name, size){\\n  var newServer = await ns.purchaseServer(name, size);\\n  if (newServer == \\\"\\\"){\\n    ns.tprint(\\\"Failed to purchase server.\\\");\\n  }\\n}\\n\\nasync function sell(ns, name){\\n  var success = await ns.deleteServer(name);\\n  if (!success){\\n    ns.tprint(\\\"Failed to sell server.\\\");\\n  }\\n}\\n\\nfunction Vps(ns, options){\\n  \\n  var hostname = options.hostname;\\n  var decommission = options.decommission;\\n  var commission = options.commission;\\n  var trace = options.trace;\\n  \\n  async function getSize(){\\n    var exists = await ns.serverExists(hostname);\\n    if (exists){\\n      return await ns.getServerMaxRam(hostname);\\n    } else {\\n      return 0;\\n    }\\n  }\\n  \\n  async function quote(size){\\n    return await ns.getPurchasedServerCost(size);\\n  }\\n  \\n  async function install(size){\\n    var exists = await ns.serverExists(hostname);\\n    if (exists){\\n      await decommission(hostname);\\n      var deleteSuccess = await ns.deleteServer(hostname);\\n      if(!deleteSuccess){\\n        await trace(\\\"Failed to delete server \\\" + hostname);\\n        return false;\\n      }\\n    }\\n    var boughtServerName = await ns.purchaseServer(hostname, size);\\n    if(boughtServerName == \\\"\\\"){\\n      await trace(\\\"Failed to purchase server \\\" + hostname);\\n      return false;\\n    }\\n    await ns.sleep(1000);\\n    await commission(hostname);\\n    return true;\\n  }\\n  \\n  async function considerUpgrade(levelIncrease){\\n    \\n    var currentSize = await getSize();\\n    var newSize;\\n    if (currentSize > 0){\\n      var newSize = currentSize * 2**levelIncrease;\\n    } else {\\n      var newSize = 2**(levelIncrease + 2); // At least 8\\n    }\\n    \\n    async function quoteNewSize(){\\n      return await quote(newSize);\\n    }\\n    \\n    async function installNewSize(){\\n      return await install(newSize);\\n    }\\n    \\n    return {\\n      hostname: hostname,\\n      size: newSize,\\n      quote: quoteNewSize,\\n      install: installNewSize\\n    };\\n    \\n  }\\n\\n  async function currentState(){\\n    \\n    var currentSize = await getSize();\\n    \\n    async function quoteNothing(){\\n      return 0;\\n    }\\n    \\n    async function doNothing(){ }\\n    \\n    return {\\n      hostname: hostname,\\n      size: currentSize,\\n      quote: quoteNothing,\\n      install: doNothing\\n    };\\n    \\n  }\\n  \\n  return {\\n    hostname,\\n    currentState,\\n    considerUpgrade\\n  };\\n  \\n}\\n\\nexport function VpsManager(ns, options){\\n  \\n  var hostnames = options.hostnames;\\n  var decommission = options.decommission;\\n  var commission = options.commission;\\n  var trace = options.trace;\\n  \\n  var servers = hostnames.map(\\n    function(hostname){\\n      return new Vps(ns, {\\n        hostname,\\n        decommission,\\n        commission,\\n        trace\\n      });\\n    });\\n    \\n  async function quoteAll(proposals){\\n    var quote = 0;\\n    for(var i in proposals){\\n      quote += await proposals[i].upgrade.quote();\\n    }\\n    return quote;\\n  }\\n  \\n  async function currentPortfolio(){\\n    var serverStates = [];\\n    for(var i in servers){\\n      serverStates.push({\\n        server: servers[i],\\n        levelIncrease: 0,\\n        upgrade: await servers[i].currentState()\\n      });\\n    }\\n    return serverStates;\\n  }\\n  \\n  async function planUpgrade(){\\n    \\n    var proposals = await currentPortfolio();\\n    proposals.sort(function(a, b){ return a.upgrade.size - b.upgrade.size; });\\n    \\n    for(var i = 0; i < proposals.length; i++){\\n      \\n      // Current proposal\\n      var proposal = proposals[i];\\n      var server = proposal.server;\\n      var levelIncreaseBefore = proposal.levelIncrease;\\n      var upgradeBefore = proposal.upgrade;\\n      var quoteBefore = await upgradeBefore.quote();\\n      var totalQuoteBefore = await quoteAll(proposals);\\n      \\n      // Upgrade Server as much as possible\\n      for(var levelIncreaseAfter = levelIncreaseBefore; ; levelIncreaseAfter++){\\n        \\n        var upgradeAfter = await server.considerUpgrade(levelIncreaseAfter);\\n        var quoteAfter = await upgradeAfter.quote();\\n        var totalQuoteAfter = totalQuoteBefore - quoteBefore + quoteAfter;\\n        \\n        // Can afford it? Update the proposal\\n        var funds = await ns.getServerMoneyAvailable(\\\"home\\\");\\n        if(totalQuoteAfter <= funds){\\n          proposal.levelIncrease = levelIncreaseAfter;\\n          proposal.upgrade = upgradeAfter;\\n        } else {\\n          break;\\n        }\\n        \\n      }\\n      \\n    }\\n    \\n    return proposals;\\n    \\n  }\\n  \\n  async function traceUpgrade(proposals){\\n    for(var i in proposals){\\n      if(proposals[i].levelIncrease > 0){\\n        await trace(\\n          proposals[i].server.hostname\\n          + \\\": +\\\"\\n          + proposals[i].levelIncrease);\\n      }\\n    }\\n  }\\n  \\n  async function executeUpgrade(proposals){\\n    for(var i in proposals){\\n      await proposals[i].upgrade.install();\\n    }\\n  }\\n  \\n  async function upgrade(){\\n    var proposals = await planUpgrade();\\n    await traceUpgrade(proposals);\\n    await executeUpgrade(proposals);\\n  }\\n  \\n  return {\\n    upgrade\\n  }\\n  \\n}\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  vps.js quote <log2(ram)>\\\");\\n  ns.tprint(\\\"  vps.js buy <name> <log2(ram)>\\\");\\n  ns.tprint(\\\"  vps.js sell <name>\\\");\\n  ns.tprint(\\\"  vps.js upgrade\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var managerOptions = {\\n    hostnames: getVpsNames(),\\n    decommission: async function(hostname){\\n        await ns.killall(hostname);\\n      },\\n    commission: async function(hostname) {\\n        ns.tprint(hostname, \\\" has been upgraded.\\\");\\n      },\\n    trace: async function(msg){\\n        ns.tprint(msg);\\n      }\\n  };\\n\\n  if (ns.args.length == 2 && ns.args[0] == \\\"quote\\\"){\\n    await quote(ns, 2**ns.args[1]);\\n  } else if (ns.args.length == 3 && ns.args[0] == \\\"buy\\\"){\\n    await buy(ns, ns.args[1], 2**ns.args[2]);\\n  } else if (ns.args.length == 2 && ns.args[0] == \\\"sell\\\"){\\n    await sell(ns, ns.args[1]);\\n  } else if (ns.args.length == 1 && ns.args[0] == \\\"upgrade\\\"){\\n    var manager = new VpsManager(ns, managerOptions);\\n    await manager.upgrade();\\n    ns.tprint(\\\"Done.\\\");\\n  } else {\\n    printHelp(ns);\\n  }\\n\\n}\",\"filename\":\"vps.js\",\"server\":\"home\"}}],[\"reach.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { Cache } from \\\"./cache.js\\\";\\nimport { Crawler } from \\\"./crawler.js\\\";\\nimport { InstallThief } from \\\"./install-thief.js\\\";\\nimport { rootServer } from \\\"./root-server.js\\\";\\nimport { ServerFinder } from \\\"./find-server.js\\\";\\nimport { forEach, forEachAsync } from \\\"./utils.js\\\";\\nimport { getVpsNames, VpsManager } from \\\"./vps.js\\\";\\n\\nexport function Reach(ns, options){\\n  \\n  var targetLimit = options.targets;\\n  var crawler = options.crawler;\\n  var installer = options.installer;\\n  var decommission = options.decommission;\\n  var trace = options.trace;\\n  \\n  var serverTargets = null;\\n  \\n  async function init(){\\n    var cacheCtxt = new Cache(ns, \\\"reach\\\");\\n    var cache = await cacheCtxt.open();\\n    serverTargets = cache.load(\\\"server-targets\\\");\\n    if (serverTargets == null){\\n      serverTargets = { };\\n      cache.save(\\\"server-targets\\\", serverTargets);\\n    }\\n  }\\n  \\n  function getCurrentServerTarget(server){\\n    return serverTargets[server] || null;\\n  }\\n  \\n  function setCurrentServerTarget(server, target){\\n    serverTargets[server] = target;\\n  }\\n  \\n  async function generateSchedule(servers){\\n    \\n    var hostFinder = new ServerFinder(ns, {\\n      hostnames: servers,\\n      limit: null,\\n      onlyWithRootAccess: true,\\n      onlyNotHome: true,\\n      onlyWithMoney: false,\\n      onlyNotMine: false\\n    });\\n    var bestHosts = await hostFinder.findBestHosts();\\n    var targetFinder = new ServerFinder(ns, {\\n      hostnames: servers,\\n      limit: targetLimit,\\n      onlyWithRootAccess: true,\\n      onlyNotHome: true,\\n      onlyWithMoney: true,\\n      onlyNotMine: true\\n    });\\n    var bestTargets = await targetFinder.findBestTargets();\\n    \\n    var schedule = {};\\n    if(bestTargets.length > 0){\\n      forEach(bestHosts, function(i, host){\\n        var correspondingTargetIndex = i % bestTargets.length;\\n        var correspondingTarget = bestTargets[correspondingTargetIndex];\\n        schedule[host] = correspondingTarget;\\n      });\\n    }\\n    return schedule;\\n    \\n  }\\n  \\n  async function tryRootServer(hostname){\\n    var success = await rootServer(ns, hostname);\\n    if (success){\\n      await trace(\\\"Rooted server \\\" + hostname);\\n    }\\n  }\\n  \\n  async function tryInstall(hostname, target){\\n    var canInstall =\\n      await ns.hasRootAccess(hostname) &&\\n      await ns.hasRootAccess(target) &&\\n      hostname != \\\"home\\\";\\n    if (canInstall){\\n      await trace(\\\"Updating: \\\" + hostname + \\\" targeting \\\" + target);\\n      await installer.installMax(hostname, target);\\n      setCurrentServerTarget(hostname, target);\\n    }\\n  }\\n  \\n  async function deployOn(host){\\n    var servers = await crawler.crawl();\\n    var currentTarget = getCurrentServerTarget(host);\\n    var target;\\n    if(currentTarget != null){\\n      target = currentTarget;\\n    } else {\\n      var newSchedule = await generateSchedule(servers);\\n      target = newSchedule[host];\\n      await trace(\\\"New server \\\" + host);\\n      await trace(newSchedule);\\n    }\\n    if(target != null){\\n      await tryInstall(host, target);\\n    } else {\\n      await trace(\\\"No target allocated to \\\", host);\\n      return;\\n    }\\n  }\\n  \\n  async function deployEverywhere(forceReinstall){\\n    \\n    // Root servers\\n    var servers = await crawler.crawl();\\n    await forEachAsync(servers, async function(i, e){\\n      await tryRootServer(e);\\n    });\\n    \\n    // Schedule hosts and targets\\n    var schedule = await generateSchedule(servers);\\n    await forEachAsync(servers, async function(i, e){\\n      var newTarget = schedule[e];\\n      var currentTarget = getCurrentServerTarget(e);\\n      var reinstall =\\n        newTarget != currentTarget ||\\n        forceReinstall;\\n      if (reinstall && newTarget){\\n        await tryInstall(e, newTarget);\\n      }\\n    });\\n    \\n  }\\n  \\n  async function removeEverywhere(){\\n    var servers = await crawler.crawl();\\n    await forEachAsync(servers, async function(i, e){\\n      if(e != \\\"home\\\"){\\n        await installer.uninstall(e);\\n      }\\n    });\\n  }\\n  \\n  async function upgradeVps(){\\n    var vpsHosts = await getVpsNames();\\n    var manager = new VpsManager(ns, {\\n      hostnames: vpsHosts,\\n      decommission: decommission,\\n      commission: deployOn,\\n      trace: trace\\n    });\\n    await manager.upgrade();\\n  }\\n  \\n  async function manage(){\\n    var upgradePeriod = 60*1000;\\n    var scanPeriod = 5*upgradePeriod;\\n    for(;;){\\n      await deployEverywhere(false);\\n      for(var i = 0; i < scanPeriod; i += upgradePeriod){\\n        await upgradeVps();\\n        await ns.sleep(upgradePeriod);\\n      }\\n    }\\n  }\\n  \\n  return {\\n    init,\\n    deployEverywhere,\\n    deployOn,\\n    manage,\\n    removeEverywhere\\n  };\\n  \\n}\\n\\nexport async function main(ns) {\\n  \\n  var scanLazy =\\n    ns.args.length == 2 &&\\n    ns.args[0] == \\\"scan\\\" &&\\n    ns.args[1] != \\\"--force\\\";\\n  var scanForce =\\n    ns.args.length == 3 &&\\n    ns.args[0] == \\\"scan\\\" &&\\n    ns.args[2] == \\\"--force\\\";\\n  var scan = scanLazy || scanForce;\\n  var install =\\n    ns.args.length == 3 &&\\n    ns.args[0] == \\\"install\\\";\\n  var manage =\\n    ns.args.length == 2 &&\\n    ns.args[0] == \\\"manage\\\";\\n  var uninstall = \\n    ns.args.length == 1 &&\\n    ns.args[0] == \\\"uninstall\\\";\\n  \\n  var crawler = new Crawler(ns, {\\n    resultLimit: 1000,\\n    rootHost: \\\"home\\\"\\n  });\\n  var installer = new InstallThief(ns);\\n  var reach = new Reach(ns, {\\n    targets: ns.args[1],\\n    crawler: crawler,\\n    installer: installer,\\n    decommission: async function(hostname){ await ns.killall(hostname); },\\n    trace: manage ? ns.print : ns.tprint\\n  });\\n  \\n  if(scan){\\n    await reach.init();\\n    await reach.deployEverywhere(scanForce);\\n    ns.tprint(\\\"Done.\\\");\\n  } else if (install){\\n    var host = ns.args[2];\\n    await reach.init();\\n    await reach.deployOn(host);\\n    ns.tprint(\\\"Done.\\\");\\n  } else if (manage){\\n    await reach.init();\\n    await reach.manage();\\n  } else if (uninstall){\\n    await reach.init();\\n    await reach.removeEverywhere();\\n  } else {\\n    ns.tprint(\\\"Usage:\\\");\\n    ns.tprint(\\\"  reach.js scan <target limit> [--force]\\\");\\n    ns.tprint(\\\"  reach.js install <target limit> <host>\\\");\\n    ns.tprint(\\\"  reach.js manage <target limit>\\\");\\n    ns.tprint(\\\"  reach.js uninstall\\\");\\n  }\\n  \\n}\",\"filename\":\"reach.js\",\"server\":\"home\"}}],[\"cache.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar caches = { };\\n\\nexport function Cache(ns, name){\\n  \\n  var localhost = ns.getHostname();\\n  var cache = null;\\n  \\n  function load(key){\\n    return cache[key];\\n  }\\n\\n  function save(key, value){\\n    cache[key] = value;\\n  }\\n  \\n  async function open(){\\n    \\n    if (typeof(caches[name]) == \\\"undefined\\\"){\\n      caches[name] = { };\\n    }\\n    cache = caches[name];\\n    \\n    return {\\n      load,\\n      save\\n    };\\n    \\n  }\\n  \\n  return {\\n    open\\n  };\\n  \\n}\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cache.js <cache-name> <key>\\\");\\n  ns.tprint(\\\"  cache.js <cache-name> <key> <value>\\\");\\n}\\n\\nexport async function main(ns){\\n  if (ns.args.length == 2){\\n    var dbName = ns.args[0];\\n    var key = ns.args[1];\\n    var cache = await (new Cache(ns, dbName)).open();\\n    ns.tprint(cache.load(key));\\n  } else if (ns.args.length == 3){\\n    var dbName = ns.args[0];\\n    var key = ns.args[1];\\n    var value = ns.args[2];\\n    var cache = await (new Cache(ns, dbName)).open();\\n    cache.save(key, value);\\n  } else {\\n    printHelp(ns);\\n  }\\n}\",\"filename\":\"cache.js\",\"server\":\"home\"}}],[\"install-thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport function InstallThief (ns){\\n  \\n  var scriptName = \\\"thief.js\\\";\\n  var utilsName = \\\"utils.js\\\";\\n  \\n  async function sendScript(host){\\n    await ns.scp(scriptName, host);\\n    await ns.scp(utilsName, host);\\n  }\\n  \\n  async function removeScript(host){\\n    await ns.rm(scriptName, host);\\n    await ns.rm(utilsName, host);\\n  }\\n  \\n  async function stopScript(host){\\n    await ns.scriptKill(scriptName, host);\\n  }\\n  \\n  async function startScript(host, target, threadCount){\\n    await ns.exec(scriptName, host, threadCount, target);\\n  }\\n  \\n  async function install(host, target, threadCount) {\\n    await stopScript(host);\\n    await sendScript(host);\\n    await startScript(host, target, threadCount);\\n  }\\n  \\n  async function installMax(host, target) {\\n    var ramRequired = await ns.getScriptRam(scriptName);\\n    await stopScript(host);\\n    var ramMax = await ns.getServerMaxRam(host);\\n    var ramUsed = await ns.getServerUsedRam(host);\\n    var ramAvailable = ramMax - ramUsed;\\n    var threadCount = Math.floor(ramAvailable / ramRequired);\\n    await sendScript(host);\\n    if (threadCount > 0){\\n      await startScript(host, target, threadCount);\\n    }\\n  }\\n\\n  async function uninstall(host) {\\n    await stopScript(host);\\n    await removeScript(host);\\n  }\\n  \\n  return {\\n    install,\\n    installMax,\\n    uninstall\\n  };\\n  \\n}\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  install-thief.js install <host> <target> <threads>\\\");\\n  ns.tprint(\\\"  install-thief.js install-max <host> <target>\\\");\\n  ns.tprint(\\\"  install-thief.js uninstall <host>\\\");\\n}\\n\\nfunction readArgs(ns){\\n  \\n  var argc  = ns.args.length;\\n  if(argc <= 0){\\n    return null;\\n  }\\n  \\n  var command = ns.args[0];\\n  if (command == \\\"install\\\" && argc == 4){\\n    var host = ns.args[1];\\n    var target = ns.args[2];\\n    var threads = ns.args[3];\\n    return {\\n      mode: \\\"install\\\",\\n      host: host,\\n      target: target,\\n      threads: threads\\n    };\\n  } else if (command == \\\"install-max\\\" && argc == 3){\\n    var host = ns.args[1];\\n    var target = ns.args[2];\\n    return {\\n      mode: \\\"install-max\\\",\\n      host: host,\\n      target: target\\n    };\\n  } else if(command == \\\"uninstall\\\" && argc == 2) {\\n    var host = ns.args[1];\\n    return {\\n      mode: \\\"uninstall\\\",\\n      host: host\\n    };\\n  } else {\\n    return null;\\n  }\\n  \\n}\\n\\nexport async function main(ns) {\\n  var installThief = new InstallThief(ns);\\n  var options = readArgs(ns);\\n  if (options == null){\\n    printHelp(ns);\\n  } else if(options.mode == \\\"install\\\"){\\n    await installThief.install(options.host, options.target, options.threads);\\n  } else if(options.mode == \\\"install-max\\\"){\\n    await installThief.installMax(options.host, options.target);\\n  } else if(options.mode == \\\"uninstall\\\"){\\n    await installThief.uninstall(options.host);\\n  } else {\\n    printHelp(ns);\\n  }\\n}\",\"filename\":\"install-thief.js\",\"server\":\"home\"}}],[\"find-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { forEach, forEachAsync } from \\\"utils.js\\\";\\nimport { Crawler } from \\\"crawler.js\\\";\\n\\nexport function ServerFinder(ns, options){\\n  \\n  var hostnames = options.hostnames;\\n  var limit = options.limit;\\n  var onlyWithRootAccess = options.onlyWithRootAccess;\\n  var onlyWithMoney = options.onlyWithMoney;\\n  var onlyNotMine = options.onlyNotMine;\\n  var onlyNotHome = options.onlyNotHome;\\n  var onlyLowSecurity = options.onlyLowSecurity;\\n    \\n  async function profileServers(){\\n    var profiles = [];\\n    await forEachAsync(hostnames, async function(i, e){\\n      profiles.push({\\n        hostname: e,\\n        hasRootAccess: await ns.hasRootAccess(e),\\n        maxMoney: await ns.getServerMaxMoney(e),\\n        maxRam: await ns.getServerMaxRam(e),\\n        minSecurity: await ns.getServerMinSecurityLevel(e),\\n      });\\n    });\\n    return profiles;\\n  }\\n  \\n  function getHostname(profile){\\n    return profile.hostname;\\n  }\\n  \\n  async function generateFilter(){\\n    \\n    var filters = [];\\n    \\n    if(onlyWithMoney){\\n      filters.push(function(serverProfile){\\n        return serverProfile.maxMoney > 0;\\n      });\\n    }\\n    \\n    if(onlyWithRootAccess){\\n      filters.push(function(serverProfile){\\n        return serverProfile.hasRootAccess;\\n      });\\n    }\\n    \\n    if(onlyNotMine){\\n      var myServers = await ns.getPurchasedServers();\\n      myServers.push(\\\"home\\\");\\n      filters.push(function(serverProfile){\\n        return myServers.indexOf(serverProfile.hostname) < 0;\\n      });\\n    }\\n    \\n    if(onlyNotHome){\\n      filters.push(function(serverProfile){\\n        return serverProfile.hostname != \\\"home\\\";\\n      });\\n    }\\n    \\n    if(onlyLowSecurity){\\n      var hackLevel = await ns.getHackingLevel();\\n      filters.push(function(serverProfile){\\n        var hackRequirement = (\\n          3 *\\n          serverProfile.minSecurity *\\n          serverProfile.minSecurity);\\n        return hackLevel >= hackRequirement ||\\n          serverProfile.minSecurity == 1;\\n      });\\n    }\\n    \\n    return function(serverProfile){\\n      var passing = true;\\n      forEach(filters, function(i, e){\\n        passing = passing && e(serverProfile);\\n      });\\n      return passing;\\n    };\\n    \\n  }\\n  \\n  function scoreTarget(profile){  \\n    var moneyScore = Math.log10(profile.maxMoney);\\n    var securityScore = 100 - profile.minSecurity;\\n    // Rank by min security, but bonus points for more money\\n    return securityScore + moneyScore;\\n  }\\n  \\n  function scoreHost(profile){\\n    return profile.maxRam;\\n  }\\n  \\n  function compareTargetsDesc(a, b){\\n    return scoreTarget(b) - scoreTarget(a);\\n  }\\n  \\n  function compareHostsDesc(a, b){\\n    return scoreHost(b) - scoreHost(a);\\n  }\\n  \\n  async function findBest(compareDesc){\\n    var profiles = await profileServers();\\n    var filter = await generateFilter();\\n    return profiles\\n      .filter(filter)\\n      .sort(compareDesc)\\n      .slice(0, limit || Infinity)\\n      .map(getHostname);\\n  }\\n  \\n  async function findBestTargets(){\\n    return await findBest(compareTargetsDesc);\\n  }\\n  \\n  async function findBestHosts(){\\n    return await findBest(compareHostsDesc);\\n  }\\n  \\n  return {\\n    findBestTargets,\\n    findBestHosts\\n  };\\n  \\n}\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  find-server.js host <limit>\\\");\\n  ns.tprint(\\\"  find-server.js target <limit>\\\");\\n}\\n\\nexport async function main(ns){\\n  \\n  var findHosts = ns.args.length == 2 && ns.args[0] == \\\"host\\\";\\n  var findTargets = ns.args.length == 2 && ns.args[0] == \\\"target\\\";\\n  var showHelp = !findHosts && !findTargets;\\n  \\n  if(showHelp){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var crawler = new Crawler(ns, {\\n    resultLimit: 1000,\\n    rootHost: \\\"home\\\"\\n  });\\n  var servers = await crawler.crawl();\\n  \\n  var serverFinder = new ServerFinder(ns, {\\n    hostnames: servers,\\n    limit: ns.args[1],\\n    onlyWithMoney: findTargets,\\n    onlyWithRootAccess: true,\\n    onlyNotMine: findTargets,\\n    onlyNotHome: true\\n  });\\n  \\n  var results;\\n  if (findHosts){\\n    results = await serverFinder.findBestHosts();\\n  } else {\\n    results = await serverFinder.findBestTargets();\\n  }\\n  \\n  forEach(results, function(i, e){\\n    ns.tprint(i+1, \\\": \\\", e);\\n  });\\n  \\n}\",\"filename\":\"find-server.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"vps-bonsly\",\"vps-clefairy\",\"darkweb\",\"vps-poochyena\",\"vps-treecko\",\"vps-vulpix\",\"vps-zigzagoon\",\"vps-absol\",\"vps-arbok\",\"vps-arcanine\",\"vps-buneary\",\"vps-charmander\",\"vps-cubone\",\"vps-dartrix\",\"vps-diglet\",\"vps-dragonite\",\"vps-eevee\",\"vps-ekans\",\"vps-gengar\",\"vps-latios\",\"vps-marowak\",\"vps-meowth\",\"vps-nuzleaf\",\"vps-pikachu\",\"vps-rattata\",\"vps-scorbunny\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"22.1.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":37417134376,\"moneyMax\":935428359400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1365,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"87.6.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":52057433145,\"moneyMax\":1301435828625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1266,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"20.7.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":27257668650,\"moneyMax\":681441716250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1050,\"serverGrowth\":79,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"48.3.0.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":15558809878,\"moneyMax\":388970246950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1103,\"serverGrowth\":65,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"82.8.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":22008357973,\"moneyMax\":550208949325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1129,\"serverGrowth\":65,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"85.7.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":23965985222,\"moneyMax\":599149630550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1071,\"serverGrowth\":57,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"91.5.0.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":21505311709,\"moneyMax\":537632792725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":967,\"serverGrowth\":96,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"62.5.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":17760732224,\"moneyMax\":444018305600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1129,\"serverGrowth\":96,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"41.3.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":20037990870,\"moneyMax\":500949771750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1282,\"serverGrowth\":91,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"37.5.9.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1640843108,\"moneyMax\":41021077700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1022,\"serverGrowth\":95,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"25.6.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1147,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"93.0.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1163816460,\"moneyMax\":29095411500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1054,\"serverGrowth\":73,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"65.6.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":883738147,\"moneyMax\":22093453675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1045,\"serverGrowth\":48,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"62.5.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"solaris\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":610746865,\"moneyMax\":15268671625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":881,\"serverGrowth\":70,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"61.7.1.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":687859386,\"moneyMax\":17196484650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":893,\"serverGrowth\":80,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"3.2.1.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":766018108,\"moneyMax\":19150452700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":835,\"serverGrowth\":66,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-303478.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[18,21],[24,34],[17,23],[18,28],[19,28]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"50.9.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":910035934,\"moneyMax\":22750898350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":918,\"serverGrowth\":95,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"7.1.6.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1125500311,\"moneyMax\":28137507775,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":843,\"serverGrowth\":85,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-504218.cct\",\"type\":\"Array Jumping Game II\",\"data\":[2,5,1,1,0,2,2,3,4,1,0,6,1,3,4,3,1,5],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"64.8.6.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":759445577,\"moneyMax\":18986139425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":857,\"serverGrowth\":64,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"46.7.3.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":643089519,\"moneyMax\":16077237975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":824,\"serverGrowth\":81,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"99.1.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"univ-energy\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":893815092,\"moneyMax\":22345377300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":907,\"serverGrowth\":74,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"63.1.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":808871434,\"moneyMax\":20221785850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":851,\"serverGrowth\":86,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"25.0.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"alpha-ent\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1048653628,\"moneyMax\":26216340700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":863,\"serverGrowth\":59,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"33.5.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":977315222,\"moneyMax\":24432880550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":882,\"serverGrowth\":68,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"61.5.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":1050200759,\"moneyMax\":26255018975,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":803,\"serverGrowth\":65,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"35.5.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":723788410,\"moneyMax\":18094710250,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":842,\"serverGrowth\":73,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"53.3.1.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":857195217,\"moneyMax\":21429880425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":768,\"serverGrowth\":73,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"75.6.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1655168954,\"moneyMax\":41379223850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":807,\"serverGrowth\":68,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-71464.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1011111110000111\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"26.8.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1747574170,\"moneyMax\":43689354250,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":768,\"serverGrowth\":90,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"0.9.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"univ-energy\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":1246503387,\"moneyMax\":31162584675,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":843,\"serverGrowth\":70,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"15.3.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1358242432,\"moneyMax\":33956060800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":807,\"serverGrowth\":70,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-455271.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"EMAIL MACRO TRASH SHELL DEBUG\",15],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"90.0.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"galactic-cyber\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1039442435,\"moneyMax\":25986060875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":794,\"serverGrowth\":80,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"16.3.0.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":749659118,\"moneyMax\":18741477950,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":671,\"serverGrowth\":58,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"10.8.9.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":568273356,\"moneyMax\":14206833900,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":500,\"serverGrowth\":46,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"33.1.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":630219909,\"moneyMax\":15755497725,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":505,\"serverGrowth\":51,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"38.8.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":243075577,\"moneyMax\":6076889425,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":412,\"serverGrowth\":39,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"68.4.6.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":183965332,\"moneyMax\":4599133300,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":412,\"serverGrowth\":45,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"80.1.1.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":889012090,\"moneyMax\":22225302250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":747,\"serverGrowth\":85,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"5.6.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":310810934,\"moneyMax\":7770273350,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":468,\"serverGrowth\":46,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"77.9.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":533826785,\"moneyMax\":13345669625,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":622,\"serverGrowth\":61,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"20.4.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":536288612,\"moneyMax\":13407215300,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":404,\"serverGrowth\":44,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"31.9.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\",\"syscore\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":37,\"minDifficulty\":12,\"moneyAvailable\":179527210,\"moneyMax\":4488180250,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":323,\"serverGrowth\":46,\"runningScripts\":[]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"77.4.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":249817267,\"moneyMax\":6245431675,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":342,\"serverGrowth\":59,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"55.7.8.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":425,\"serverGrowth\":72,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"48.7.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\",\"zb-institute\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":73037705,\"moneyMax\":1825942625,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":268,\"serverGrowth\":54,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"63.0.9.8\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"n00dles\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":2.3259999999999987,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[7581.106392534901,1,14,6]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":126,\"onlineMoneyMade\":7581.106392534901,\"onlineRunningTime\":823.6100000000504,\"ramUsage\":2.4,\"server\":\"n00dles\",\"scriptKey\":\"thief.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"thief.js sigma-cosmetics\",\"threads\":1,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"16.3.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"foodnstuff\"}}],[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":7.699999999999981,\"minDifficulty\":3,\"moneyAvailable\":2080407.5135021515,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[43171.71446082869,6,84,36]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":756,\"onlineMoneyMade\":43171.71446082869,\"onlineRunningTime\":823.6100000000504,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"scriptKey\":\"thief.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"thief.js sigma-cosmetics\",\"threads\":6,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"98.0.3.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"sigma-cosmetics\"}}],[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":3.5440000000000005,\"minDifficulty\":3,\"moneyAvailable\":1679123.611836668,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[316418.9196736108,72,78,30]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":598.9499999999999,\"onlineMoneyMade\":316418.9196736108,\"onlineRunningTime\":823.6100000000504,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"thief.js*[\\\"n00dles\\\"]\",\"title\":\"thief.js n00dles\",\"threads\":6,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"39.1.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"joesguns\"}}],[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":11.73599999999998,\"minDifficulty\":5,\"moneyAvailable\":2608519.375450478,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[44225.86621586965,6,84,36]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":756,\"onlineMoneyMade\":44225.86621586965,\"onlineRunningTime\":823.6100000000504,\"ramUsage\":2.4,\"server\":\"joesguns\",\"scriptKey\":\"thief.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"thief.js sigma-cosmetics\",\"threads\":6,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"53.1.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"zer0\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[115007.03199392432,13,182,78]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1638,\"onlineMoneyMade\":115007.03199392432,\"onlineRunningTime\":823.6100000000504,\"ramUsage\":2.4,\"server\":\"zer0\",\"scriptKey\":\"thief.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"thief.js sigma-cosmetics\",\"threads\":13,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"32.0.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"nectar-net\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"iron-gym\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[294640.57303486695,78,78,30]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":613.8,\"onlineMoneyMade\":294640.57303486695,\"onlineRunningTime\":823.6100000000504,\"ramUsage\":2.4,\"server\":\"nectar-net\",\"scriptKey\":\"thief.js*[\\\"n00dles\\\"]\",\"title\":\"thief.js n00dles\",\"threads\":6,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"32.4.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"neo-net\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"zer0\",\"the-hub\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[612541.3064668637,169,169,65]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1329.9000000000003,\"onlineMoneyMade\":612541.3064668637,\"onlineRunningTime\":823.6100000000504,\"ramUsage\":2.4,\"server\":\"neo-net\",\"scriptKey\":\"thief.js*[\\\"n00dles\\\"]\",\"title\":\"thief.js n00dles\",\"threads\":13,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-460305.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,1,0,0],[0,0,0,1,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"31.6.4.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"silver-helix\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"zer0\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[212614.3588065993,26,754,338]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6708,\"onlineMoneyMade\":212614.3588065993,\"onlineRunningTime\":1742.2100000002592,\"ramUsage\":2.4,\"server\":\"silver-helix\",\"scriptKey\":\"thief.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"thief.js sigma-cosmetics\",\"threads\":26,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"99.0.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"hong-fang-tea\"}}],[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":11.77199999999999,\"minDifficulty\":5,\"moneyAvailable\":3027513.557793022,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[344271.3259344372,78,78,30]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":613.8,\"onlineMoneyMade\":344271.3259344372,\"onlineRunningTime\":823.6100000000504,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"scriptKey\":\"thief.js*[\\\"n00dles\\\"]\",\"title\":\"thief.js n00dles\",\"threads\":6,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"73.8.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"harakiri-sushi\"}}],[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":11.999999999999993,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[42312.2534699381,6,84,36]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":756,\"onlineMoneyMade\":42312.2534699381,\"onlineRunningTime\":823.6100000000504,\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"scriptKey\":\"thief.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"thief.js sigma-cosmetics\",\"threads\":6,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"9.1.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"phantasy\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"computek\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[631867.822348014,169,169,65]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1329.9000000000003,\"onlineMoneyMade\":631867.822348014,\"onlineRunningTime\":823.6100000000504,\"ramUsage\":2.4,\"server\":\"phantasy\",\"scriptKey\":\"thief.js*[\\\"n00dles\\\"]\",\"title\":\"thief.js n00dles\",\"threads\":13,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"9.3.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"max-hardware\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"foodnstuff\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[106461.73084759538,13,182,78]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1638,\"onlineMoneyMade\":106461.73084759538,\"onlineRunningTime\":823.6100000000504,\"ramUsage\":2.4,\"server\":\"max-hardware\",\"scriptKey\":\"thief.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"thief.js sigma-cosmetics\",\"threads\":13,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"74.3.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"omega-net\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":35,\"minDifficulty\":12,\"moneyAvailable\":64954534,\"moneyMax\":1623863350,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":187,\"serverGrowth\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[772753.0272898094,169,169,65]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1340.6250000000002,\"onlineMoneyMade\":772753.0272898094,\"onlineRunningTime\":823.6100000000504,\"ramUsage\":2.4,\"server\":\"omega-net\",\"scriptKey\":\"thief.js*[\\\"n00dles\\\"]\",\"title\":\"thief.js n00dles\",\"threads\":13,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"18.7.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":40633842,\"moneyMax\":1015846050,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":226,\"serverGrowth\":30,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"44.1.0.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"iron-gym\"}}],[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[108812.21285181008,13,312,143]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2808,\"onlineMoneyMade\":108812.21285181008,\"onlineRunningTime\":1436.0100000001896,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"scriptKey\":\"thief.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"thief.js sigma-cosmetics\",\"threads\":13,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"48.0.2.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":496,\"serverGrowth\":33,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"98.1.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1063,\"serverGrowth\":60,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"92.4.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":734,\"serverGrowth\":41,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"68.0.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":517,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"25.2.2.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"avmnite-02h\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":345,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"57.5.8.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":203,\"serverGrowth\":1,\"runningScripts\":[]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"7.4.0.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":536,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"82.4.1.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"CSEC\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":53,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[165469.27352986397,39,39,15]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":306.9,\"onlineMoneyMade\":165469.27352986397,\"onlineRunningTime\":823.6100000000504,\"ramUsage\":2.4,\"server\":\"CSEC\",\"scriptKey\":\"thief.js*[\\\"n00dles\\\"]\",\"title\":\"thief.js n00dles\",\"threads\":3,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"95.9.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"42.6.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"60.9.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"vps-bonsly\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-bonsly\",\"httpPortOpen\":false,\"ip\":\"13.5.5.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"vps-bonsly\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-bonsly\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[4503315.206478751,754,676,286]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5662.800000000007,\"onlineMoneyMade\":4503315.206478751,\"onlineRunningTime\":1742.2100000002592,\"ramUsage\":2.4,\"server\":\"vps-bonsly\",\"scriptKey\":\"thief.js*[\\\"n00dles\\\"]\",\"title\":\"thief.js n00dles\",\"threads\":26,\"temporary\":false}}]}},\"vps-clefairy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-clefairy\",\"httpPortOpen\":false,\"ip\":\"14.6.6.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"vps-clefairy\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-clefairy\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[254505.54774951268,26,754,338]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6708,\"onlineMoneyMade\":254505.54774951268,\"onlineRunningTime\":1742.2100000002592,\"ramUsage\":2.4,\"server\":\"vps-clefairy\",\"scriptKey\":\"thief.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"thief.js sigma-cosmetics\",\"threads\":26,\"temporary\":false}}]}},\"vps-poochyena\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-poochyena\",\"httpPortOpen\":false,\"ip\":\"8.4.0.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"vps-poochyena\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-poochyena\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[18068765.018776555,3074,2756,1166]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":23086.799999999974,\"onlineMoneyMade\":18068765.018776555,\"onlineRunningTime\":1742.2100000002592,\"ramUsage\":2.4,\"server\":\"vps-poochyena\",\"scriptKey\":\"thief.js*[\\\"n00dles\\\"]\",\"title\":\"thief.js n00dles\",\"threads\":106,\"temporary\":false}}]}},\"vps-treecko\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-treecko\",\"httpPortOpen\":false,\"ip\":\"57.9.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"vps-treecko\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-treecko\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[167011.06655162532,39,39,13]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":300.29999999999995,\"onlineMoneyMade\":167011.06655162532,\"onlineRunningTime\":210.2099999999966,\"ramUsage\":2.4,\"server\":\"vps-treecko\",\"scriptKey\":\"thief.js*[\\\"n00dles\\\"]\",\"title\":\"thief.js n00dles\",\"threads\":13,\"temporary\":false}}]}},\"vps-vulpix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-vulpix\",\"httpPortOpen\":false,\"ip\":\"20.7.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"vps-vulpix\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-vulpix\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[87777.52884825922,13,26,26]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":390,\"onlineMoneyMade\":87777.52884825922,\"onlineRunningTime\":210.2099999999966,\"ramUsage\":2.4,\"server\":\"vps-vulpix\",\"scriptKey\":\"thief.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"thief.js sigma-cosmetics\",\"threads\":13,\"temporary\":false}}]}},\"vps-zigzagoon\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-zigzagoon\",\"httpPortOpen\":false,\"ip\":\"88.8.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"vps-zigzagoon\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-zigzagoon\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[54628.33542141864,18,18,6]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":138.59999999999997,\"onlineMoneyMade\":54628.33542141864,\"onlineRunningTime\":210.2099999999966,\"ramUsage\":2.4,\"server\":\"vps-zigzagoon\",\"scriptKey\":\"thief.js*[\\\"n00dles\\\"]\",\"title\":\"thief.js n00dles\",\"threads\":6,\"temporary\":false}}]}},\"vps-absol\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-absol\",\"httpPortOpen\":false,\"ip\":\"85.2.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"vps-absol\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-absol\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[218863.36036525993,39,39,13]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":300.29999999999995,\"onlineMoneyMade\":218863.36036525993,\"onlineRunningTime\":210.2099999999966,\"ramUsage\":2.4,\"server\":\"vps-absol\",\"scriptKey\":\"thief.js*[\\\"n00dles\\\"]\",\"title\":\"thief.js n00dles\",\"threads\":13,\"temporary\":false}}]}},\"vps-arbok\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-arbok\",\"httpPortOpen\":false,\"ip\":\"33.0.3.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"vps-arbok\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-arbok\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[1588109.1942121559,338,325,130]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2616.900000000003,\"onlineMoneyMade\":1588109.1942121559,\"onlineRunningTime\":1619.2100000002313,\"ramUsage\":2.4,\"server\":\"vps-arbok\",\"scriptKey\":\"thief.js*[\\\"n00dles\\\"]\",\"title\":\"thief.js n00dles\",\"threads\":13,\"temporary\":false}}]}},\"vps-arcanine\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-arcanine\",\"httpPortOpen\":false,\"ip\":\"33.9.0.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"vps-arcanine\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-arcanine\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[97525.80798355679,13,39,26]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":468,\"onlineMoneyMade\":97525.80798355679,\"onlineRunningTime\":210.2099999999966,\"ramUsage\":2.4,\"server\":\"vps-arcanine\",\"scriptKey\":\"thief.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"thief.js sigma-cosmetics\",\"threads\":13,\"temporary\":false}}]}},\"vps-buneary\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-buneary\",\"httpPortOpen\":false,\"ip\":\"80.3.0.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"vps-buneary\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-buneary\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[58639.54265587421,13,39,13]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":235.95,\"onlineMoneyMade\":58639.54265587421,\"onlineRunningTime\":210.2099999999966,\"ramUsage\":2.4,\"server\":\"vps-buneary\",\"scriptKey\":\"thief.js*[\\\"n00dles\\\"]\",\"title\":\"thief.js n00dles\",\"threads\":13,\"temporary\":false}}]}},\"vps-charmander\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-charmander\",\"httpPortOpen\":false,\"ip\":\"44.7.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"vps-charmander\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-charmander\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[92522.70314702707,13,39,26]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":468,\"onlineMoneyMade\":92522.70314702707,\"onlineRunningTime\":210.2099999999966,\"ramUsage\":2.4,\"server\":\"vps-charmander\",\"scriptKey\":\"thief.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"thief.js sigma-cosmetics\",\"threads\":13,\"temporary\":false}}]}},\"vps-cubone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-cubone\",\"httpPortOpen\":false,\"ip\":\"86.6.3.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"vps-cubone\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-cubone\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[248926.12677121133,39,39,13]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":300.29999999999995,\"onlineMoneyMade\":248926.12677121133,\"onlineRunningTime\":210.2099999999966,\"ramUsage\":2.4,\"server\":\"vps-cubone\",\"scriptKey\":\"thief.js*[\\\"n00dles\\\"]\",\"title\":\"thief.js n00dles\",\"threads\":13,\"temporary\":false}}]}},\"vps-dartrix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-dartrix\",\"httpPortOpen\":false,\"ip\":\"36.7.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"vps-dartrix\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-dartrix\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[100726.78872737219,13,221,130]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2184,\"onlineMoneyMade\":100726.78872737219,\"onlineRunningTime\":1129.81000000012,\"ramUsage\":2.4,\"server\":\"vps-dartrix\",\"scriptKey\":\"thief.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"thief.js sigma-cosmetics\",\"threads\":13,\"temporary\":false}}]}},\"vps-diglet\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-diglet\",\"httpPortOpen\":false,\"ip\":\"27.6.0.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"vps-diglet\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-diglet\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[108362.96815734096,13,39,26]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":468,\"onlineMoneyMade\":108362.96815734096,\"onlineRunningTime\":210.2099999999966,\"ramUsage\":2.4,\"server\":\"vps-diglet\",\"scriptKey\":\"thief.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"thief.js sigma-cosmetics\",\"threads\":13,\"temporary\":false}}]}},\"vps-dragonite\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-dragonite\",\"httpPortOpen\":false,\"ip\":\"53.3.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"vps-dragonite\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-dragonite\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[192069.67799952027,39,39,13]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":300.29999999999995,\"onlineMoneyMade\":192069.67799952027,\"onlineRunningTime\":210.2099999999966,\"ramUsage\":2.4,\"server\":\"vps-dragonite\",\"scriptKey\":\"thief.js*[\\\"n00dles\\\"]\",\"title\":\"thief.js n00dles\",\"threads\":13,\"temporary\":false}}]}},\"vps-eevee\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-eevee\",\"httpPortOpen\":false,\"ip\":\"95.4.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"vps-eevee\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-eevee\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[102800.93946145283,13,39,26]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":468,\"onlineMoneyMade\":102800.93946145283,\"onlineRunningTime\":210.2099999999966,\"ramUsage\":2.4,\"server\":\"vps-eevee\",\"scriptKey\":\"thief.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"thief.js sigma-cosmetics\",\"threads\":13,\"temporary\":false}}]}},\"vps-ekans\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-ekans\",\"httpPortOpen\":false,\"ip\":\"11.0.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"vps-ekans\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-ekans\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[195397.6703551531,39,39,13]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":300.29999999999995,\"onlineMoneyMade\":195397.6703551531,\"onlineRunningTime\":210.2099999999966,\"ramUsage\":2.4,\"server\":\"vps-ekans\",\"scriptKey\":\"thief.js*[\\\"n00dles\\\"]\",\"title\":\"thief.js n00dles\",\"threads\":13,\"temporary\":false}}]}},\"vps-gengar\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-gengar\",\"httpPortOpen\":false,\"ip\":\"25.1.1.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"vps-gengar\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-gengar\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[114227.58189593663,13,39,26]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":468,\"onlineMoneyMade\":114227.58189593663,\"onlineRunningTime\":210.2099999999966,\"ramUsage\":2.4,\"server\":\"vps-gengar\",\"scriptKey\":\"thief.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"thief.js sigma-cosmetics\",\"threads\":13,\"temporary\":false}}]}},\"vps-latios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-latios\",\"httpPortOpen\":false,\"ip\":\"48.1.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"vps-latios\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-latios\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[422916.95280955813,104,104,39]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":815.0999999999997,\"onlineMoneyMade\":422916.95280955813,\"onlineRunningTime\":516.4099999999805,\"ramUsage\":2.4,\"server\":\"vps-latios\",\"scriptKey\":\"thief.js*[\\\"n00dles\\\"]\",\"title\":\"thief.js n00dles\",\"threads\":13,\"temporary\":false}}]}},\"vps-marowak\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-marowak\",\"httpPortOpen\":false,\"ip\":\"17.8.2.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"vps-marowak\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-marowak\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[84269.04273480536,13,104,52]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1014,\"onlineMoneyMade\":84269.04273480536,\"onlineRunningTime\":515.4099999999803,\"ramUsage\":2.4,\"server\":\"vps-marowak\",\"scriptKey\":\"thief.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"thief.js sigma-cosmetics\",\"threads\":13,\"temporary\":false}}]}},\"vps-meowth\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-meowth\",\"httpPortOpen\":false,\"ip\":\"72.3.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"vps-meowth\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-meowth\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[201837.48505170818,39,39,13]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":300.29999999999995,\"onlineMoneyMade\":201837.48505170818,\"onlineRunningTime\":210.2099999999966,\"ramUsage\":2.4,\"server\":\"vps-meowth\",\"scriptKey\":\"thief.js*[\\\"n00dles\\\"]\",\"title\":\"thief.js n00dles\",\"threads\":13,\"temporary\":false}}]}},\"vps-nuzleaf\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-nuzleaf\",\"httpPortOpen\":false,\"ip\":\"47.7.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"vps-nuzleaf\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-nuzleaf\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[83276.92293088304,13,26,26]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":390,\"onlineMoneyMade\":83276.92293088304,\"onlineRunningTime\":210.2099999999966,\"ramUsage\":2.4,\"server\":\"vps-nuzleaf\",\"scriptKey\":\"thief.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"thief.js sigma-cosmetics\",\"threads\":13,\"temporary\":false}}]}},\"vps-pikachu\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-pikachu\",\"httpPortOpen\":false,\"ip\":\"16.9.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"vps-pikachu\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-pikachu\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[144006.97830450162,39,39,13]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":300.29999999999995,\"onlineMoneyMade\":144006.97830450162,\"onlineRunningTime\":210.2099999999966,\"ramUsage\":2.4,\"server\":\"vps-pikachu\",\"scriptKey\":\"thief.js*[\\\"n00dles\\\"]\",\"title\":\"thief.js n00dles\",\"threads\":13,\"temporary\":false}}]}},\"vps-rattata\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-rattata\",\"httpPortOpen\":false,\"ip\":\"91.3.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"vps-rattata\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-rattata\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[79008.21879043817,13,26,26]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":390,\"onlineMoneyMade\":79008.21879043817,\"onlineRunningTime\":209.20999999999665,\"ramUsage\":2.4,\"server\":\"vps-rattata\",\"scriptKey\":\"thief.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"thief.js sigma-cosmetics\",\"threads\":13,\"temporary\":false}}]}},\"vps-scorbunny\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-scorbunny\",\"httpPortOpen\":false,\"ip\":\"26.9.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"vps-scorbunny\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"vps-scorbunny\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[34596.65030630719,6,12,12]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":180,\"onlineMoneyMade\":34596.65030630719,\"onlineRunningTime\":208.2099999999967,\"ramUsage\":2.4,\"server\":\"vps-scorbunny\",\"scriptKey\":\"thief.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"thief.js sigma-cosmetics\",\"threads\":6,\"temporary\":false}}]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":1,\"isBanned\":false,\"isMember\":true,\"playerReputation\":87.9583333333346}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":1,\"isBanned\":false,\"isMember\":true,\"playerReputation\":3073.4363076921763}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":1,\"isBanned\":false,\"isMember\":true,\"playerReputation\":119.75000000000487}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}}}","AliasesSave":"{\"analyse\":\"analyze\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"35","AllGangsSave":"","LastExportBonus":"1698154497204","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}