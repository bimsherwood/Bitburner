{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":1337,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":2,\"agility\":1,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.9742025203222162,\"hacking_speed_mult\":1.9643427688601578,\"hacking_money_mult\":3.2988127444787043,\"hacking_grow_mult\":1.9755735683786706,\"hacking_exp\":545024953.4266847,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":3.0131433735144695,\"strength_mult\":1.8175276829083769,\"defense_mult\":1.5804588547029366,\"dexterity_mult\":2.5190933685110104,\"agility_mult\":1.6594817974380836,\"charisma_mult\":1.8965506256435238,\"hacking_exp_mult\":3.9780053004394254,\"strength_exp_mult\":1.9992804511992146,\"defense_exp_mult\":1.9992804511992146,\"dexterity_exp_mult\":1.9992804511992146,\"agility_exp_mult\":1.9992804511992146,\"charisma_exp_mult\":1.9992804511992146,\"company_rep_mult\":1.5804588547029366,\"faction_rep_mult\":1.5804588547029366,\"money\":5467378856.218826,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"cell-test\",\"vps-absol\",\"vps-scorbunny\",\"vps-meowth\",\"vps-rattata\",\"vps-bonsly\",\"vps-diglet\",\"vps-vulpix\",\"vps-dragonite\",\"vps-pikachu\",\"vps-charmander\"],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"NiteSec\",\"BitRunners\"],\"factionInvitations\":[\"Sector-12\"],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":47,\"name\":\"NeuroFlux Governor\"},{\"level\":48,\"name\":\"NeuroFlux Governor\"},{\"level\":49,\"name\":\"NeuroFlux Governor\"},{\"level\":50,\"name\":\"NeuroFlux Governor\"},{\"level\":51,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":46,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Neurotrainer II\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.5804588547029366,\"crime_success_mult\":1.5804588547029366,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":25,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.5804588547029366,\"hacknet_node_money_mult\":3.986065399578434,\"hacknet_node_purchase_cost_mult\":0.4818150778704727,\"hacknet_node_ram_cost_mult\":0.6298236312032323,\"hacknet_node_core_cost_mult\":0.6298236312032323,\"hacknet_node_level_cost_mult\":0.5353500865227474,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1641281886215,\"totalPlaytime\":503478800,\"playtimeSinceLastAug\":14315200,\"playtimeSinceLastBitnode\":503478800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":158073761712.99777,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":115381509199.61086,\"total\":5466378856.218826,\"work\":0,\"servers\":-168732822404.14423,\"other\":-288200000,\"augmentations\":-98967869652.24554}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":150000,\"class\":-3388416,\"codingcontract\":7050000000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":1449452781794.3752,\"hacknet\":91951628508.93436,\"hacknet_expenses\":-123173282581.36526,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":3737362708246.0522,\"total\":3002660924205.997,\"work\":261053.77994776584,\"servers\":-1222626108080.1963,\"other\":-7486800000,\"augmentations\":-929867026333.301}},\"scriptProdSinceLastAug\":210789997612.19293,\"exploits\":[],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":3,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"3.8.2.3\",\"isConnectedTo\":true,\"maxRam\":16384,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"SQLInject.exe\"],\"ramUsed\":6836.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2656500000,1518000,1519000,1517000]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19096750.841459077,\"onlineMoneyMade\":2656500000,\"onlineRunningTime\":14263.2100000176,\"pid\":5,\"ramUsage\":3.4,\"server\":\"home\",\"threads\":1000,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///57902721-8193-4a98-b06a-cd5a50bcef3c\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///9b8707a8-2f53-4d33-b11f-209b233c33a7\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[2112254699.2334685,112000,1685000,1684000]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":51290877.61308053,\"onlineMoneyMade\":2112254699.2334685,\"onlineRunningTime\":14259.010000017584,\"pid\":6,\"ramUsage\":3.4,\"server\":\"home\",\"threads\":1000,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sell\"],\"dataMap\":{},\"filename\":\"bubble-rider.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":52716235899.19519,\"onlineRunningTime\":14238.210000017509,\"pid\":7,\"ramUsage\":19.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"bubble-rider.js\",\"url\":\"blob:file:///45b151c1-7e2f-4485-b6cb-0debdbd84e64\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"manage\"],\"dataMap\":{},\"filename\":\"reach.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13886.210000016139,\"pid\":12,\"ramUsage\":14.55,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"cache.js\",\"url\":\"blob:file:///97d096f0-4230-4d44-adff-5848b25dc87b\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///57902721-8193-4a98-b06a-cd5a50bcef3c\"},{\"filename\":\"crawler.js\",\"url\":\"blob:file:///8f18b146-28d3-4119-9f22-259580497376\"},{\"filename\":\"install-thief.js\",\"url\":\"blob:file:///fad96448-df65-41fc-8dc9-7c1f8e06ccbd\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///57902721-8193-4a98-b06a-cd5a50bcef3c\"},{\"filename\":\"root-server.js\",\"url\":\"blob:file:///575b7b18-457e-41fb-ad27-efc2adf3b78c\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///57902721-8193-4a98-b06a-cd5a50bcef3c\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///57902721-8193-4a98-b06a-cd5a50bcef3c\"},{\"filename\":\"crawler.js\",\"url\":\"blob:file:///8f18b146-28d3-4119-9f22-259580497376\"},{\"filename\":\"find-server.js\",\"url\":\"blob:file:///4ed9693d-f942-44ff-a545-7f22f3631592\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"install-thief.js\",\"url\":\"blob:file:///fad96448-df65-41fc-8dc9-7c1f8e06ccbd\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///57902721-8193-4a98-b06a-cd5a50bcef3c\"},{\"filename\":\"crawler.js\",\"url\":\"blob:file:///8f18b146-28d3-4119-9f22-259580497376\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///57902721-8193-4a98-b06a-cd5a50bcef3c\"},{\"filename\":\"vps.js\",\"url\":\"blob:file:///4a2457c5-df19-4de9-b1e0-691ab5d5d85b\"},{\"filename\":\"reach.js\",\"url\":\"blob:file:///656cc03d-da29-4353-a793-58fa0fed1392\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"server\"],\"dataMap\":{},\"filename\":\"database.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6665.609999996122,\"pid\":241,\"ramUsage\":2.65,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"cache.js\",\"url\":\"blob:file:///97d096f0-4230-4d44-adff-5848b25dc87b\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"database-client.js\",\"url\":\"blob:file:///8c7747e5-a853-4198-bc4c-49613ca779b2\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"database.js\",\"url\":\"blob:file:///a199491c-a7a2-4db6-9e3f-eb58b8ef6dcf\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}],\"ramUsage\":3.4,\"server\":\"home\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":52219}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":69527}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport function InstallThief (ns){\\n  \\n  var scriptName = \\\"thief.js\\\";\\n  var utilsName = \\\"utils.js\\\";\\n  \\n  async function sendScript(host){\\n    await ns.scp(scriptName, host);\\n    await ns.scp(utilsName, host);\\n  }\\n  \\n  async function removeScript(host){\\n    await ns.rm(scriptName, host);\\n    await ns.rm(utilsName, host);\\n  }\\n  \\n  async function stopScript(host){\\n    await ns.scriptKill(scriptName, host);\\n  }\\n  \\n  async function startScript(host, target, threadCount){\\n    await ns.exec(scriptName, host, threadCount, target);\\n  }\\n  \\n  async function install(host, target, threadCount) {\\n    await stopScript(host);\\n    await sendScript(host);\\n    await startScript(host, target, threadCount);\\n  }\\n  \\n  async function installMax(host, target) {\\n    var ramRequired = await ns.getScriptRam(scriptName);\\n    await stopScript(host);\\n    var ramMax = await ns.getServerMaxRam(host);\\n    var ramUsed = await ns.getServerUsedRam(host);\\n    var ramAvailable = ramMax - ramUsed;\\n    var threadCount = Math.floor(ramAvailable / ramRequired);\\n    await sendScript(host);\\n    if (threadCount > 0){\\n      await startScript(host, target, threadCount);\\n    }\\n  }\\n\\n  async function uninstall(host) {\\n    await stopScript(host);\\n    await removeScript(host);\\n  }\\n  \\n  return {\\n    install,\\n    installMax,\\n    uninstall\\n  };\\n  \\n}\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  install-thief.js install <host> <target> <threads>\\\");\\n  ns.tprint(\\\"  install-thief.js install-max <host> <target>\\\");\\n  ns.tprint(\\\"  install-thief.js uninstall <host>\\\");\\n}\\n\\nfunction readArgs(ns){\\n  \\n  var argc  = ns.args.length;\\n  if(argc <= 0){\\n    return null;\\n  }\\n  \\n  var command = ns.args[0];\\n  if (command == \\\"install\\\" && argc == 4){\\n    var host = ns.args[1];\\n    var target = ns.args[2];\\n    var threads = ns.args[3];\\n    return {\\n      mode: \\\"install\\\",\\n      host: host,\\n      target: target,\\n      threads: threads\\n    };\\n  } else if (command == \\\"install-max\\\" && argc == 3){\\n    var host = ns.args[1];\\n    var target = ns.args[2];\\n    return {\\n      mode: \\\"install-max\\\",\\n      host: host,\\n      target: target\\n    };\\n  } else if(command == \\\"uninstall\\\" && argc == 2) {\\n    var host = ns.args[1];\\n    return {\\n      mode: \\\"uninstall\\\",\\n      host: host\\n    };\\n  } else {\\n    return null;\\n  }\\n  \\n}\\n\\nexport async function main(ns) {\\n  var installThief = new InstallThief(ns);\\n  var options = readArgs(ns);\\n  if (options == null){\\n    printHelp(ns);\\n  } else if(options.mode == \\\"install\\\"){\\n    await installThief.install(options.host, options.target, options.threads);\\n  } else if(options.mode == \\\"install-max\\\"){\\n    await installThief.installMax(options.host, options.target);\\n  } else if(options.mode == \\\"uninstall\\\"){\\n    await installThief.uninstall(options.host);\\n  } else {\\n    printHelp(ns);\\n  }\\n}\",\"filename\":\"install-thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"install-thief.js\",\"url\":\"blob:file:///9126d822-67d4-4460-beee-1de55208545f\"}],\"ramUsage\":5.7,\"server\":\"home\",\"_hash\":\"0f3b7ef3c2e9d3e667797a624a542ec5091804d3e5176e973956098b5141cb04\",\"moduleSequenceNumber\":52169}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { forEach } from \\\"./utils.js\\\";\\n\\nexport function Crawler(ns, options){\\n  \\n  var resultLimit = options.resultLimit;\\n  var rootHost = options.rootHost;\\n  \\n  // These host names have already been scanned.\\n  var completeHosts = [];\\n  \\n  // These host names are recently discovered and\\n  // may not have been scanned.\\n  var discoveredHosts = [];\\n  \\n  // Returns false when there is no more work to do.\\n  async function step(){\\n    \\n    // Run out\\n    if(discoveredHosts.length == 0){\\n      return false;\\n    }\\n    \\n    // Result limit reached\\n    if(discoveredHosts.length >= resultLimit){\\n      return false;\\n    }\\n    \\n    // Processing\\n    var hostname = discoveredHosts.pop();\\n    var alreadyScanned = completeHosts.indexOf(hostname) >= 0;\\n    if (!alreadyScanned){\\n      completeHosts.push(hostname);\\n      var siblings = await ns.scan(hostname);\\n      forEach(siblings, function(i, e){\\n        discoveredHosts.push(e);\\n      });\\n    }\\n    return true;\\n    \\n  }\\n  \\n  async function crawl(){\\n    discoveredHosts.push(rootHost);\\n    while(await step()){\\n      await ns.sleep(10);\\n    }\\n    return completeHosts;\\n  }\\n  \\n  return {\\n    crawl\\n  };\\n  \\n}\",\"filename\":\"crawler.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///aa74eb12-590d-4ca3-8f29-85b8bd84232b\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///2aa5749e-7362-45a2-b845-8008ea0c1f37\"},{\"filename\":\"database.js\",\"url\":\"blob:file:///6c5a029b-41a8-4082-8894-42995b541748\"},{\"filename\":\"crawler.js\",\"url\":\"blob:file:///4df1f741-2d72-4f26-9107-230560380b52\"}],\"ramUsage\":1.8,\"server\":\"home\",\"_hash\":\"031e1fa81cb90bda030789275b88e071c86adc56a475227f9c22fc6386204930\",\"moduleSequenceNumber\":52170}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { Cache } from \\\"./cache.js\\\";\\nimport { Crawler } from \\\"./crawler.js\\\";\\nimport { InstallThief } from \\\"./install-thief.js\\\";\\nimport { rootServer } from \\\"./root-server.js\\\";\\nimport { ServerFinder } from \\\"./find-server.js\\\";\\nimport { forEach, forEachAsync } from \\\"./utils.js\\\";\\nimport { getVpsNames, VpsManager } from \\\"./vps.js\\\";\\n\\nexport function Reach(ns, options){\\n  \\n  var crawler = options.crawler;\\n  var installer = options.installer;\\n  var decommission = options.decommission;\\n  var trace = options.trace;\\n  \\n  var serverTargets = null;\\n  \\n  async function init(){\\n    var cacheCtxt = new Cache(ns, \\\"reach\\\");\\n    var cache = await cacheCtxt.open();\\n    serverTargets = cache.load(\\\"server-targets\\\");\\n    if (serverTargets == null){\\n      serverTargets = { };\\n      cache.save(\\\"server-targets\\\", serverTargets);\\n    }\\n  }\\n  \\n  function getCurrentServerTarget(server){\\n    return serverTargets[server] || null;\\n  }\\n  \\n  function setCurrentServerTarget(server, target){\\n    serverTargets[server] = target;\\n  }\\n  \\n  async function generateSchedule(servers){\\n    \\n    var hostFinder = new ServerFinder(ns, {\\n      hostnames: servers,\\n      limit: null,\\n      onlyWithRootAccess: true,\\n      onlyNotHome: true,\\n      onlyWithMoney: false,\\n      onlyNotMine: false\\n    });\\n    var bestHosts = await hostFinder.findBestHosts();\\n    var targetFinder = new ServerFinder(ns, {\\n      hostnames: servers,\\n      limit: 10,\\n      onlyWithRootAccess: true,\\n      onlyNotHome: true,\\n      onlyWithMoney: true,\\n      onlyNotMine: true\\n    });\\n    var bestTargets = await targetFinder.findBestTargets();\\n    \\n    var schedule = {};\\n    if(bestTargets.length > 0){\\n      forEach(bestHosts, function(i, host){\\n        var correspondingTargetIndex = i % bestTargets.length;\\n        var correspondingTarget = bestTargets[correspondingTargetIndex];\\n        schedule[host] = correspondingTarget;\\n      });\\n    }\\n    return schedule;\\n    \\n  }\\n  \\n  async function tryRootServer(hostname){\\n    var success = await rootServer(ns, hostname);\\n    if (success){\\n      await trace(\\\"Rooted server \\\" + hostname);\\n    }\\n  }\\n  \\n  async function tryInstall(hostname, target){\\n    var canInstall =\\n      await ns.hasRootAccess(hostname) &&\\n      await ns.hasRootAccess(target) &&\\n      hostname != \\\"home\\\";\\n    if (canInstall){\\n      await trace(\\\"Updating: \\\" + hostname + \\\" targeting \\\" + target);\\n      await installer.installMax(hostname, target);\\n      setCurrentServerTarget(hostname, target);\\n    }\\n  }\\n  \\n  async function deployOn(host){\\n    var servers = await crawler.crawl();\\n    var currentTarget = getCurrentServerTarget(host);\\n    var target;\\n    if(currentTarget != null){\\n      target = currentTarget;\\n    } else {\\n      var newSchedule = await generateSchedule(servers);\\n      target = newSchedule[host];\\n    }\\n    if(target != null){\\n      await tryInstall(host, target);\\n    } else {\\n      await trace(\\\"No target allocated to \\\", host);\\n      return;\\n    }\\n  }\\n  \\n  async function deployEverywhere(forceReinstall){\\n    \\n    // Root servers\\n    var servers = await crawler.crawl();\\n    await forEachAsync(servers, async function(i, e){\\n      await tryRootServer(e);\\n    });\\n    \\n    // Schedule hosts and targets\\n    var schedule = await generateSchedule(servers);\\n    await forEachAsync(servers, async function(i, e){\\n      var newTarget = schedule[e];\\n      var currentTarget = getCurrentServerTarget(e);\\n      var reinstall =\\n        newTarget != currentTarget ||\\n        forceReinstall;\\n      if (reinstall && newTarget){\\n        await tryInstall(e, newTarget);\\n      }\\n    });\\n    \\n  }\\n  \\n  async function upgradeVps(){\\n    var vpsHosts = await getVpsNames();\\n    var manager = new VpsManager(ns, {\\n      hostnames: vpsHosts,\\n      decommission: decommission,\\n      commission: deployOn,\\n      trace: trace\\n    });\\n    await manager.upgrade();\\n  }\\n  \\n  async function manage(){\\n    var upgradePeriod = 60*1000;\\n    var scanPeriod = 60*upgradePeriod;\\n    for(;;){\\n      await deployEverywhere(false);\\n      for(var i = 0; i < scanPeriod; i += upgradePeriod){\\n        await upgradeVps();\\n        await ns.sleep(60*1000);\\n      }\\n    }\\n  }\\n  \\n  return {\\n    init,\\n    deployEverywhere,\\n    deployOn,\\n    manage\\n  };\\n  \\n}\\n\\nexport async function main(ns) {\\n  \\n  var scanLazy =\\n    ns.args.length == 1 &&\\n    ns.args[0] == \\\"scan\\\";\\n  var scanForce =\\n    ns.args.length == 2 &&\\n    ns.args[0] == \\\"scan\\\" &&\\n    ns.args[1] == \\\"--force\\\";\\n  var scan = scanLazy || scanForce;\\n  var install =\\n    ns.args.length == 2 &&\\n    ns.args[0] == \\\"install\\\";\\n  var manage =\\n    ns.args.length == 1 &&\\n    ns.args[0] == \\\"manage\\\";\\n  \\n  var crawler = new Crawler(ns, {\\n    resultLimit: 1000,\\n    rootHost: \\\"home\\\"\\n  });\\n  var installer = new InstallThief(ns);\\n  var reach = new Reach(ns, {\\n    crawler: crawler,\\n    installer: installer,\\n    decommission: async function(hostname){ await ns.killall(hostname); },\\n    trace: manage ? ns.print : ns.tprint\\n  });\\n  \\n  if(scan){\\n    await reach.init();\\n    await reach.deployEverywhere(scanForce);\\n    ns.tprint(\\\"Done.\\\");\\n  } else if (install){\\n    var host = ns.args[1];\\n    await reach.init();\\n    await reach.deployOn(host);\\n    ns.tprint(\\\"Done.\\\");\\n  } else if (manage){\\n    await reach.init();\\n    await reach.manage();\\n  } else {\\n    ns.tprint(\\\"Usage:\\\");\\n    ns.tprint(\\\"  reach.js scan [--force]\\\");\\n    ns.tprint(\\\"  reach.js install <host>\\\");\\n    ns.tprint(\\\"  reach.js manage\\\");\\n  }\\n  \\n}\",\"filename\":\"reach.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"cache.js\",\"url\":\"blob:file:///97d096f0-4230-4d44-adff-5848b25dc87b\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///57902721-8193-4a98-b06a-cd5a50bcef3c\"},{\"filename\":\"crawler.js\",\"url\":\"blob:file:///8f18b146-28d3-4119-9f22-259580497376\"},{\"filename\":\"install-thief.js\",\"url\":\"blob:file:///fad96448-df65-41fc-8dc9-7c1f8e06ccbd\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///57902721-8193-4a98-b06a-cd5a50bcef3c\"},{\"filename\":\"root-server.js\",\"url\":\"blob:file:///575b7b18-457e-41fb-ad27-efc2adf3b78c\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///57902721-8193-4a98-b06a-cd5a50bcef3c\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///57902721-8193-4a98-b06a-cd5a50bcef3c\"},{\"filename\":\"crawler.js\",\"url\":\"blob:file:///8f18b146-28d3-4119-9f22-259580497376\"},{\"filename\":\"find-server.js\",\"url\":\"blob:file:///4ed9693d-f942-44ff-a545-7f22f3631592\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"install-thief.js\",\"url\":\"blob:file:///fad96448-df65-41fc-8dc9-7c1f8e06ccbd\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///57902721-8193-4a98-b06a-cd5a50bcef3c\"},{\"filename\":\"crawler.js\",\"url\":\"blob:file:///8f18b146-28d3-4119-9f22-259580497376\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///57902721-8193-4a98-b06a-cd5a50bcef3c\"},{\"filename\":\"vps.js\",\"url\":\"blob:file:///4a2457c5-df19-4de9-b1e0-691ab5d5d85b\"},{\"filename\":\"reach.js\",\"url\":\"blob:file:///3f2884eb-a741-47e4-a685-cbb6ec9aa084\"}],\"ramUsage\":14.55,\"server\":\"home\",\"_hash\":\"dc576e53a2c30ff01fe8682b74448dccd4b14266b920712c63eb941fcdfa7953\",\"moduleSequenceNumber\":85059}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar caches = { };\\n\\nexport function Cache(ns, name){\\n  \\n  var localhost = ns.getHostname();\\n  var cache = null;\\n  \\n  function load(key){\\n    return cache[key];\\n  }\\n\\n  function save(key, value){\\n    cache[key] = value;\\n  }\\n  \\n  async function open(){\\n    \\n    if (typeof(caches[name]) == \\\"undefined\\\"){\\n      caches[name] = { };\\n    }\\n    cache = caches[name];\\n    \\n    return {\\n      load,\\n      save\\n    };\\n    \\n  }\\n  \\n  return {\\n    open\\n  };\\n  \\n}\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cache.js <cache-name> <key>\\\");\\n  ns.tprint(\\\"  cache.js <cache-name> <key> <value>\\\");\\n}\\n\\nexport async function main(ns){\\n  if (ns.args.length == 2){\\n    var dbName = ns.args[0];\\n    var key = ns.args[1];\\n    var cache = await (new Cache(ns, dbName)).open();\\n    ns.tprint(cache.load(key));\\n  } else if (ns.args.length == 3){\\n    var dbName = ns.args[0];\\n    var key = ns.args[1];\\n    var value = ns.args[2];\\n    var cache = await (new Cache(ns, dbName)).open();\\n    cache.save(key, value);\\n  } else {\\n    printHelp(ns);\\n  }\\n}\",\"filename\":\"cache.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"cache.js\",\"url\":\"blob:file:///97d096f0-4230-4d44-adff-5848b25dc87b\"}],\"ramUsage\":1.65,\"server\":\"home\",\"_hash\":\"a52876974d759dc067cc9195f25882e6a0837254b2a06b0396ee79155e47dbcb\",\"moduleSequenceNumber\":52172}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { forEachAsync } from \\\"./utils.js\\\";\\n\\nexport async function portPoppers(ns){\\n  \\n  var possiblePoppers = [\\n    { bin: \\\"FTPCrack.exe\\\", invoke: ns.ftpcrack },\\n    { bin: \\\"BruteSSH.exe\\\", invoke: ns.brutessh },\\n    { bin: \\\"relaySMTP.exe\\\", invoke: ns.relaysmtp },\\n    { bin: \\\"HTTPWorm.exe\\\", invoke: ns.httpworm },\\n    { bin: \\\"SQLInject.exe\\\", invoke: ns.sqlinject }\\n  ];\\n  \\n  var installedPopppers = [];\\n  await forEachAsync(possiblePoppers, async function(i, e){\\n    if (await ns.fileExists(e.bin, \\\"home\\\")){\\n      installedPopppers.push(e);\\n    }\\n  });\\n  \\n  return installedPopppers;\\n  \\n}\\n\\nexport async function isVulnerable(ns, hostname) {\\n  var poppers = await portPoppers(ns);\\n  var myLevel = await ns.getHackingLevel();\\n  var requiredLevel = await ns.getServerRequiredHackingLevel(hostname);\\n  var portsRequired = await ns.getServerNumPortsRequired(hostname);\\n  return myLevel >= requiredLevel && poppers.length >= portsRequired;\\n}\\n\\nexport async function rootServer(ns, hostname){\\n  var hasRootAccess = await ns.hasRootAccess(hostname);\\n  var vulnerable = await isVulnerable(ns, hostname);\\n  if(!hasRootAccess && vulnerable){\\n    var poppers = await portPoppers(ns);\\n    await forEachAsync(poppers, async function(i, e){\\n      await e.invoke(hostname);\\n    });\\n    await ns.nuke(hostname);\\n    return true;\\n  } else {\\n    return false;\\n  }\\n}\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  root-server.js <hostname>\\\");\\n}\\n\\nexport async function main(ns) {\\n  if (ns.args.length == 1){\\n    if(await rootServer(ns, ns.args[0])){\\n      ns.tprint(\\\"Success\\\");\\n    } else {\\n      ns.tprint(\\\"Failed\\\");\\n    }\\n  } else {\\n    printHelp(ns);\\n  }\\n}\",\"filename\":\"root-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///c67377bf-da20-4f4e-b7a1-9e282158882d\"},{\"filename\":\"root-server.js\",\"url\":\"blob:file:///2525fe84-cb14-4f39-9d0f-e1bbf9ca3388\"}],\"ramUsage\":2.3,\"server\":\"home\",\"_hash\":\"c9ce84eef4d7eb129f762891298baeb41c5091a781cff0bc1643da1ff24af3b6\",\"moduleSequenceNumber\":52173}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { InstallThief } from \\\"./install-thief.js\\\"\\nimport { Crawler } from \\\"./crawler.js\\\"\\nimport { forEachAsync } from \\\"./utils.js\\\"\\n\\nexport function getVpsNames(){\\n  return [\\n    \\\"vps-pikachu\\\",\\n    \\\"vps-charmander\\\",\\n    \\\"vps-absol\\\",\\n    \\\"vps-scorbunny\\\",\\n    \\\"vps-meowth\\\",\\n    \\\"vps-rattata\\\",\\n    \\\"vps-bonsly\\\",\\n    \\\"vps-diglet\\\",\\n    \\\"vps-vulpix\\\",\\n    \\\"vps-dragonite\\\"\\n  ];\\n}\\n\\nasync function quote(ns, size){\\n  var dollars = await ns.getPurchasedServerCost(size);\\n  var kilodollars = dollars / 1000;\\n  ns.tprint(\\\"$\\\" + kilodollars + \\\"k\\\");\\n}\\n\\nasync function buy(ns, name, size){\\n  var newServer = await ns.purchaseServer(name, size);\\n  if (newServer == \\\"\\\"){\\n    ns.tprint(\\\"Failed to purchase server.\\\");\\n  }\\n}\\n\\nasync function sell(ns, name){\\n  var success = await ns.deleteServer(name);\\n  if (!success){\\n    ns.tprint(\\\"Failed to sell server.\\\");\\n  }\\n}\\n\\nfunction Vps(ns, options){\\n  \\n  var hostname = options.hostname;\\n  var decommission = options.decommission;\\n  var commission = options.commission;\\n  var trace = options.trace;\\n  \\n  async function getSize(){\\n    var exists = await ns.serverExists(hostname);\\n    if (exists){\\n      return await ns.getServerMaxRam(hostname);\\n    } else {\\n      return 0;\\n    }\\n  }\\n  \\n  async function quote(size){\\n    return await ns.getPurchasedServerCost(size);\\n  }\\n  \\n  async function install(size){\\n    var exists = await ns.serverExists(hostname);\\n    if (exists){\\n      await decommission(hostname);\\n      var deleteSuccess = await ns.deleteServer(hostname);\\n      if(!deleteSuccess){\\n        await trace(\\\"Failed to delete server \\\" + hostname);\\n        return false;\\n      }\\n    }\\n    var boughtServerName = await ns.purchaseServer(hostname, size);\\n    if(boughtServerName != hostname){\\n      await trace(\\\"Failed to buy server \\\" + hostname);\\n      return false;\\n    }\\n    await commission(hostname);\\n    return true;\\n  }\\n  \\n  async function considerUpgrade(levelIncrease){\\n    \\n    var currentSize = await getSize();\\n    var newSize;\\n    if (currentSize > 0){\\n      var newSize = currentSize * 2**levelIncrease;\\n    } else {\\n      var newSize = 2**(levelIncrease + 1); // At least 4\\n    }\\n    \\n    async function quoteNewSize(){\\n      return await quote(newSize);\\n    }\\n    \\n    async function installNewSize(){\\n      return await install(newSize);\\n    }\\n    \\n    return {\\n      hostname: hostname,\\n      size: newSize,\\n      quote: quoteNewSize,\\n      install: installNewSize\\n    };\\n    \\n  }\\n\\n  async function currentState(){\\n    \\n    var currentSize = await getSize();\\n    \\n    async function quoteNothing(){\\n      return 0;\\n    }\\n    \\n    async function doNothing(){ }\\n    \\n    return {\\n      hostname: hostname,\\n      size: currentSize,\\n      quote: quoteNothing,\\n      install: doNothing\\n    };\\n    \\n  }\\n  \\n  return {\\n    hostname,\\n    currentState,\\n    considerUpgrade\\n  };\\n  \\n}\\n\\nexport function VpsManager(ns, options){\\n  \\n  var hostnames = options.hostnames;\\n  var decommission = options.decommission;\\n  var commission = options.commission;\\n  var trace = options.trace;\\n  \\n  var servers = hostnames.map(\\n    function(hostname){\\n      return new Vps(ns, {\\n        hostname,\\n        decommission,\\n        commission,\\n        trace\\n      });\\n    });\\n    \\n  async function quoteAll(proposals){\\n    var quote = 0;\\n    await forEachAsync(proposals, async function(i, e){\\n      quote += await e.upgrade.quote();\\n    });\\n    return quote;\\n  }\\n  \\n  async function currentPortfolio(){\\n    var serverStates = [];\\n    await forEachAsync(servers, async function(i, e){\\n      serverStates.push({\\n        server: e,\\n        levelIncrease: 0,\\n        upgrade: await e.currentState()\\n      });\\n    });\\n    return serverStates;\\n  }\\n  \\n  async function planUpgrade(){\\n    \\n    var proposals = await currentPortfolio();\\n    proposals.sort(function(a, b){ return a.upgrade.size - b.upgrade.size; });\\n    \\n    for(var i = 0; ; i = (i + 1) % proposals.length){\\n      \\n      // Current proposal\\n      var proposal = proposals[i];\\n      var server = proposal.server;\\n      var levelIncreaseBefore = proposal.levelIncrease;\\n      var upgradeBefore = proposal.upgrade;\\n      var quoteBefore = await upgradeBefore.quote();\\n      var totalQuoteBefore = await quoteAll(proposals);\\n      \\n      // Next proposal\\n      var levelIncreaseAfter = levelIncreaseBefore + 1;\\n      var upgradeAfter = await server.considerUpgrade(levelIncreaseAfter);\\n      var quoteAfter = await upgradeAfter.quote();\\n      var totalQuoteAfter = totalQuoteBefore - quoteBefore + quoteAfter;\\n      \\n      // Can afford it? Update the proposal\\n      var funds = await ns.getServerMoneyAvailable(\\\"home\\\");\\n      if(totalQuoteAfter <= funds){\\n        proposal.levelIncrease = levelIncreaseAfter;\\n        proposal.upgrade = upgradeAfter;\\n      } else {\\n        break;\\n      }\\n      \\n    }\\n    \\n    return proposals;\\n    \\n  }\\n  \\n  async function traceUpgrade(proposals){\\n    await forEachAsync(proposals, async function(i, e){\\n      if(e.levelIncrease > 0){\\n        await trace(e.server.hostname + \\\": +\\\" + e.levelIncrease);\\n      }\\n    });\\n  }\\n  \\n  async function executeUpgrade(proposals){\\n    await forEachAsync(proposals, async function(i, e){\\n      await e.upgrade.install();\\n    });\\n  }\\n  \\n  async function upgrade(){\\n    var proposals = await planUpgrade();\\n    await traceUpgrade(proposals);\\n    await executeUpgrade(proposals);\\n  }\\n  \\n  return {\\n    upgrade\\n  }\\n  \\n}\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  vps.js quote <log2(ram)>\\\");\\n  ns.tprint(\\\"  vps.js buy <name> <log2(ram)>\\\");\\n  ns.tprint(\\\"  vps.js sell <name>\\\");\\n  ns.tprint(\\\"  vps.js upgrade\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var crawler = new Crawler(ns, {\\n    resultLimit: 1000,\\n    rootHost: \\\"home\\\"\\n  });\\n  var installer = new InstallThief(ns);\\n  var managerOptions = {\\n    hostnames: getVpsNames(),\\n    decommission: async function(hostname){\\n        await ns.killall(hostname);\\n      },\\n    commission: async function(hostname) {\\n        ns.tprint(hostname, \\\" has been upgraded.\\\");\\n      },\\n    trace: async function(msg){\\n        ns.tprint(msg);\\n      }\\n  };\\n\\n  if (ns.args.length == 2 && ns.args[0] == \\\"quote\\\"){\\n    await quote(ns, 2**ns.args[1]);\\n  } else if (ns.args.length == 3 && ns.args[0] == \\\"buy\\\"){\\n    await buy(ns, ns.args[1], 2**ns.args[2]);\\n  } else if (ns.args.length == 2 && ns.args[0] == \\\"sell\\\"){\\n    await sell(ns, ns.args[1]);\\n  } else if (ns.args.length == 1 && ns.args[0] == \\\"upgrade\\\"){\\n    var manager = new VpsManager(ns, managerOptions);\\n    await manager.upgrade();\\n    ns.tprint(\\\"Done.\\\");\\n  } else {\\n    printHelp(ns);\\n  }\\n\\n}\",\"filename\":\"vps.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"install-thief.js\",\"url\":\"blob:file:///fad96448-df65-41fc-8dc9-7c1f8e06ccbd\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///57902721-8193-4a98-b06a-cd5a50bcef3c\"},{\"filename\":\"crawler.js\",\"url\":\"blob:file:///8f18b146-28d3-4119-9f22-259580497376\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"vps.js\",\"url\":\"blob:file:///cc69c413-92df-4402-bc7c-4e07d4b7a76d\"}],\"ramUsage\":16.35,\"server\":\"home\",\"_hash\":\"7418343b6a2c038f620e0d105a64312bbe063150c5496af8e534bc8f6f26e3ff\",\"moduleSequenceNumber\":70389}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { forEach, forEachAsync } from \\\"./utils.js\\\";\\nimport { Crawler } from \\\"./crawler.js\\\";\\n\\nexport async function listFiles(ns, hostname, pattern){\\n  var files = await ns.ls(hostname, pattern);\\n  forEach(files, function(i, e){\\n    ns.tprint(hostname + \\\"/\\\" + e);\\n  });\\n}\\n\\nexport async function main(ns){\\n  var pattern;\\n  if (ns.args.length == 0){\\n    pattern = \\\"\\\";\\n    ns.tprint(\\\"Searching\\\");\\n  } else {\\n    pattern = ns.args[0];\\n    ns.tprint(\\\"Searching with pattern \\\" + pattern);\\n  }\\n  var crawler = new Crawler(ns, {\\n    resultLimit: 1000,\\n    rootHost: \\\"home\\\"\\n  });\\n  var servers = await crawler.crawl();\\n  await forEachAsync(servers, async function(i, e){\\n    await listFiles(ns, e, pattern);\\n  });\\n  ns.tprint(\\\"Done.\\\");\\n}\",\"filename\":\"file-recon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///c67377bf-da20-4f4e-b7a1-9e282158882d\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///c67377bf-da20-4f4e-b7a1-9e282158882d\"},{\"filename\":\"crawler.js\",\"url\":\"blob:file:///559ccc56-7e13-41af-b337-a5e251bcb875\"},{\"filename\":\"file-recon.js\",\"url\":\"blob:file:///d4a26222-0424-4707-848c-cc1a8dc8c3d8\"}],\"ramUsage\":2,\"server\":\"home\",\"_hash\":\"7103908f2c782029167b2d492223b33e8437563f85b452f643bbe0fd693585de\",\"moduleSequenceNumber\":52175}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nfunction defaultOptions(){\\n  return {\\n    maxNodes: 32,\\n    maxNodeLevel: 200,\\n    maxNodeRam: 64,\\n    maxNodeCores: 16\\n  };\\n};\\n\\nexport function NodeNurse(ns, options){\\n  \\n  var maxNodes = options.maxNodes;\\n  var maxNodeLevel = options.maxNodeLevel;\\n  var maxNodeRam = options.maxNodeRam;\\n  var maxNodeCores = options.maxNodeCores;\\n  \\n  async function buyNodes(){\\n    while(await ns.hacknet.numNodes() < maxNodes){\\n      var currentFunds = await ns.getServerMoneyAvailable(\\\"home\\\");\\n      var cost = await ns.hacknet.getPurchaseNodeCost();\\n      if (cost > currentFunds) break;\\n      var newNode = await ns.hacknet.purchaseNode();\\n      if (newNode < 0) {\\n        ns.print(\\\"Attempted node purchase failed\\\");\\n        break;\\n      }\\n      await ns.sleep(100);\\n    }\\n  }\\n  \\n  async function increaseOn(nodeId, max, getSize, getCost, upgrade){\\n    while(await getSize(nodeId) < max){\\n      var currentFunds = await ns.getServerMoneyAvailable(\\\"home\\\");\\n      var cost = await getCost(nodeId, 1);\\n      if (cost > currentFunds) break;\\n      var success = await upgrade(nodeId);\\n      if (!success) {\\n        ns.print(\\\"Attempted upgrade failed\\\");\\n        break\\n      };\\n      await ns.sleep(100);\\n    }\\n  }\\n  \\n  async function increase(max, getSize, getCost, upgrade){\\n    var nodeCount = await ns.hacknet.numNodes();\\n    for(var i = 0; i < nodeCount; i++){\\n      await increaseOn(i, max, getSize, getCost, upgrade);\\n      await ns.sleep(100);\\n    }\\n  }\\n  \\n  async function getCoreCount(i){\\n    var stats = await ns.hacknet.getNodeStats(i);\\n    return stats.cores;\\n  }\\n  \\n  async function getRamSize(i){\\n    var stats = await ns.hacknet.getNodeStats(i);\\n    return stats.ram;\\n  }\\n  \\n  async function getLevel(i){\\n    var stats = await ns.hacknet.getNodeStats(i);\\n    return stats.level;\\n  }\\n  \\n  async function maintain(){\\n    await buyNodes();\\n    await increase(\\n      maxNodeCores,\\n      getCoreCount,\\n      ns.hacknet.getCoreUpgradeCost,\\n      ns.hacknet.upgradeCore);\\n    await increase(\\n      maxNodeRam,\\n      getRamSize,\\n      ns.hacknet.getRamUpgradeCost,\\n      ns.hacknet.upgradeRam);\\n    await increase(\\n      maxNodeLevel,\\n      getLevel,\\n      ns.hacknet.getLevelUpgradeCost,\\n      ns.hacknet.upgradeLevel);\\n  }\\n  \\n  return {\\n    maintain\\n  };\\n  \\n}\\n\\nexport async function main(ns){\\n  var nurse = new NodeNurse(ns, defaultOptions());\\n  for(;;){\\n    await nurse.maintain();\\n    await ns.sleep(60 * 1000);\\n  }\\n}\",\"filename\":\"node-nurse.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"node-nurse.js\",\"url\":\"blob:file:///ba3b607e-ff64-462a-a7c3-d64c3ce4d8de\"}],\"ramUsage\":5.7,\"server\":\"home\",\"_hash\":\"953eac41a3417854cb916c8a415d5bcb7d3878b9339cc2623392676e01965024\",\"moduleSequenceNumber\":52176}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { forEach, pushAll } from \\\"./utils.js\\\";\\n\\nfunction HostCollection(hostnames){\\n  \\n  var items = [...hostnames];\\n  \\n  function addAll(newHostnames){\\n    pushAll(items, newHostnames);\\n  }\\n  \\n  function notContains(hostname){\\n    return items.indexOf(hostname) < 0;\\n  }\\n  \\n  return {\\n    addAll,\\n    notContains\\n  }\\n  \\n}\\n\\nfunction ServerRoute (ns, knownHosts, parentRoute, hostname){\\n  \\n  function getRoute(){\\n    return [hostname].concat([...parentRoute]);\\n  }\\n  \\n  async function findChildren(){\\n    var neighbours = await ns.scan(hostname);\\n    var newHosts = neighbours.filter(knownHosts.notContains);\\n    knownHosts.addAll(newHosts);\\n    var children = newHosts.map(function(childHostname){\\n        return new ServerRoute(ns, knownHosts, getRoute(), childHostname);\\n      });\\n    return children;\\n  }\\n  \\n  return {\\n    hostname,\\n    getRoute,\\n    findChildren\\n  }\\n  \\n}\\n\\nexport function TraceRoute (ns, options){\\n  \\n  var resultLimit = options.resultLimit;\\n  var rootHost = options.rootHost;\\n  \\n  async function crawl(){\\n    \\n    var knownHostCollection = new HostCollection([rootHost]);\\n    var rootRoute = new ServerRoute(ns, knownHostCollection, [], rootHost);\\n    var unscannedHosts = [rootRoute];\\n    var scannedHosts = [];\\n    \\n    while(unscannedHosts.length > 0){\\n      \\n      var nextHost = unscannedHosts.pop();\\n      \\n      var resultLimitReached =\\n        unscannedHosts.length > resultLimit ||\\n        scannedHosts.length > resultLimit;\\n      if(resultLimitReached){\\n        ns.print(\\\"Trace route result limit reached.\\\");\\n        break;\\n      }\\n      \\n      var children = await nextHost.findChildren();\\n      pushAll(unscannedHosts, children);\\n      scannedHosts.push(nextHost);\\n      \\n    }\\n    \\n    return scannedHosts;\\n    \\n  }\\n  \\n  return {\\n    crawl\\n  };\\n  \\n}\\n\\nfunction printRoute(ns, route){\\n  var hostnames = route.getRoute().reverse();\\n  ns.tprint(hostnames.join(\\\" -> \\\"));\\n}\\n\\nexport async function main(ns){\\n  \\n  var traceRoute = new TraceRoute(ns, {\\n    resultLimit: 1000,\\n    rootHost: \\\"home\\\"\\n  });\\n  var allRoutes = await traceRoute.crawl();\\n  \\n  var matchingRoutes;\\n  if(ns.args.length == 0){\\n    matchingRoutes = allRoutes;\\n  } else {\\n    var targetHostname = ns.args[0];\\n    matchingRoutes = allRoutes\\n      .filter(function(route){\\n        return route.hostname == targetHostname;\\n      });\\n  }\\n  \\n  forEach(matchingRoutes, function(i, route){\\n    printRoute(ns, route);\\n  });\\n\\n}\",\"filename\":\"traceroute.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"traceroute.js\",\"url\":\"blob:file:///2c14130a-5fc2-4e11-9ba6-dd5f05456b96\"}],\"ramUsage\":1.8,\"server\":\"home\",\"_hash\":\"801854d2a05ae15a620a117915605ce70e009bf383a4c43483f03f09fba5d320\",\"moduleSequenceNumber\":55107}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { forEach, forEachAsync } from \\\"./utils.js\\\";\\nimport { Crawler } from \\\"./crawler.js\\\";\\n\\n// Lists the rooted servers in order of max money descending\\nexport async function findBestTargets(ns, hostnames, options){\\n  return await findBestServers(\\n    ns,\\n    hostnames,\\n    compareTargets,\\n    await generateFilter(options),\\n    options.limit);\\n}\\n\\nexport function ServerFinder(ns, options){\\n  \\n  var hostnames = options.hostnames;\\n  var resultLimit = options.limit;\\n  var onlyWithRootAccess = options.onlyWithRootAccess;\\n  var onlyWithMoney = options.onlyWithMoney;\\n  var onlyNotMine = options.onlyNotMine;\\n  var onlyNotHome = options.onlyNotHome;\\n    \\n  async function profileServers(){\\n    var profiles = [];\\n    await forEachAsync(hostnames, async function(i, e){\\n      profiles.push({\\n        hostname: e,\\n        hasRootAccess: await ns.hasRootAccess(e),\\n        maxMoney: await ns.getServerMaxMoney(e),\\n        maxRam: await ns.getServerMaxRam(e),\\n        minSecurity: await ns.getServerMinSecurityLevel(e),\\n      });\\n    });\\n    return profiles;\\n  }\\n  \\n  function getHostname(profile){\\n    return profile.hostname;\\n  }\\n  \\n  async function generateFilter(){\\n    \\n    var filters = [];\\n    \\n    if(onlyWithMoney){\\n      filters.push(function(serverProfile){\\n        return serverProfile.maxMoney > 0;\\n      });\\n    }\\n    \\n    if(onlyWithRootAccess){\\n      filters.push(function(serverProfile){\\n        return serverProfile.hasRootAccess;\\n      });\\n    }\\n    \\n    if(onlyNotMine){\\n      var myServers = await ns.getPurchasedServers();\\n      myServers.push(\\\"home\\\");\\n      filters.push(function(serverProfile){\\n        return myServers.indexOf(serverProfile.hostname) < 0;\\n      });\\n    }\\n    \\n    if(onlyNotHome){\\n      filters.push(function(serverProfile){\\n        return serverProfile.hostname != \\\"home\\\";\\n      });\\n    }\\n    \\n    return function(serverProfile){\\n      var passing = true;\\n      forEach(filters, function(i, e){\\n        passing = passing && e(serverProfile);\\n      });\\n      return passing;\\n    };\\n    \\n  }\\n  \\n  function scoreTarget(profile){\\n    return profile.maxRam / (1 + profile.minSecurity);\\n  }\\n  \\n  function scoreHost(profile){\\n    return profile.maxRam;\\n  }\\n  \\n  function compareTargetsDesc(a, b){\\n    return scoreTarget(b) - scoreTarget(a);\\n  }\\n  \\n  function compareHostsDesc(a, b){\\n    return scoreHost(b) - scoreHost(a);\\n  }\\n  \\n  async function findBest(compareDesc){\\n    var profiles = await profileServers();\\n    var filter = await generateFilter();\\n    return profiles\\n      .filter(filter)\\n      .sort(compareDesc)\\n      .slice(0, resultLimit || Infinity)\\n      .map(getHostname);\\n  }\\n  \\n  async function findBestTargets(){\\n    return await findBest(compareTargetsDesc);\\n  }\\n  \\n  async function findBestHosts(){\\n    return await findBest(compareHostsDesc);\\n  }\\n  \\n  return {\\n    findBestTargets,\\n    findBestHosts\\n  };\\n  \\n}\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  find-server.js host <limit>\\\");\\n  ns.tprint(\\\"  find-server.js target <limit>\\\");\\n}\\n\\nexport async function main(ns){\\n  \\n  var findHosts = ns.args.length == 2 && ns.args[0] == \\\"host\\\";\\n  var findTargets = ns.args.length == 2 && ns.args[0] == \\\"target\\\";\\n  var showHelp = !findHosts && !findTargets;\\n  \\n  if(showHelp){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var crawler = new Crawler(ns, {\\n    resultLimit: 1000,\\n    rootHost: \\\"home\\\"\\n  });\\n  var servers = await crawler.crawl();\\n  \\n  var serverFinder = new ServerFinder(ns, {\\n    hostnames: servers,\\n    limit: ns.args[1],\\n    onlyWithMoney: findTargets,\\n    onlyWithRootAccess: true,\\n    onlyNotMine: findTargets,\\n    onlyNotHome: true\\n  });\\n  \\n  var results;\\n  if (findHosts){\\n    results = await serverFinder.findBestHosts();\\n  } else {\\n    results = await serverFinder.findBestTargets();\\n  }\\n  \\n  forEach(results, function(i, e){\\n    ns.tprint(i+1, \\\": \\\", e);\\n  });\\n  \\n}\",\"filename\":\"find-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///57902721-8193-4a98-b06a-cd5a50bcef3c\"},{\"filename\":\"crawler.js\",\"url\":\"blob:file:///8f18b146-28d3-4119-9f22-259580497376\"},{\"filename\":\"find-server.js\",\"url\":\"blob:file:///9b744be6-a7c2-4f84-bef0-b270cc45e37b\"}],\"ramUsage\":4.4,\"server\":\"home\",\"_hash\":\"9871a630f8c4dd806ae2ce469e6bf83c6aa349e229985a103b223a386ecb0d7a\",\"moduleSequenceNumber\":52196}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { Cache } from \\\"cache.js\\\";\\nimport { DatabaseClient } from \\\"database-client.js\\\"\\nimport {\\n    safeLoop,\\n    portSend,\\n    portTryReceive,\\n    portPeek,\\n    portClear\\n  } from \\\"utils.js\\\";\\n\\nfunction DatabaseResponse(request, value){\\n  \\n  return {\\n    type: \\\"response\\\",\\n    channel: request.channel,\\n    database: request.database,\\n    key: request.key,\\n    value: value\\n  }\\n  \\n}\\n\\nfunction DatabaseServer(ns){\\n  \\n  var responseTTL = 5000;\\n  var pollPeriod = 10;\\n  var lastResponseChannel = null;\\n  var lastResponseLife = 0;\\n  \\n  function clearResponseTimeout(){\\n    lastResponseChannel = null;\\n    lastResponseLife = 0;\\n  }\\n  \\n  async function serviceReadRequest(request){\\n    var cache = new Cache(ns, \\\"db-\\\" + request.database);\\n    var cacheCtxt = await cache.open();\\n    var value = cacheCtxt.load(request.key);\\n    var response = DatabaseResponse(request, value);\\n    await portSend(ns, \\\"db\\\", response);\\n  }\\n  \\n  async function serviceWriteRequest(request){\\n    var cache = new Cache(ns, \\\"db-\\\" + request.database);\\n    var cacheCtxt = await cache.open();\\n    cacheCtxt.save(request.key, request.value);\\n  }\\n  \\n  async function serviceResponse(response){\\n    if(response.channel == lastResponseChannel){\\n      lastResponseLife += pollPeriod;\\n    } else {\\n      lastResponseLife = 0;\\n    }\\n    lastResponseChannel = response.channel;\\n    if (lastResponseLife > responseTTL){\\n      await portTryReceive(ns, \\\"db\\\");\\n    }\\n  }\\n  \\n  async function run(){\\n    await portClear(ns, \\\"db\\\");\\n    for(;;){\\n      \\n      var message = await portPeek(ns, \\\"db\\\");\\n      if (message == \\\"NULL PORT DATA\\\") {\\n        await ns.sleep(10*pollPeriod);\\n      } else if (message.type == \\\"read\\\") {\\n        ns.print(\\\"Read request: \\\", message);\\n        await portTryReceive(ns, \\\"db\\\");\\n        await serviceReadRequest(message);\\n        await ns.sleep(pollPeriod);\\n      } else if (message.type == \\\"write\\\") {\\n        ns.print(\\\"Write request: \\\", message);\\n        await portTryReceive(ns, \\\"db\\\");\\n        await serviceWriteRequest(message);\\n        await ns.sleep(pollPeriod);\\n      } else if (message.type == \\\"response\\\"){\\n        ns.print(\\\"Unconsumed response: \\\", message);\\n        await serviceResponse(message);\\n        await ns.sleep(pollPeriod);\\n      } else {\\n        ns.print(\\\"Bad message: \\\", message);\\n        await portTryReceive(ns, \\\"db\\\");\\n      }\\n      \\n    }\\n  }\\n  \\n  return {\\n    run: run\\n  }\\n  \\n}\\n\\nexport async function main(ns){\\n  if(ns.args.length == 1 && ns.args[0] == \\\"server\\\"){\\n    var server = new DatabaseServer(ns);\\n    await server.run();\\n  } else if (ns.args.length == 3 && ns.args[0] == \\\"read\\\"){\\n    var database = ns.args[1];\\n    var key = ns.args[2];\\n    var client = new DatabaseClient(ns, database);\\n    var result = await client.read(key);\\n    ns.tprint(result);\\n  } else if (ns.args.length == 4 && ns.args[0] == \\\"write\\\"){\\n    var database = ns.args[1];\\n    var key = ns.args[2];\\n    var value = ns.args[3];\\n    var client = new DatabaseClient(ns, database);\\n    await client.write(key, value);\\n  } else {\\n    ns.tprint(\\\"Usage:\\\");\\n    ns.tprint(\\\"  database.js server\\\");\\n    ns.tprint(\\\"  database.js read <database> <key>\\\");\\n    ns.tprint(\\\"  database.js write <database> <key> <value>\\\");\\n  }\\n}\",\"filename\":\"database.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"cache.js\",\"url\":\"blob:file:///97d096f0-4230-4d44-adff-5848b25dc87b\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"database-client.js\",\"url\":\"blob:file:///8c7747e5-a853-4198-bc4c-49613ca779b2\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"database.js\",\"url\":\"blob:file:///d959842f-4700-4ab2-a532-b07c40f7073a\"}],\"ramUsage\":2.65,\"server\":\"home\",\"_hash\":\"4e40dae1298784a72e33175ab484ddcccb2039b0a4e47674f975079b9246a636\",\"moduleSequenceNumber\":70269}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { portSend, portTryReceive, portPeek } from \\\"./utils.js\\\";\\n\\nasync function DatabaseReadRequest(ns, database, key){\\n  \\n  var channel =\\n    await ns.getHostname() +\\n    \\\"|\\\" + await ns.getScriptName() +\\n    \\\"|\\\" + ns.args.join(\\\"|\\\") +\\n    \\\"|\\\" + database\\n    \\\"|\\\" + key;\\n  \\n  return {\\n    type: \\\"read\\\",\\n    channel: channel,\\n    database: database,\\n    key: key\\n  }\\n  \\n}\\n\\nasync function DatabaseWriteRequest(ns, database, key, value){\\n  \\n  var channel =\\n    await ns.getHostname() +\\n    \\\"|\\\" + await ns.getScriptName() +\\n    \\\"|\\\" + ns.args.join(\\\"|\\\") +\\n    \\\"|\\\" + database\\n    \\\"|\\\" + key;\\n  \\n  return {\\n    type: \\\"write\\\",\\n    channel: channel,\\n    database: database,\\n    key: key,\\n    value: value\\n  }\\n  \\n}\\n\\nexport function DatabaseClient(ns, database){\\n  \\n  async function sendReadRequest(key){\\n    var request = await DatabaseReadRequest(ns, database, key);\\n    await portSend(ns, \\\"db\\\", request);\\n    return request;\\n  }\\n  \\n  async function sendWriteRequest(key, value){\\n    var request = await DatabaseWriteRequest(ns, database, key, value);\\n    await portSend(ns, \\\"db\\\", request);\\n    return request;\\n  }\\n  \\n  async function awaitReadResponse(request){\\n    var timeout = 5000;\\n    var pollPeriod = 10;\\n    for(var time = 0; time < timeout; time += pollPeriod){\\n      await ns.sleep(pollPeriod);\\n      var message = await portPeek(ns, \\\"db\\\");\\n      var myResponse =\\n        message != null &&\\n        message.type == \\\"response\\\" &&\\n        message.channel == request.channel;\\n      if (myResponse){\\n        await portTryReceive(ns, \\\"db\\\");\\n        return message.value;\\n      }\\n    }\\n    ns.print(\\\"Database read timeout: \\\", request);\\n  }\\n  \\n  async function read(key){\\n    var request = await sendReadRequest(key);\\n    return await awaitReadResponse(request);\\n  }\\n  \\n  async function write(key, value){\\n    var request = await sendWriteRequest(key, value);\\n  }\\n  \\n  return {\\n    read: read,\\n    write: write\\n  }\\n  \\n}\",\"filename\":\"database-client.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.65,\"server\":\"home\",\"_hash\":\"371c761907ab123a50d26a1508e419491a89b031d2057c168758c65f601c4daa\",\"moduleSequenceNumber\":52180}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop, forEachAsync } from \\\"./utils.js\\\";\\n\\nvar transactionCost = 100*1000;\\nvar packetSize = 1000*1000*1000;\\nvar buyInGrowth = 0.55;\\nvar sellGrowth = 0.5;\\n  \\nasync function analyseMarket(ns){\\n  var symbols = await ns.stock.getSymbols();\\n  var profiles = [];\\n  await forEachAsync(symbols, async function(i, e){\\n    var position = await ns.stock.getPosition(e);\\n    var ownedShares = position[0];\\n    var maxShares = await ns.stock.getMaxShares(e);\\n    profiles.push({\\n      symbol: e,\\n      shares: ownedShares,\\n      askPrice: await ns.stock.getAskPrice(e),\\n      bidPrice: await ns.stock.getBidPrice(e),\\n      growthChance: await ns.stock.getForecast(e),\\n      maxShares: maxShares,\\n      availableShares: maxShares - ownedShares\\n    });\\n  });\\n  return profiles;\\n}\\n\\nfunction bestForecast(profiles){\\n  return profiles\\n    .filter(function(profile){\\n      var maxPurchase = profile.askPrice * profile.availableShares;\\n      return maxPurchase > packetSize;\\n    })\\n    .sort(function(a,b){\\n      return b.growthChance - a.growthChance\\n    })\\n    [0];\\n}\\n\\nasync function sellRisky(ns, profiles){\\n  await forEachAsync(profiles, async function(i ,e){\\n    var sellValue = e.bidPrice * e.shares;\\n    var sell =\\n      sellValue > transactionCost &&\\n      e.growthChance <= sellGrowth;\\n    if(sell){\\n      ns.tprint(\\n        \\\"Selling \\\",\\n        e.symbol,\\n        \\\" \\\",\\n        ns.nFormat(e.shares * e.bidPrice, '($ 0.00 a)'));\\n      await ns.stock.sell(e.symbol, e.shares);\\n    }\\n  });\\n}\\n\\nasync function buyBest(ns, profiles){\\n  var funds = await ns.getServerMoneyAvailable(\\\"home\\\");\\n  var bestStock = bestForecast(profiles);\\n  if(bestStock.growthChance > buyInGrowth){\\n    var maxPurchase = bestStock.askPrice * bestStock.availableShares;\\n    var maxPackets = Math.floor(maxPurchase / packetSize);\\n    var fundablePackets = Math.floor((funds - transactionCost) / packetSize);\\n    var packets = Math.min(maxPackets, fundablePackets);\\n    var shares = Math.floor(packets * packetSize / bestStock.askPrice);\\n    if(packets > 0){\\n      ns.tprint(\\n        \\\"Buying \\\",\\n        bestStock.symbol,\\n        \\\" \\\",\\n        ns.nFormat(shares * bestStock.askPrice, '($ 0.00 a)'));\\n      await ns.stock.buy(bestStock.symbol, shares);\\n    }\\n  }\\n}\\n\\nexport async function main(ns){\\n  \\n  var f;\\n  if(ns.args.length == 1 && ns.args[0] == \\\"buy\\\"){\\n    f = buyBest;\\n  } else if(ns.args.length == 1 && ns.args[0] == \\\"sell\\\"){\\n    f = sellRisky;\\n  } else {\\n    ns.tprint(\\\"Usage:\\\");\\n    ns.tprint(\\\"  bubble-rider.js buy\\\");\\n    ns.tprint(\\\"  bubble-rider.js sell\\\");\\n    return;\\n  }\\n  \\n  for(;;){\\n    var analysis = await analyseMarket(ns);\\n    await f(ns, analysis);\\n    await ns.sleep(6*1000);\\n  }\\n  \\n}\",\"filename\":\"bubble-rider.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"bubble-rider.js\",\"url\":\"blob:file:///02b913c1-b097-4b71-9f8b-569e79b66b1f\"}],\"ramUsage\":19.2,\"server\":\"home\",\"_hash\":\"6ae90ecdc292a6aad6a05c257f0ea96b4b93dc9f9e10fc57f3ec3ea1b135a9df\",\"moduleSequenceNumber\":84685}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { DatabaseClient } from \\\"./database-client.js\\\";\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Cell (ns, options) {\\n  \\n  var database = options.database;\\n  var localInstanceName = options.localInstanceName;\\n  \\n  async function dbRead(subkey){\\n    var globalInstanceName = await ns.getHostname() + \\\"|\\\" + localInstanceName;\\n    return await database.read(globalInstanceName + \\\"-\\\" + subkey);\\n  }\\n  \\n  async function dbWrite(subkey, data){\\n    var globalInstanceName = await ns.getHostname() + \\\"|\\\" + localInstanceName;\\n    return await database.write(globalInstanceName + \\\"-\\\" + subkey, data);\\n  }\\n  \\n  async function executeInstruction(instruction){\\n    var operation = instruction.operation;\\n    var target = instruction.target;\\n    switch(operation){\\n      case \\\"grow\\\":\\n        await ns.grow(target);\\n        break;\\n      case \\\"weaken\\\":\\n        await ns.weaken(target);\\n        break;\\n      case \\\"hack\\\":\\n        await ns.hack(target);\\n        break;\\n      default:\\n        await ns.sleep(1000);\\n        ns.print(\\\"Unknown operation: \\\", operation);\\n        break;\\n    }\\n  }\\n  \\n  async function execute(){\\n    \\n    var commandStatus = await dbRead(\\\"status\\\");\\n    var commandInstruction = await dbRead(\\\"instruction\\\");\\n    if(commandStatus == \\\"continuous\\\" && commandInstruction != null){\\n      ns.print(\\\"Continuous: \\\", commandInstruction);\\n      await executeInstruction(commandInstruction);\\n    } else if(commandStatus == \\\"oneshot\\\" && commandInstruction != null) {\\n      ns.print(\\\"One Shot: \\\", commandInstruction);\\n      await executeInstruction(commandInstruction);\\n      await dbWrite(\\\"status\\\", \\\"complete\\\");\\n    } else {\\n      await ns.sleep(6*1000); // Idle\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, async function(){\\n      await execute();\\n    });\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <database> <local instance name>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 2){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var databaseName = ns.args[0];\\n  var instanceName = ns.args[1];\\n  var database = new DatabaseClient(ns, databaseName);\\n  var cell = new Cell(ns, {\\n    database: database,\\n    localInstanceName: instanceName\\n  });\\n  await cell.run();\\n  \\n}\",\"filename\":\"cell.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///57902721-8193-4a98-b06a-cd5a50bcef3c\"},{\"filename\":\"database-client.js\",\"url\":\"blob:file:///feb4caa5-ebf5-4e2b-9e72-f9edcb78f078\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///57902721-8193-4a98-b06a-cd5a50bcef3c\"},{\"filename\":\"cell.js\",\"url\":\"blob:file:///59594cbd-2ea0-48a3-8288-62ce694f50ae\"}],\"ramUsage\":3.05,\"server\":\"cell-test\",\"_hash\":\"3ed2a6a34a7748daf4e428d73d427085d9de8778760b632eb70679a2994c9438\",\"moduleSequenceNumber\":52182}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { DatabaseClient } from \\\"./database-client.js\\\";\\nimport { forEachAsync } from \\\"./utils.js\\\";\\n\\nexport function InstallCell (ns){\\n  \\n  var maxInstances = 8;\\n  var databaseName = \\\"cell\\\";\\n  var mainScript = \\\"cell.js\\\";\\n  var scripts = [\\n    \\\"utils.js\\\",\\n    \\\"database-client.js\\\",\\n    \\\"cell.js\\\"\\n  ];\\n  \\n  async function install(hostname){\\n    \\n    await forEachAsync(scripts, async function(i,e){\\n      await ns.scriptKill(e, hostname);\\n    });\\n    await forEachAsync(scripts, async function(i,e){\\n      await ns.scp(e, hostname);\\n    });\\n    \\n    var instances = [];\\n    var ramRequired = await ns.getScriptRam(mainScript);\\n    var ramMax = await ns.getServerMaxRam(hostname);\\n    var ramUsed = await ns.getServerUsedRam(hostname);\\n    var ramAvailable = ramMax - ramUsed;\\n    var totalThreadCount = Math.floor(ramAvailable / ramRequired);\\n    var instanceCount = Math.min(maxInstances, totalThreadCount);\\n    for(var i = 0; i < instanceCount; i++){\\n      var threadCount = Math.floor(totalThreadCount / instanceCount);\\n      var instanceName = \\\"cell-\\\" + i;\\n      await ns.sleep(100);\\n      await ns.exec(\\n        mainScript,\\n        hostname,\\n        threadCount,\\n        databaseName,\\n        instanceName);\\n      instances.push({\\n        hostname,\\n        instance: instanceName,\\n        threads: threadCount\\n      });\\n    }\\n    \\n    var database = new DatabaseClient(ns, databaseName);\\n    await database.write(\\\"cells\\\", instances);\\n    \\n  }\\n  \\n  async function uninstall(hostname){\\n    await forEachAsync(scripts, async function(i,e){\\n      await ns.scriptKill(e, hostname);\\n    });\\n    await forEachAsync(scripts, async function(i,e){\\n      await ns.rm(e, hostname);\\n    });\\n  }\\n  \\n  return {\\n    install,\\n    uninstall\\n  };\\n  \\n}\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  install-cell.js install <host>\\\");\\n  ns.tprint(\\\"  install-cell.js uninstall <host>\\\");\\n}\\n\\nexport async function main(ns) {\\n  var installCell = new InstallCell(ns);\\n  if(ns.args.length == 2 && ns.args[0] == \\\"install\\\"){\\n    await installCell.install(ns.args[1]);\\n  } else if(ns.args.length == 2 && ns.args[0] == \\\"uninstall\\\"){\\n    await installCell.uninstall(ns.args[1]);\\n  } else {\\n    printHelp(ns);\\n  }\\n}\",\"filename\":\"install-cell.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"database-client.js\",\"url\":\"blob:file:///8c7747e5-a853-4198-bc4c-49613ca779b2\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"install-cell.js\",\"url\":\"blob:file:///36c5904b-e18f-4537-abf5-c14cd67935cc\"}],\"ramUsage\":5.75,\"server\":\"home\",\"_hash\":\"50080743ba98f3e2694c548df85d8eb26315ecb6148fa582fddc51b9aa344bbc\",\"moduleSequenceNumber\":72870}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { Crawler } from \\\"crawler.js\\\";\\nimport { DatabaseClient } from \\\"database-client.js\\\";\\nimport { ServerFinder } from \\\"find-server.js\\\";\\nimport { forEach, forEachAsync, GreedyAllocation } from \\\"utils.js\\\";\\n\\nexport function CellDirector(ns, options){\\n  \\n  var effortDistribution = [64,32,16,8,4,2,1,1];\\n  var database = options.database;\\n  var crawler = options.crawler;\\n  \\n  function sum(array){\\n    return array.reduce(function (a, b) { return a + b; }, 0);\\n  }\\n  \\n  function scaleDistribution(reference, scale, length){\\n    \\n    // Truncate and scale the \\n    var distTruncated = reference.slice(0, length);\\n    var referenceTotal = sum(distTruncated);\\n    var dist = distTruncated\\n      .map(function(x){\\n        return x * scale / referenceTotal;\\n      });\\n    \\n    // If the distribution is too short, add some zeros\\n    var extension = [];\\n    for(var i = 0; i < length - dist.length; i++){\\n      extension.push(0);\\n    }\\n    \\n    return dist.concat(extension);\\n  }\\n  \\n  async function setWork(target, cells){\\n    var cellStatus = \\\"continuous\\\";\\n    var cellInstruction = {\\n      operation: \\\"weaken\\\",\\n      target: target\\n    };\\n    await forEachAsync(cells, async function(i, e){\\n      var cellGlobalName = e.hostname + \\\"|\\\" + e.instance;\\n      await database.write(cellGlobalName + \\\"-status\\\", cellStatus);\\n      await database.write(cellGlobalName + \\\"-instruction\\\", cellInstruction);\\n    });\\n  }\\n  \\n  async function generateSchedule(cells, servers){\\n    \\n    // Identify some targets\\n    var targetFinder = new ServerFinder(ns, {\\n      hostnames: servers,\\n      limit: effortDistribution.length,\\n      onlyWithRootAccess: true,\\n      onlyNotHome: true,\\n      onlyWithMoney: true,\\n      onlyNotMine: true\\n    });\\n    var bestTargets = await targetFinder.findBestTargets();\\n    \\n    // Allcate threads to targets\\n    var totalThreads = sum(cells.map(function(cell){ return cell.threads; }));\\n    var threadDistribution = scaleDistribution(\\n        effortDistribution,\\n        totalThreads,\\n        bestTargets.length);\\n    \\n    // Allocate worker Cells to targets\\n    var targetThreads = [];\\n    for(var i = 0; i < threadDistribution.length; i++){\\n      targetThreads.push({\\n        threads: threadDistribution[i],\\n        target: bestTargets[i]\\n      });\\n    }\\n    var allocator = new GreedyAllocation(\\n      targetThreads,\\n      function(targetThread){ return targetThread.threads; },\\n      cells,\\n      function(cell){ return cell.threads; });\\n    var allocation = allocator.allocate();\\n    \\n    // Return the schedule\\n    var schedule = [];\\n    forEach(allocation.allocations, function(i, e){\\n      schedule.push({\\n        target: e[0].target,\\n        cells: e[1]\\n      });\\n    });\\n    return schedule;\\n    \\n  }\\n  \\n  async function manage(){\\n    var cells = await database.read(\\\"cells\\\");\\n    var servers = await crawler.crawl();\\n    if (cells != null){\\n      var schedule = await generateSchedule(cells, servers);\\n      await forEachAsync(schedule, async function(i, e){\\n        await setWork(e.target, e.cells);\\n      });\\n    } else {\\n      ns.tprint(\\\"No Cells are registered.\\\");\\n    }\\n  }\\n  \\n  return {\\n    manage\\n  }\\n  \\n}\\n\\nexport async function main(ns) {\\n  var databaseName = \\\"cell\\\";\\n  var crawler = new Crawler(ns, {\\n    resultLimit: 1000,\\n    rootHost: \\\"home\\\"\\n  });\\n  var database = new DatabaseClient(ns, databaseName);\\n  var director = new CellDirector(ns, {\\n    database,\\n    crawler\\n  });\\n  await director.manage();\\n}\",\"filename\":\"cell-director.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///57902721-8193-4a98-b06a-cd5a50bcef3c\"},{\"filename\":\"crawler.js\",\"url\":\"blob:file:///8f18b146-28d3-4119-9f22-259580497376\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"database-client.js\",\"url\":\"blob:file:///8c7747e5-a853-4198-bc4c-49613ca779b2\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///57902721-8193-4a98-b06a-cd5a50bcef3c\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///57902721-8193-4a98-b06a-cd5a50bcef3c\"},{\"filename\":\"crawler.js\",\"url\":\"blob:file:///8f18b146-28d3-4119-9f22-259580497376\"},{\"filename\":\"find-server.js\",\"url\":\"blob:file:///4ed9693d-f942-44ff-a545-7f22f3631592\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"cell-director.js\",\"url\":\"blob:file:///02906ca8-eaf3-4afd-91e4-785ef1afa428\"}],\"ramUsage\":4.4,\"server\":\"home\",\"_hash\":\"094957d9f376dc220271e19b6eb39c5ffbe4abbdd56d1757ee88daf8378179e9\",\"moduleSequenceNumber\":74950}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"cell-test\",\"vps-absol\",\"vps-scorbunny\",\"vps-meowth\",\"vps-rattata\",\"vps-bonsly\",\"vps-diglet\",\"vps-vulpix\",\"vps-dragonite\",\"vps-pikachu\",\"vps-charmander\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"35.3.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.4,\"server\":\"ecorp\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85349}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"ecorp\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85351}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":48132821424,\"moneyMax\":1203320535600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1144,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"98.0.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.4,\"server\":\"megacorp\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85327}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"megacorp\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85329}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":45762772424,\"moneyMax\":1144069310600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1220,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-113166-BitRunners.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[66,78,133,199,192,119,155,120,130,66,9,156,198,124,131,142,181,19,181],\"reward\":{\"name\":\"BitRunners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"64.6.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.4,\"server\":\"b-and-a\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85240}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"b-and-a\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85242}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":16242380493,\"moneyMax\":406059512325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1021,\"serverGrowth\":60}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"42.9.1.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":125.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":362,\"ramUsage\":3.4,\"server\":\"blade\",\"threads\":37,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"blade\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85334}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"blade\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85333}}],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":39644509022,\"moneyMax\":991112725550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1139,\"serverGrowth\":67}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"80.4.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.4,\"server\":\"nwo\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85319}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"nwo\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85321}}],\"serversOnNetwork\":[\".\",\"megacorp\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":30453505349,\"moneyMax\":761337633725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1155,\"serverGrowth\":86}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"10.5.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.4,\"server\":\"clarkinc\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85345}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"clarkinc\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85347}}],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":17905887793,\"moneyMax\":447647194825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1115,\"serverGrowth\":61}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"69.8.8.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":125.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,111,185,148]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13997.838709201707,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":342,\"ramUsage\":3.4,\"server\":\"omnitek\",\"threads\":37,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"omnitek\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85247}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"omnitek\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85246}}],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":16228327646,\"moneyMax\":405708191150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1025,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"19.9.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.4,\"server\":\"4sigma\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85236}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"4sigma\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85238}}],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":22676151426,\"moneyMax\":566903785650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1202,\"serverGrowth\":84}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"69.1.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.4,\"server\":\"kuai-gong\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85336}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"kuai-gong\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85338}}],\"serversOnNetwork\":[\"helios\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":27833886914,\"moneyMax\":695847172850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1226,\"serverGrowth\":97}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"3.7.0.2\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":2046.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":344,\"ramUsage\":3.4,\"server\":\"fulcrumtech\",\"threads\":602,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"fulcrumtech\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85257}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"fulcrumtech\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85256}}],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1685504821,\"moneyMax\":42137620525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1116,\"serverGrowth\":87}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"22.3.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1593,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"88.6.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.4,\"server\":\"stormtech\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85232}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"stormtech\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85234}}],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1000779561,\"moneyMax\":25019489025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1030,\"serverGrowth\":69}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-99613.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a))())(()()()\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"29.0.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.4,\"server\":\"defcomm\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85222}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"defcomm\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85224}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":946094029,\"moneyMax\":23652350725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":976,\"serverGrowth\":51}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"65.6.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.4,\"server\":\"infocomm\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85226}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"infocomm\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85228}}],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":866481151,\"moneyMax\":21662028775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":910,\"serverGrowth\":39}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"45.1.1.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":360,\"ramUsage\":3.4,\"server\":\"helios\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"helios\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85315}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"helios\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85314}}],\"serversOnNetwork\":[\"microdyne\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":650189497,\"moneyMax\":16254737425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":880,\"serverGrowth\":70}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"1.6.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":13.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":359,\"ramUsage\":3.4,\"server\":\"vitalife\",\"threads\":4,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"vitalife\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85310}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"vitalife\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85309}}],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":706911109,\"moneyMax\":17672777725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":777,\"serverGrowth\":80}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"47.2.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.4,\"server\":\"icarus\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85353}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"icarus\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85355}}],\"serversOnNetwork\":[\"deltaone\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":918557774,\"moneyMax\":22963944350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":915,\"serverGrowth\":91}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"20.0.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":13.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,24,52,48]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2215.508528309606,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":357,\"ramUsage\":3.4,\"server\":\"univ-energy\",\"threads\":4,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"univ-energy\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85295}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"univ-energy\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85294}}],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1110995354,\"moneyMax\":27774883850,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":888,\"serverGrowth\":84}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"38.3.5.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":125.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,222,481,444]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20493.453886863852,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":343,\"ramUsage\":3.4,\"server\":\"titan-labs\",\"threads\":37,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"titan-labs\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85252}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"titan-labs\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85251}}],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":863262192,\"moneyMax\":21581554800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":822,\"serverGrowth\":63}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"95.6.7.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":13.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":358,\"ramUsage\":3.4,\"server\":\"microdyne\",\"threads\":4,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"microdyne\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85305}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"microdyne\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85304}}],\"serversOnNetwork\":[\"taiyang-digital\",\"helios\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":674066354,\"moneyMax\":16851658850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":864,\"serverGrowth\":90}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"42.0.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.4,\"server\":\"taiyang-digital\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85297}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"taiyang-digital\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85299}}],\"serversOnNetwork\":[\"univ-energy\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":837616603,\"moneyMax\":20940415075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":928,\"serverGrowth\":78}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"92.1.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.4,\"server\":\"galactic-cyber\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85359}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"galactic-cyber\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85361}}],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":782671826,\"moneyMax\":19566795650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":869,\"serverGrowth\":79}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"24.1.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.4,\"server\":\"aerocorp\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85212}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"aerocorp\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85214}}],\"serversOnNetwork\":[\"aevum-police\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1058468487,\"moneyMax\":26461712175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":921,\"serverGrowth\":59}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"13.6.1.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":61.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,216,1062,1134]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":33601.535777966106,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":345,\"ramUsage\":3.4,\"server\":\"omnia\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"omnia\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85262}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"omnia\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85261}}],\"serversOnNetwork\":[\"aerocorp\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":910321614,\"moneyMax\":22758040350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":929,\"serverGrowth\":66}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"79.6.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.4,\"server\":\"zb-def\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":55099}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"zb-def\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85357}}],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":1050986598,\"moneyMax\":26274664950,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":780,\"serverGrowth\":65}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"74.5.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.4,\"server\":\"applied-energetics\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":55086}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"applied-energetics\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85300}}],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":913263999,\"moneyMax\":22831599975,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":786,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"13.2.8.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":125.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":346,\"ramUsage\":3.4,\"server\":\"solaris\",\"threads\":37,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"solaris\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85267}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"solaris\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85266}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":780911216,\"moneyMax\":19522780400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":755,\"serverGrowth\":79}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-310454.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[163,180,164,151,129,62,127,185,184,200,81,131,121,39,8],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"48.3.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.4,\"server\":\"deltaone\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85291}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"deltaone\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85293}}],\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1528435791,\"moneyMax\":38210894775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":824,\"serverGrowth\":50}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-134326.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[3,-4,2,10,-10,-9,-5,-7,7,0,9,10,-1,1,-8,-6,-3,-8,9,9,2,-5,-3,-1,-1,10,10,4,0,8,4],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"15.0.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,54,117,108]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4984.894188696611,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":356,\"ramUsage\":3.4,\"server\":\"global-pharm\",\"threads\":9,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"global-pharm\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85289}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"global-pharm\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85288}}],\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1586621067,\"moneyMax\":39665526675,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":813,\"serverGrowth\":84}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"19.4.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.4,\"server\":\"nova-med\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":55095}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"nova-med\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85356}}],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1151822062,\"moneyMax\":28795551550,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":850,\"serverGrowth\":76}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"4.8.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.4,\"server\":\"zeus-med\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85218}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"zeus-med\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85220}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1346433083,\"moneyMax\":33660827075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":807,\"serverGrowth\":78}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"78.4.6.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":340,\"ramUsage\":3.4,\"server\":\"unitalife\",\"threads\":9,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"unitalife\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85216}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"unitalife\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85215}}],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1034232821,\"moneyMax\":25855820525,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":812,\"serverGrowth\":73}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"43.7.7.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":61.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,54,90,72]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6809.759372044073,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":355,\"ramUsage\":3.4,\"server\":\"lexo-corp\",\"threads\":18,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"lexo-corp\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85287}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"lexo-corp\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85286}}],\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":743538493,\"moneyMax\":18588462325,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":655,\"serverGrowth\":65}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"59.0.4.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":13.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,48,236,252]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7467.007950659117,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":366,\"ramUsage\":3.4,\"server\":\"rho-construction\",\"threads\":4,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"rho-construction\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85369}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"rho-construction\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85368}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":624176319,\"moneyMax\":15604407975,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":511,\"serverGrowth\":53}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"95.1.4.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,27,45,36]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3404.8796860220364,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":352,\"ramUsage\":3.4,\"server\":\"alpha-ent\",\"threads\":9,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"alpha-ent\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85280}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"alpha-ent\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85279}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":644145463,\"moneyMax\":16103636575,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":524,\"serverGrowth\":51}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"12.3.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,108,531,567]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16800.767888983053,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":339,\"ramUsage\":3.4,\"server\":\"aevum-police\",\"threads\":9,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"aevum-police\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85210}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"aevum-police\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85209}}],\"serversOnNetwork\":[\"zb-institute\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":337348478,\"moneyMax\":8433711950,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":424,\"serverGrowth\":40}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"52.3.3.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":61.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,108,234,216]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9969.788377393223,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":365,\"ramUsage\":3.4,\"server\":\"rothman-uni\",\"threads\":18,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"rothman-uni\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85367}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"rothman-uni\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85366}}],\"serversOnNetwork\":[\"comptek\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":36.36000000000001,\"minDifficulty\":17,\"moneyAvailable\":876563367.5552709,\"moneyMax\":5478806925,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":380,\"serverGrowth\":36}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"52.1.6.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":61.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,288,846,900]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":27150.040908596617,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":338,\"ramUsage\":3.4,\"server\":\"zb-institute\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"zb-institute\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85208}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"zb-institute\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85207}}],\"serversOnNetwork\":[\"netlink\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":878719043,\"moneyMax\":21967976075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":736,\"serverGrowth\":77}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"42.0.6.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":61.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,18,18]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2084.2730332583064,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":353,\"ramUsage\":3.4,\"server\":\"summit-uni\",\"threads\":18,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"summit-uni\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85282}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"summit-uni\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85281}}],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":220489272,\"moneyMax\":5512231800,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":450,\"serverGrowth\":41}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"0.2.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.4,\"server\":\"syscore\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":55058}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"syscore\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85278}}],\"serversOnNetwork\":[\"avmnite-02h\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":585404359,\"moneyMax\":14635108975,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":559,\"serverGrowth\":69}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"83.5.3.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":13.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,64,188,200]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6033.342424132572,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":364,\"ramUsage\":3.4,\"server\":\"catalyst\",\"threads\":4,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"catalyst\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85364}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"catalyst\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85363}}],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":478112129,\"moneyMax\":11952803225,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":420,\"serverGrowth\":50}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"97.7.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":13.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,4]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":463.17178516851254,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":370,\"ramUsage\":3.4,\"server\":\"the-hub\",\"threads\":4,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"the-hub\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85378}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"the-hub\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85377}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":35,\"minDifficulty\":12,\"moneyAvailable\":167804939,\"moneyMax\":4195123475,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":310,\"serverGrowth\":48}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-994103.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[44,181,56,25,18,103,181,153,146,130,179,46,5,71,85,97,20,21,3,159,112,32,45,108,159,42,137,167,144,106,115,200,189,64,7,141,174,69,4],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"12.6.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.4,\"server\":\"comptek\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":52684}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"comptek\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85365}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":229099640,\"moneyMax\":5727491000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":400,\"serverGrowth\":56}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"88.2.8.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":336,\"ramUsage\":3.4,\"server\":\"netlink\",\"threads\":9,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"netlink\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85201}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"netlink\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85200}}],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":397,\"serverGrowth\":51}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"91.8.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.4,\"server\":\"johnson-ortho\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":52675}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"johnson-ortho\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85362}}],\"serversOnNetwork\":[\"neo-net\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":71616636,\"moneyMax\":1790415900,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":255,\"serverGrowth\":52}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"23.4.7.6\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,6,13,12]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":553.8771320774015,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":372,\"ramUsage\":3.4,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"n00dles\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85382}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"n00dles\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85381}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":5.148,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"71.4.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":13.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":367,\"ramUsage\":3.4,\"server\":\"foodnstuff\",\"threads\":4,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"foodnstuff\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85371}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"foodnstuff\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85370}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":41.99999999999999,\"minDifficulty\":3,\"moneyAvailable\":50000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"38.4.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":13.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,4]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":463.17178516851254,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":348,\"ramUsage\":3.4,\"server\":\"sigma-cosmetics\",\"threads\":4,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"sigma-cosmetics\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85271}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"sigma-cosmetics\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85270}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":0,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"42.8.9.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":13.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":347,\"ramUsage\":3.4,\"server\":\"joesguns\",\"threads\":4,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"joesguns\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85269}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"joesguns\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85268}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":12.780000000000001,\"minDifficulty\":5,\"moneyAvailable\":2310172.444845907,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"92.8.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":331,\"ramUsage\":3.4,\"server\":\"zer0\",\"threads\":9,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"zer0\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85191}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"zer0\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85190}}],\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":46.548,\"minDifficulty\":8,\"moneyAvailable\":187500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"17.1.9.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":13.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,12,20,16]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1513.2798604542381,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":349,\"ramUsage\":3.4,\"server\":\"nectar-net\",\"threads\":4,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"nectar-net\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85273}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"nectar-net\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85272}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":18.908,\"minDifficulty\":7,\"moneyAvailable\":2865072.503947846,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"86.7.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,9,9]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1042.1365166291532,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":350,\"ramUsage\":3.4,\"server\":\"neo-net\",\"threads\":9,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"neo-net\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85275}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"neo-net\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85274}}],\"serversOnNetwork\":[\"nectar-net\",\"comptek\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":12.264,\"minDifficulty\":8,\"moneyAvailable\":125000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"92.1.1.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":61.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":335,\"ramUsage\":3.4,\"server\":\"silver-helix\",\"threads\":18,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"silver-helix\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85199}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"silver-helix\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85198}}],\"serversOnNetwork\":[\"CSEC\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":29.533999999999995,\"minDifficulty\":10,\"moneyAvailable\":24313931.312644236,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-948739.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[144,88,78,49,11,2,3,160,179,72,46,94,32,82,135,191,94,82,2,169,126],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"88.1.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":13.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,48,236,252]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7467.007950659117,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":333,\"ramUsage\":3.4,\"server\":\"hong-fang-tea\",\"threads\":4,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"hong-fang-tea\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85195}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"hong-fang-tea\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85194}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":13.167999999999996,\"minDifficulty\":5,\"moneyAvailable\":2459151.0275877207,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"74.7.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":13.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,64,188,200]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6033.342424132572,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":332,\"ramUsage\":3.4,\"server\":\"harakiri-sushi\",\"threads\":4,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"harakiri-sushi\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85193}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"harakiri-sushi\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85192}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":12.920000000000002,\"minDifficulty\":5,\"moneyAvailable\":4225604.881020993,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"54.9.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":371,\"ramUsage\":3.4,\"server\":\"phantasy\",\"threads\":9,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"phantasy\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85380}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"phantasy\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85379}}],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":45.548,\"minDifficulty\":7,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"83.9.1.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":368,\"ramUsage\":3.4,\"server\":\"max-hardware\",\"threads\":9,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"max-hardware\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85373}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"max-hardware\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85372}}],\"serversOnNetwork\":[\"foodnstuff\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":34.324000000000005,\"minDifficulty\":5,\"moneyAvailable\":250000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"31.7.5.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":369,\"ramUsage\":3.4,\"server\":\"omega-net\",\"threads\":9,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"omega-net\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85375}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"omega-net\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85374}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":66551025,\"moneyMax\":1663775625,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":180,\"serverGrowth\":32}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"68.6.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.4,\"server\":\"crush-fitness\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":52703}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"crush-fitness\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85376}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":36,\"minDifficulty\":12,\"moneyAvailable\":57930685,\"moneyMax\":1448267125,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":228,\"serverGrowth\":30}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-557463.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[2,11],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"77.2.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":330,\"ramUsage\":3.4,\"server\":\"iron-gym\",\"threads\":9,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"iron-gym\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85189}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"iron-gym\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85188}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":29.516,\"minDifficulty\":10,\"moneyAvailable\":1304532.5851265886,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"10.0.8.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":125.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":354,\"ramUsage\":3.4,\"server\":\"millenium-fitness\",\"threads\":37,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"millenium-fitness\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85284}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"millenium-fitness\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85283}}],\"serversOnNetwork\":[\"summit-uni\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":50.5,\"minDifficulty\":15,\"moneyAvailable\":6250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":506,\"serverGrowth\":26}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"35.2.0.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":13.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":363,\"ramUsage\":3.4,\"server\":\"powerhouse-fitness\",\"threads\":4,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"powerhouse-fitness\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85343}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"powerhouse-fitness\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85342}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1016,\"serverGrowth\":59}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"17.5.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.4,\"server\":\"snap-fitness\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":55067}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"snap-fitness\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85285}}],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":757,\"serverGrowth\":47}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"67.5.0.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":125.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,37,37]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4284.339012808741,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":341,\"ramUsage\":3.4,\"server\":\"run4theh111z\",\"threads\":37,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"run4theh111z\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85230}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"run4theh111z\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85229}}],\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":541,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"53.4.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,144,423,450]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13575.020454298308,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":337,\"ramUsage\":3.4,\"server\":\"I.I.I.I\",\"threads\":9,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"I.I.I.I\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85203}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"I.I.I.I\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85202}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":351,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"35.0.5.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":61.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":351,\"ramUsage\":3.4,\"server\":\"avmnite-02h\",\"threads\":18,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"avmnite-02h\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85277}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"avmnite-02h\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85276}}],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":216,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"50.6.9.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":13.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":361,\"ramUsage\":3.4,\"server\":\".\",\"threads\":4,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\".\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85317}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\".\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85316}}],\"serversOnNetwork\":[\"helios\",\"blade\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":538,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"36.0.6.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":6.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,6,10,8]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":756.6399302271191,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":334,\"ramUsage\":3.4,\"server\":\"CSEC\",\"threads\":2,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///1b8c0f7c-9965-4125-8144-35d3e17c3b46\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"CSEC\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85197}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"CSEC\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85196}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":60,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"28.5.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.4,\"server\":\"The-Cave\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85323}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"The-Cave\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85325}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"97.6.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"92.7.3.2\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.4,\"server\":\"darkweb\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85185}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"darkweb\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":85187}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"cell-test\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"cell-test\",\"httpPortOpen\":false,\"ip\":\"75.2.6.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"cell\",\"cell-0\"],\"dataMap\":{\"max-hardware\":[0,0,0,261]},\"filename\":\"cell.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5455.167225366111,\"onlineMoneyMade\":0,\"onlineRunningTime\":6008.209999996729,\"pid\":275,\"ramUsage\":3.05,\"server\":\"cell-test\",\"threads\":1,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"database-client.js\",\"url\":\"blob:file:///8c7747e5-a853-4198-bc4c-49613ca779b2\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"cell.js\",\"url\":\"blob:file:///db9b5f2e-3d12-428a-8513-53dce6d8a8d1\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"cell\",\"cell-1\"],\"dataMap\":{\"silver-helix\":[0,0,0,98]},\"filename\":\"cell.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3802.600674987581,\"onlineMoneyMade\":0,\"onlineRunningTime\":6008.009999996729,\"pid\":276,\"ramUsage\":3.05,\"server\":\"cell-test\",\"threads\":1,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"database-client.js\",\"url\":\"blob:file:///8c7747e5-a853-4198-bc4c-49613ca779b2\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"cell.js\",\"url\":\"blob:file:///db9b5f2e-3d12-428a-8513-53dce6d8a8d1\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"cell\",\"cell-2\"],\"dataMap\":{\"silver-helix\":[0,0,0,98]},\"filename\":\"cell.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3802.600674987581,\"onlineMoneyMade\":0,\"onlineRunningTime\":6008.009999996729,\"pid\":277,\"ramUsage\":3.05,\"server\":\"cell-test\",\"threads\":1,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"database-client.js\",\"url\":\"blob:file:///8c7747e5-a853-4198-bc4c-49613ca779b2\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"cell.js\",\"url\":\"blob:file:///db9b5f2e-3d12-428a-8513-53dce6d8a8d1\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"cell\",\"cell-3\"],\"dataMap\":{\"millenium-fitness\":[0,0,0,20]},\"filename\":\"cell.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1157.9294629212814,\"onlineMoneyMade\":0,\"onlineRunningTime\":6007.809999996729,\"pid\":278,\"ramUsage\":3.05,\"server\":\"cell-test\",\"threads\":1,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"database-client.js\",\"url\":\"blob:file:///8c7747e5-a853-4198-bc4c-49613ca779b2\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"cell.js\",\"url\":\"blob:file:///db9b5f2e-3d12-428a-8513-53dce6d8a8d1\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"cell\",\"cell-4\"],\"dataMap\":{\"millenium-fitness\":[0,0,0,20]},\"filename\":\"cell.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1157.9294629212814,\"onlineMoneyMade\":0,\"onlineRunningTime\":6007.809999996729,\"pid\":279,\"ramUsage\":3.05,\"server\":\"cell-test\",\"threads\":1,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"database-client.js\",\"url\":\"blob:file:///8c7747e5-a853-4198-bc4c-49613ca779b2\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"cell.js\",\"url\":\"blob:file:///db9b5f2e-3d12-428a-8513-53dce6d8a8d1\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"cell\",\"cell-5\"],\"dataMap\":{\"millenium-fitness\":[0,0,0,20]},\"filename\":\"cell.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1157.9294629212814,\"onlineMoneyMade\":0,\"onlineRunningTime\":6007.609999996729,\"pid\":280,\"ramUsage\":3.05,\"server\":\"cell-test\",\"threads\":1,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"database-client.js\",\"url\":\"blob:file:///8c7747e5-a853-4198-bc4c-49613ca779b2\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"cell.js\",\"url\":\"blob:file:///db9b5f2e-3d12-428a-8513-53dce6d8a8d1\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"cell\",\"cell-6\"],\"dataMap\":{\"millenium-fitness\":[0,0,0,20]},\"filename\":\"cell.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1157.9294629212814,\"onlineMoneyMade\":0,\"onlineRunningTime\":6007.609999996729,\"pid\":281,\"ramUsage\":3.05,\"server\":\"cell-test\",\"threads\":1,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"database-client.js\",\"url\":\"blob:file:///8c7747e5-a853-4198-bc4c-49613ca779b2\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"cell.js\",\"url\":\"blob:file:///db9b5f2e-3d12-428a-8513-53dce6d8a8d1\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"cell\",\"cell-7\"],\"dataMap\":{},\"filename\":\"cell.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6007.409999996729,\"pid\":282,\"ramUsage\":3.05,\"server\":\"cell-test\",\"threads\":1,\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"database-client.js\",\"url\":\"blob:file:///8c7747e5-a853-4198-bc4c-49613ca779b2\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"cell.js\",\"url\":\"blob:file:///db9b5f2e-3d12-428a-8513-53dce6d8a8d1\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":459.80999999998244,\"pid\":329,\"ramUsage\":3.4,\"server\":\"cell-test\",\"threads\":2,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"cell-test\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":70391}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { portSend, portTryReceive, portPeek } from \\\"./utils.js\\\";\\n\\nasync function DatabaseReadRequest(ns, database, key){\\n  \\n  var channel =\\n    await ns.getHostname() +\\n    \\\"|\\\" + await ns.getScriptName() +\\n    \\\"|\\\" + ns.args.join(\\\"|\\\") +\\n    \\\"|\\\" + database\\n    \\\"|\\\" + key;\\n  \\n  return {\\n    type: \\\"read\\\",\\n    channel: channel,\\n    database: database,\\n    key: key\\n  }\\n  \\n}\\n\\nasync function DatabaseWriteRequest(ns, database, key, value){\\n  \\n  var channel =\\n    await ns.getHostname() +\\n    \\\"|\\\" + await ns.getScriptName() +\\n    \\\"|\\\" + ns.args.join(\\\"|\\\") +\\n    \\\"|\\\" + database\\n    \\\"|\\\" + key;\\n  \\n  return {\\n    type: \\\"write\\\",\\n    channel: channel,\\n    database: database,\\n    key: key,\\n    value: value\\n  }\\n  \\n}\\n\\nexport function DatabaseClient(ns, database){\\n  \\n  async function sendReadRequest(key){\\n    var request = await DatabaseReadRequest(ns, database, key);\\n    await portSend(ns, \\\"db\\\", request);\\n    return request;\\n  }\\n  \\n  async function sendWriteRequest(key, value){\\n    var request = await DatabaseWriteRequest(ns, database, key, value);\\n    await portSend(ns, \\\"db\\\", request);\\n    return request;\\n  }\\n  \\n  async function awaitReadResponse(request){\\n    var timeout = 5000;\\n    var pollPeriod = 10;\\n    for(var time = 0; time < timeout; time += pollPeriod){\\n      await ns.sleep(pollPeriod);\\n      var message = await portPeek(ns, \\\"db\\\");\\n      var myResponse =\\n        message != null &&\\n        message.type == \\\"response\\\" &&\\n        message.channel == request.channel;\\n      if (myResponse){\\n        await portTryReceive(ns, \\\"db\\\");\\n        return message.value;\\n      }\\n    }\\n    ns.print(\\\"Database read timeout: \\\", request);\\n  }\\n  \\n  async function read(key){\\n    var request = await sendReadRequest(key);\\n    return await awaitReadResponse(request);\\n  }\\n  \\n  async function write(key, value){\\n    var request = await sendWriteRequest(key, value);\\n  }\\n  \\n  return {\\n    read: read,\\n    write: write\\n  }\\n  \\n}\",\"filename\":\"database-client.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"database-client.js\",\"url\":\"blob:file:///3e5b76f1-cf04-465a-a3f6-a5257ac780d3\"}],\"ramUsage\":1.65,\"server\":\"cell-test\",\"_hash\":\"371c761907ab123a50d26a1508e419491a89b031d2057c168758c65f601c4daa\",\"moduleSequenceNumber\":74705}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { DatabaseClient } from \\\"./database-client.js\\\";\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Cell (ns, options) {\\n  \\n  var database = options.database;\\n  var localInstanceName = options.localInstanceName;\\n  \\n  async function dbRead(subkey){\\n    var globalInstanceName = await ns.getHostname() + \\\"|\\\" + localInstanceName;\\n    return await database.read(globalInstanceName + \\\"-\\\" + subkey);\\n  }\\n  \\n  async function dbWrite(subkey, data){\\n    var globalInstanceName = await ns.getHostname() + \\\"|\\\" + localInstanceName;\\n    return await database.write(globalInstanceName + \\\"-\\\" + subkey, data);\\n  }\\n  \\n  async function executeInstruction(instruction){\\n    var operation = instruction.operation;\\n    var target = instruction.target;\\n    switch(operation){\\n      case \\\"grow\\\":\\n        await ns.grow(target);\\n        break;\\n      case \\\"weaken\\\":\\n        await ns.weaken(target);\\n        break;\\n      case \\\"hack\\\":\\n        await ns.hack(target);\\n        break;\\n      default:\\n        await ns.sleep(1000);\\n        ns.print(\\\"Unknown operation: \\\", operation);\\n        break;\\n    }\\n  }\\n  \\n  async function execute(){\\n    \\n    var commandStatus = await dbRead(\\\"status\\\");\\n    var commandInstruction = await dbRead(\\\"instruction\\\");\\n    if(commandStatus == \\\"continuous\\\" && commandInstruction != null){\\n      ns.print(\\\"Continuous: \\\", commandInstruction);\\n      await executeInstruction(commandInstruction);\\n    } else if(commandStatus == \\\"oneshot\\\" && commandInstruction != null) {\\n      ns.print(\\\"One Shot: \\\", commandInstruction);\\n      await executeInstruction(commandInstruction);\\n      await dbWrite(\\\"status\\\", \\\"complete\\\");\\n    } else {\\n      await ns.sleep(6*1000); // Idle\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, async function(){\\n      await execute();\\n    });\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <database> <local instance name>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 2){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var databaseName = ns.args[0];\\n  var instanceName = ns.args[1];\\n  var database = new DatabaseClient(ns, databaseName);\\n  var cell = new Cell(ns, {\\n    database: database,\\n    localInstanceName: instanceName\\n  });\\n  await cell.run();\\n  \\n}\",\"filename\":\"cell.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///d017ee58-7e3b-4fa7-ae59-b1e14008c917\"},{\"filename\":\"database-client.js\",\"url\":\"blob:file:///8c7747e5-a853-4198-bc4c-49613ca779b2\"},{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"cell.js\",\"url\":\"blob:file:///db9b5f2e-3d12-428a-8513-53dce6d8a8d1\"}],\"ramUsage\":3.05,\"server\":\"cell-test\",\"_hash\":\"3ed2a6a34a7748daf4e428d73d427085d9de8778760b632eb70679a2994c9438\",\"moduleSequenceNumber\":70396}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"cell-test\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":85183}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"vps-absol\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-absol\",\"httpPortOpen\":false,\"ip\":\"14.3.7.1\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":131070,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,77100,77100]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2302825.251983278,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.00999999999997,\"pid\":373,\"ramUsage\":3.4,\"server\":\"vps-absol\",\"threads\":38550,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"vps-absol\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":86647}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"vps-absol\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":86646}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"vps-scorbunny\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-scorbunny\",\"httpPortOpen\":false,\"ip\":\"21.4.1.0\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65535,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[57500000,19275,19275,38550]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1151412.625991639,\"onlineMoneyMade\":57500000,\"onlineRunningTime\":18.00999999999997,\"pid\":374,\"ramUsage\":3.4,\"server\":\"vps-scorbunny\",\"threads\":19275,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"vps-scorbunny\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":86652}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"vps-scorbunny\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":86651}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"vps-meowth\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-meowth\",\"httpPortOpen\":false,\"ip\":\"32.5.5.7\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65535,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.00999999999997,\"pid\":375,\"ramUsage\":3.4,\"server\":\"vps-meowth\",\"threads\":19275,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"vps-meowth\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":86657}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"vps-meowth\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":86656}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"vps-rattata\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-rattata\",\"httpPortOpen\":false,\"ip\":\"20.8.1.3\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65535,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.00999999999997,\"pid\":376,\"ramUsage\":3.4,\"server\":\"vps-rattata\",\"threads\":19275,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"vps-rattata\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":86662}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"vps-rattata\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":86661}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"vps-bonsly\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-bonsly\",\"httpPortOpen\":false,\"ip\":\"43.2.6.0\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65535,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.80999999999997,\"pid\":377,\"ramUsage\":3.4,\"server\":\"vps-bonsly\",\"threads\":19275,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"vps-bonsly\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":86667}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"vps-bonsly\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":86666}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"vps-diglet\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-diglet\",\"httpPortOpen\":false,\"ip\":\"69.1.9.4\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65535,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.80999999999997,\"pid\":378,\"ramUsage\":3.4,\"server\":\"vps-diglet\",\"threads\":19275,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"vps-diglet\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":86672}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"vps-diglet\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":86671}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"vps-vulpix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-vulpix\",\"httpPortOpen\":false,\"ip\":\"9.3.1.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65535,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,19275,0]},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":402867.23474686465,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.80999999999997,\"pid\":379,\"ramUsage\":3.4,\"server\":\"vps-vulpix\",\"threads\":19275,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"vps-vulpix\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":86677}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"vps-vulpix\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":86676}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"vps-dragonite\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-dragonite\",\"httpPortOpen\":false,\"ip\":\"71.9.8.9\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":65535,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.80999999999997,\"pid\":380,\"ramUsage\":3.4,\"server\":\"vps-dragonite\",\"threads\":19275,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"vps-dragonite\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":86682}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"vps-dragonite\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":86681}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"vps-pikachu\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-pikachu\",\"httpPortOpen\":false,\"ip\":\"49.1.2.1\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":131070,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.80999999999997,\"pid\":381,\"ramUsage\":3.4,\"server\":\"vps-pikachu\",\"threads\":38550,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"vps-pikachu\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":86687}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"vps-pikachu\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":86686}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"vps-charmander\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"vps-charmander\",\"httpPortOpen\":false,\"ip\":\"53.9.9.4\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":131070,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"thief.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.80999999999997,\"pid\":382,\"ramUsage\":3.4,\"server\":\"vps-charmander\",\"threads\":38550,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.95);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n  }\\n\\n  async function run() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    run\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.run();\\n  \\n}\",\"filename\":\"thief.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///ae511c36-eafb-4438-8f17-b7373d705a74\"},{\"filename\":\"thief.js\",\"url\":\"blob:file:///f21d549c-9d95-4d96-8e58-6a619f0e19a5\"}],\"ramUsage\":3.4,\"server\":\"vps-charmander\",\"_hash\":\"42608c1aa385bb4d82c5ae8b39d4b2df964d94654417fe490f573f681d0a8577\",\"moduleSequenceNumber\":86692}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\\nexport function GreedyAllocation(\\n    containers,\\n    getContainerCapacity,\\n    resources,\\n    getResourceSize){\\n\\n  function copy(array){\\n    return [...array];\\n  }\\n  \\n  function removeBiggest(array, getSize, maxSize){\\n    \\n    // Scan the array to find the biggest element not greater than maxSize\\n    var matchSize = null;\\n    var matchIndex = null;\\n    for(var i = 0; i < array.length; i++){\\n      var iSize = getSize(array[i]);\\n      var isBetterCandidate =\\n        iSize <= maxSize &&\\n        (matchSize == null || iSize > matchSize);\\n      if(isBetterCandidate){\\n        matchSize = iSize;\\n        matchIndex = i;\\n      }\\n    }\\n    \\n    // If an element was found, return it and the remaining elements.\\n    if(matchIndex != null){\\n      var bigger = array.slice(0, matchIndex);\\n      var smaller = array.slice(matchIndex + 1, array.length);\\n      return array.splice(matchIndex,1)[0];\\n    } else {\\n      return null;\\n    }\\n    \\n  }\\n\\n  function removeSmallest(array, getSize, minSize){\\n    return removeBiggest(array, function(x){ return -getSize(x); }, -minSize);\\n  }\\n\\n  function allocate(){\\n    var remainingContainers = copy(containers);\\n    var remainingResources = copy(resources);\\n    var allocations = [];\\n    for(;;){\\n      \\n      // Grab the next smallest container\\n      var smallestContainer = removeSmallest(\\n          remainingContainers,\\n          getContainerCapacity,\\n          0);\\n      if (smallestContainer == null) break;\\n      \\n      // Create an allocation for the container\\n      var allocation = [smallestContainer, []];\\n      allocations.push(allocation);\\n      var containerCapacityRemaining = getContainerCapacity(smallestContainer);\\n      for(;;){\\n        \\n        // Grab the biggest resource that fits in the container\\n        var biggestResourceThatFits = removeBiggest(\\n            remainingResources,\\n            getResourceSize,\\n            containerCapacityRemaining);\\n        if (biggestResourceThatFits == null) break;\\n        \\n        // Allocate the resource to the container\\n        containerCapacityRemaining -= getResourceSize(biggestResourceThatFits);\\n        allocation[1].push(biggestResourceThatFits);\\n        \\n      }\\n      \\n    }\\n    return {\\n      allocations,\\n      unallocatedResources: remainingResources\\n    }\\n  }\\n\\n  return {\\n    allocate\\n  }\\n  \\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"vps-charmander\",\"_hash\":\"922bef23e23d8e85454f3e635e99c2e929d7c8fb1aafeee9122b1ed6561e9f78\",\"moduleSequenceNumber\":86691}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":2,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":87.49199999999999,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":353327.6664397339}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":154.3821,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":107.2858,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":38447.27831814764}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":8.7624,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":136.0473,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":130.505,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":148.3676,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"scana\":\"scan-analyze\",\"traceroute\":\"run traceroute.js\",\"reach\":\"run reach.js\",\"contracts\":\"run file-recon.js cct\",\"vps\":\"run vps.js\",\"dbserver\":\"run database.js server\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":22760.12315271924,\"lastPrice\":22707.925843244513,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.41,\"b\":false,\"otlkMag\":13.843148890500395,\"otlkMagForecast\":31.330222729339496,\"cap\":226176559,\"spreadPerc\":0.3,\"shareTxForMovement\":51693,\"shareTxUntilMovement\":35440,\"totalShares\":110300000,\"maxShares\":22100000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":25371.700989134504,\"lastPrice\":25313.514373906462,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.41,\"b\":true,\"otlkMag\":18.474743593829405,\"otlkMagForecast\":69.83146726634982,\"cap\":417527250,\"spreadPerc\":0.4,\"shareTxForMovement\":75350,\"shareTxUntilMovement\":17840,\"totalShares\":71900000,\"maxShares\":14400000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":30941.10960554832,\"lastPrice\":30811.552380593992,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":13.571205179105103,\"otlkMagForecast\":62.145330390253314,\"cap\":126733459,\"spreadPerc\":0.3,\"shareTxForMovement\":37529,\"shareTxUntilMovement\":37529,\"totalShares\":85400000,\"maxShares\":17100000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":9083.567443033919,\"lastPrice\":9046.037586744953,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":9.398334681148295,\"otlkMagForecast\":59.56405293366617,\"cap\":262632543,\"spreadPerc\":0.5,\"shareTxForMovement\":38066,\"shareTxUntilMovement\":38066,\"totalShares\":119900000,\"maxShares\":24000000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":37381.554581349425,\"lastPrice\":37256.22980223241,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":12.472248682695879,\"otlkMagForecast\":61.7574395438204,\"cap\":573708750,\"spreadPerc\":0.2,\"shareTxForMovement\":45222,\"shareTxUntilMovement\":45222,\"totalShares\":52900000,\"maxShares\":10600000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":118793.98165000335,\"lastPrice\":119459.9923901197,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1,\"b\":false,\"otlkMag\":21.918257501684124,\"otlkMagForecast\":28.99826730007205,\"cap\":72156940,\"spreadPerc\":0.5,\"shareTxForMovement\":39040,\"shareTxUntilMovement\":20170,\"totalShares\":37300000,\"maxShares\":7500000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":13042.424008596274,\"lastPrice\":12985.637564596163,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":11.658630078040266,\"otlkMagForecast\":61.040784151830934,\"cap\":248025198,\"spreadPerc\":0.7,\"shareTxForMovement\":81755,\"shareTxUntilMovement\":81755,\"totalShares\":83400000,\"maxShares\":16700000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":16129.852540916847,\"lastPrice\":16017.600495268482,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.25,\"b\":true,\"otlkMag\":18.02020812307671,\"otlkMagForecast\":68.55973610897433,\"cap\":762867125,\"spreadPerc\":0.2,\"shareTxForMovement\":66592,\"shareTxUntilMovement\":5628,\"totalShares\":57400000,\"maxShares\":11500000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":19668.744501985253,\"lastPrice\":19765.783455582572,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.88,\"b\":true,\"otlkMag\":7.502598414049693,\"otlkMagForecast\":57.04153495998627,\"cap\":406787136,\"spreadPerc\":0.2,\"shareTxForMovement\":100759,\"shareTxUntilMovement\":100759,\"totalShares\":58200000,\"maxShares\":11600000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":12138.999185807237,\"lastPrice\":12185.277612789883,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":8.46564508687653,\"otlkMagForecast\":58.85208583946621,\"cap\":100360289,\"spreadPerc\":1,\"shareTxForMovement\":50996,\"shareTxUntilMovement\":50996,\"totalShares\":112300000,\"maxShares\":22500000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":19979.22860332127,\"lastPrice\":20050.91644147862,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":7.095485941916996,\"otlkMagForecast\":41.71457351230563,\"cap\":46651438,\"spreadPerc\":0.5,\"shareTxForMovement\":70592,\"shareTxUntilMovement\":70592,\"totalShares\":59100000,\"maxShares\":11800000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":10447.067991372121,\"lastPrice\":10493.924637733073,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":7.153269150941204,\"otlkMagForecast\":57.1921814682068,\"cap\":82875001,\"spreadPerc\":1,\"shareTxForMovement\":107642,\"shareTxUntilMovement\":107642,\"totalShares\":88900000,\"maxShares\":17800000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":15594.417821984105,\"lastPrice\":15540.399552911955,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":7.543721686254622,\"otlkMagForecast\":42.583061191706484,\"cap\":131127009,\"spreadPerc\":0.5,\"shareTxForMovement\":63550,\"shareTxUntilMovement\":63550,\"totalShares\":44000000,\"maxShares\":8800000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":20005.180262761525,\"lastPrice\":19939.225359556644,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":false,\"otlkMag\":8.333842804388015,\"otlkMagForecast\":39.858881346239215,\"cap\":369788081,\"spreadPerc\":0.9,\"shareTxForMovement\":45134,\"shareTxUntilMovement\":45134,\"totalShares\":53900000,\"maxShares\":10800000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":11382.481061005985,\"lastPrice\":11422.684599554139,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":5.078337741996633,\"otlkMagForecast\":54.76280035227489,\"cap\":160193970,\"spreadPerc\":0.4,\"shareTxForMovement\":49832,\"shareTxUntilMovement\":49832,\"totalShares\":50600000,\"maxShares\":10100000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":6333.197396995975,\"lastPrice\":6356.986859022169,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":5.468680567607376,\"otlkMagForecast\":51.480916146141496,\"cap\":318120895,\"spreadPerc\":0.7,\"shareTxForMovement\":74922,\"shareTxUntilMovement\":74922,\"totalShares\":42300000,\"maxShares\":8500000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":35056.50292980833,\"lastPrice\":34919.4613458772,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":9.507861349560747,\"otlkMagForecast\":59.68240913093024,\"cap\":69740451,\"spreadPerc\":1.2,\"shareTxForMovement\":88344,\"shareTxUntilMovement\":88344,\"totalShares\":25900000,\"maxShares\":5200000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":16153.23117452389,\"lastPrice\":16203.040297134421,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":true,\"otlkMag\":9.600900684584007,\"otlkMagForecast\":61.46269261058293,\"cap\":231147379,\"spreadPerc\":0.7,\"shareTxForMovement\":91791,\"shareTxUntilMovement\":91791,\"totalShares\":49200000,\"maxShares\":9800000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":14673.626309837351,\"lastPrice\":14616.264712887993,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":5.143294666967052,\"otlkMagForecast\":53.51067827531461,\"cap\":201473124,\"spreadPerc\":0.6,\"shareTxForMovement\":114314,\"shareTxUntilMovement\":114314,\"totalShares\":35600000,\"maxShares\":7100000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":4963.2277771899135,\"lastPrice\":4894.083112501517,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.52,\"b\":true,\"otlkMag\":6.247144279007541,\"otlkMagForecast\":57.46056911912179,\"cap\":24534907,\"spreadPerc\":0.5,\"shareTxForMovement\":22324,\"shareTxUntilMovement\":22324,\"totalShares\":75100000,\"maxShares\":15000000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":4140.738304466488,\"lastPrice\":4110.319905679738,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.32,\"b\":false,\"otlkMag\":9.480139004860426,\"otlkMagForecast\":41.931381997781905,\"cap\":131437483,\"spreadPerc\":0.5,\"shareTxForMovement\":37097,\"shareTxUntilMovement\":37097,\"totalShares\":42200000,\"maxShares\":8400000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":4131.913052640073,\"lastPrice\":4146.738845971688,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":2.3695306743269486,\"otlkMagForecast\":47.79389219036478,\"cap\":43617538,\"spreadPerc\":1,\"shareTxForMovement\":110898,\"shareTxUntilMovement\":110898,\"totalShares\":54800000,\"maxShares\":11000000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":12102.05268896875,\"lastPrice\":11984.469922975319,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.75,\"b\":false,\"otlkMag\":8.307186714279103,\"otlkMagForecast\":41.55715123737909,\"cap\":189183261,\"spreadPerc\":1.1,\"shareTxForMovement\":47813,\"shareTxUntilMovement\":47813,\"totalShares\":29700000,\"maxShares\":5900000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":12883.004916573007,\"lastPrice\":13003.625225773774,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.67,\"b\":false,\"otlkMag\":7.969772689586235,\"otlkMagForecast\":39.53716172816549,\"cap\":23791429,\"spreadPerc\":0.7,\"shareTxForMovement\":58830,\"shareTxUntilMovement\":58830,\"totalShares\":57900000,\"maxShares\":11600000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":4060.038806200685,\"lastPrice\":4039.4302154139755,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.91,\"b\":false,\"otlkMag\":5.240002807729692,\"otlkMagForecast\":44.99371111810213,\"cap\":36384320,\"spreadPerc\":0.8,\"shareTxForMovement\":125347,\"shareTxUntilMovement\":125347,\"totalShares\":35200000,\"maxShares\":7000000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":1354.4099811105639,\"lastPrice\":1377.873622841911,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.09,\"b\":false,\"otlkMag\":7.3391324869539725,\"otlkMagForecast\":45.67523743699007,\"cap\":39438767,\"spreadPerc\":1.9,\"shareTxForMovement\":44384,\"shareTxUntilMovement\":44384,\"totalShares\":17500000,\"maxShares\":3500000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":6050.165961545558,\"lastPrice\":6085.442618427196,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.04,\"b\":true,\"otlkMag\":5.33145676727561,\"otlkMagForecast\":51.89541251861322,\"cap\":7620216,\"spreadPerc\":0.9,\"shareTxForMovement\":58889,\"shareTxUntilMovement\":58889,\"totalShares\":13100000,\"maxShares\":2600000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1813.1537739627108,\"lastPrice\":1820.7777705880164,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":5.373114862635617,\"otlkMagForecast\":46.73265143200879,\"cap\":38188627,\"spreadPerc\":0.8,\"shareTxForMovement\":81395,\"shareTxUntilMovement\":81395,\"totalShares\":13800000,\"maxShares\":2800000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":3177.5443764992383,\"lastPrice\":3221.0122349902426,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.44,\"b\":true,\"otlkMag\":7.163209988672964,\"otlkMagForecast\":58.72643077174436,\"cap\":53474196,\"spreadPerc\":0.9,\"shareTxForMovement\":43654,\"shareTxUntilMovement\":43654,\"totalShares\":11400000,\"maxShares\":2300000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":320.56596462866213,\"lastPrice\":316.99378248514637,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.01,\"b\":false,\"otlkMag\":7.64067821887107,\"otlkMagForecast\":42.45600046957121,\"cap\":3449969,\"spreadPerc\":1,\"shareTxForMovement\":48968,\"shareTxUntilMovement\":48968,\"totalShares\":60800000,\"maxShares\":12200000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":4131.3320900172985,\"lastPrice\":4095.2849699075,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.57,\"b\":true,\"otlkMag\":13.889168583354856,\"otlkMagForecast\":61.5306506638347,\"cap\":11581546,\"spreadPerc\":1.1,\"shareTxForMovement\":50025,\"shareTxUntilMovement\":50025,\"totalShares\":96000000,\"maxShares\":19200000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":14578.052869469784,\"lastPrice\":14636.081812929699,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":8.851322950626189,\"otlkMagForecast\":58.35998351448959,\"cap\":41155025,\"spreadPerc\":0.4,\"shareTxForMovement\":143009,\"shareTxUntilMovement\":143009,\"totalShares\":18800000,\"maxShares\":3800000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":22392.56487074776,\"lastPrice\":22323.728776486572,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":true,\"otlkMag\":9.383857897509198,\"otlkMagForecast\":60.58289436112064,\"cap\":66387426,\"spreadPerc\":0.5,\"shareTxForMovement\":129367,\"shareTxUntilMovement\":129367,\"totalShares\":24300000,\"maxShares\":4900000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":26,\"lastUpdate\":1641281881037,\"ticksUntilCycle\":15}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":300,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"}}","VersionSave":"8","AllGangsSave":"","LastExportBonus":"1641189554599","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}