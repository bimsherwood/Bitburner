{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":215,\"strength\":1,\"defense\":1,\"dexterity\":195,\"agility\":195,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":350995.3561816291,\"strength\":0,\"defense\":0,\"dexterity\":57860.539141103516,\"agility\":57881.184817056164,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.290354747040736,\"hacking_speed\":1.290354747040736,\"hacking_money\":1.290354747040736,\"hacking_grow\":1.290354747040736,\"hacking\":1.290354747040736,\"strength\":1.290354747040736,\"defense\":1.290354747040736,\"dexterity\":1.290354747040736,\"agility\":1.290354747040736,\"charisma\":1.290354747040736,\"hacking_exp\":1.290354747040736,\"strength_exp\":1.290354747040736,\"defense_exp\":1.290354747040736,\"dexterity_exp\":1.290354747040736,\"agility_exp\":1.290354747040736,\"charisma_exp\":1.290354747040736,\"company_rep\":1.290354747040736,\"faction_rep\":1.290354747040736,\"crime_money\":1.290354747040736,\"crime_success\":1.290354747040736,\"hacknet_node_money\":1.7955286305071845,\"hacknet_node_purchase_cost\":0.592860220613308,\"hacknet_node_ram_cost\":0.7749806805402719,\"hacknet_node_core_cost\":0.7749806805402719,\"hacknet_node_level_cost\":0.6587335784592311,\"work_money\":1.290354747040736,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":4,\"name\":\"NeuroFlux Governor\"}],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"}],\"city\":\"Sector-12\",\"bitNodeN\":3,\"corporation\":{\"ctor\":\"Corporation\",\"data\":{\"name\":\"BimCo\",\"divisions\":{\"ctor\":\"JSONMap\",\"data\":[[\"BimGrain\",{\"ctor\":\"Division\",\"data\":{\"name\":\"BimGrain\",\"type\":\"Agriculture\",\"researchPoints\":13642.111702323207,\"researched\":{\"ctor\":\"JSONSet\",\"data\":[\"Hi-Tech R&D Laboratory\",\"AutoPartyManager\",\"AutoBrew\",\"Market-TA.I\"]},\"requiredMaterials\":{\"Water\":0.5,\"Chemicals\":0.2},\"producedMaterials\":[\"Plants\",\"Food\"],\"products\":{\"ctor\":\"JSONMap\",\"data\":[]},\"makesProducts\":false,\"awareness\":598.9117205543814,\"popularity\":150.4552462571511,\"startingCost\":40000000000,\"realEstateFactor\":0.72,\"researchFactor\":0.5,\"hardwareFactor\":0.2,\"robotFactor\":0.3,\"aiCoreFactor\":0.3,\"advertisingFactor\":0.04,\"productionMult\":104.34205381097112,\"lastCycleRevenue\":16010978.857111147,\"lastCycleExpenses\":4550483.864214356,\"thisCycleRevenue\":0,\"thisCycleExpenses\":45164516.395377755,\"state\":\"PURCHASE\",\"newInd\":false,\"warehouses\":{\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":7,\"city\":\"Sector-12\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":1431.0893106904523,\"quality\":1,\"demand\":80.0374706946448,\"demandRange\":[65,85],\"competition\":43.116261567959164,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":143.10893106904524,\"actualSellAmount\":0,\"productionAmount\":-143.10874943641062,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1551.7393366438323,\"averagePrice\":1551.7393366438323,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":4.547473508864641e-13,\"quality\":11.487261051557997,\"demand\":74.14143327265809,\"demandRange\":[70,90],\"competition\":42.11177354309202,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":286.21749887282124,\"productionAmount\":286.21749887282124,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":6471.516213441155,\"averagePrice\":6510.166665875056,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":true,\"marketTa2\":false,\"uiMarketPrice\":6513.995752892241,\"maxSellPerCycle\":1170.7544896712272,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":4.547473508864641e-13,\"quality\":11.487261051557997,\"demand\":82.35039683980109,\"demandRange\":[20,90],\"competition\":43.92383541984116,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":286.21749887282124,\"productionAmount\":286.21749887282124,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":4837.621656295139,\"averagePrice\":4841.746942059988,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":true,\"marketTa2\":false,\"uiMarketPrice\":4844.810211673736,\"maxSellPerCycle\":1251.524656580908,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":1000,\"quality\":1,\"demand\":85.74024732078641,\"demandRange\":[80,90],\"competition\":94.06607165766628,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8169.434828879273,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":572.435724276181,\"quality\":1,\"demand\":53.89717755072357,\"demandRange\":[40,70],\"competition\":58.80852553829554,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":57.2435724276181,\"actualSellAmount\":0,\"productionAmount\":-57.243499774564256,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8737.220681849329,\"averagePrice\":8737.220681849329,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":1000,\"quality\":1,\"demand\":80.94084315294077,\"demandRange\":[80,99],\"competition\":98.1113117480512,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":90174.71185466164,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":1500,\"quality\":1,\"demand\":82.9657856270494,\"demandRange\":[80,99],\"competition\":85.26011141968783,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":24890.418001923375,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":30000,\"quality\":1,\"demand\":24.16087182436596,\"demandRange\":[5,99],\"competition\":25.933240642066984,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":183617.53670732368,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":1260.0000000000005,\"sizeUsed\":960.1762517483317,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":286.2178621380905}},\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":7,\"city\":\"Aevum\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":1418.885751146526,\"quality\":1,\"demand\":72.93872723643993,\"demandRange\":[65,85],\"competition\":44.75522407702745,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":141.8885751146526,\"actualSellAmount\":0,\"productionAmount\":-141.88839081534417,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1490.104783010526,\"averagePrice\":1490.104783010526,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":11.461119682783782,\"demand\":87.95170950493178,\"demandRange\":[70,90],\"competition\":43.028407146142754,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":283.77678163068833,\"productionAmount\":283.77678163068833,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1983.6326316876762,\"averagePrice\":1983.632631687676,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":true,\"marketTa2\":false,\"uiMarketPrice\":1987.4530049152709,\"maxSellPerCycle\":1369.320850680272,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":11.461119682783782,\"demand\":58.137951460368065,\"demandRange\":[20,90],\"competition\":55.615322756229965,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":283.77678163068833,\"productionAmount\":283.77678163068833,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3422.358126565856,\"averagePrice\":3424.7902794788265,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":true,\"marketTa2\":false,\"uiMarketPrice\":3427.8465780609026,\"maxSellPerCycle\":710.538837795192,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":1000,\"quality\":1,\"demand\":80.09922190302558,\"demandRange\":[80,90],\"competition\":92.2003083232031,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5064.610086611992,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":567.5543004586104,\"quality\":1,\"demand\":69.83480563297465,\"demandRange\":[40,70],\"competition\":41.390369129468596,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":56.75543004586105,\"actualSellAmount\":0,\"productionAmount\":-56.755356326137665,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":11442.268442886127,\"averagePrice\":11442.268442886127,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":1000,\"quality\":1,\"demand\":97.4745781984167,\"demandRange\":[80,99],\"competition\":85.72857344515431,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":88541.07072604977,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":1400,\"quality\":1,\"demand\":80.50969799365717,\"demandRange\":[80,99],\"competition\":89.28122629841044,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":11263.537193339393,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":30000,\"quality\":1,\"demand\":57.71859781478771,\"demandRange\":[5,99],\"competition\":34.69818683540096,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":100366.3039709998,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":1260.0000000000005,\"sizeUsed\":949.3220025802568,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":283.7771502293052}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":7,\"city\":\"Chongqing\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":1432.93436787387,\"quality\":1,\"demand\":76.42658783089296,\"demandRange\":[65,85],\"competition\":44.0086959907629,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":143.293436787387,\"actualSellAmount\":0,\"productionAmount\":-143.29325551574775,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1746.2627509428435,\"averagePrice\":1746.2627509428435,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":11.475373057564664,\"demand\":85.7297823857,\"demandRange\":[70,90],\"competition\":81.78072506132351,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":286.5865110314955,\"productionAmount\":286.5865110314955,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2107.576077936618,\"averagePrice\":2096.689956862968,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":true,\"marketTa2\":false,\"uiMarketPrice\":2100.5150812154893,\"maxSellPerCycle\":414.19396061396185,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":11.475373057564664,\"demand\":70.10480622505017,\"demandRange\":[20,90],\"competition\":50.85585475552452,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":286.5865110314955,\"productionAmount\":286.5865110314955,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2523.5611017829597,\"averagePrice\":2521.378184690076,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":true,\"marketTa2\":false,\"uiMarketPrice\":2524.438284172094,\"maxSellPerCycle\":943.4332940967192,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":1000,\"quality\":1,\"demand\":83.7243263052748,\"demandRange\":[80,90],\"competition\":80.57971093827062,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9232.675224558236,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":573.173747149548,\"quality\":1,\"demand\":49.536867102751906,\"demandRange\":[40,70],\"competition\":40.53526511045087,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":57.3173747149548,\"actualSellAmount\":0,\"productionAmount\":-57.3173022062991,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5057.5130612211115,\"averagePrice\":5057.5130612211115,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":1000,\"quality\":1,\"demand\":98.41195277597117,\"demandRange\":[80,99],\"competition\":80.33740661490371,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":85007.3404461938,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":1400,\"quality\":1,\"demand\":91.3543426209582,\"demandRange\":[80,99],\"competition\":91.8066007357681,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":24134.392129485404,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":30000,\"quality\":1,\"demand\":74.82488416853313,\"demandRange\":[5,99],\"competition\":55.01338750226462,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":307125.1882820955,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":1260.0000000000005,\"sizeUsed\":950.3054057511708,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":286.586873574774}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":7,\"city\":\"New Tokyo\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":1441.9848562993557,\"quality\":1,\"demand\":73.91326942684738,\"demandRange\":[65,85],\"competition\":41.251804246329506,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":144.19848562993556,\"actualSellAmount\":0,\"productionAmount\":-144.19830625299463,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1442.9205123309805,\"averagePrice\":1442.9205123309805,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":11.483632867073455,\"demand\":70,\"demandRange\":[70,90],\"competition\":63.32588959697278,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":288.39661250598925,\"productionAmount\":288.39661250598925,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7326.188292325178,\"averagePrice\":7347.6223553295995,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":true,\"marketTa2\":false,\"uiMarketPrice\":7351.450232951957,\"maxSellPerCycle\":708.5079328756007,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":11.483632867073455,\"demand\":45.99986780147861,\"demandRange\":[20,90],\"competition\":34.45172851498155,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":288.39661250598925,\"productionAmount\":288.39661250598925,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3973.1559871158524,\"averagePrice\":3988.445433894462,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":true,\"marketTa2\":false,\"uiMarketPrice\":3991.507735992348,\"maxSellPerCycle\":833.8201549191059,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":1000,\"quality\":1,\"demand\":83.93683205916373,\"demandRange\":[80,90],\"competition\":80.37312903538228,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8554.393619803972,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":576.7939425197422,\"quality\":1,\"demand\":57.503626509147836,\"demandRange\":[40,70],\"competition\":43.591496293061375,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":57.67939425197422,\"actualSellAmount\":0,\"productionAmount\":-57.67932250119785,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8152.338530638473,\"averagePrice\":8152.338530638473,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":1000,\"quality\":1,\"demand\":81.69619668173031,\"demandRange\":[80,99],\"competition\":96.48253742111585,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":100446.07182990898,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":1400,\"quality\":1,\"demand\":94.95964132075886,\"demandRange\":[80,99],\"competition\":89.19637012909708,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":27274.370862994783,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":30000,\"quality\":1,\"demand\":11.468642552620734,\"demandRange\":[5,99],\"competition\":49.295387959859575,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":46411.28812331312,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":1260.0000000000005,\"sizeUsed\":950.9389399409549,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":288.3969712598711}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":7,\"city\":\"Ishima\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":1431.0781494096777,\"quality\":1,\"demand\":77.09814246375655,\"demandRange\":[65,85],\"competition\":49.52779717200853,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":143.10781494096778,\"actualSellAmount\":0,\"productionAmount\":-143.10763342526496,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500.634090969969,\"averagePrice\":1500.634090969969,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":11.48404881059829,\"demand\":74.67470035519902,\"demandRange\":[70,90],\"competition\":55.156733639891655,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":286.21526685052993,\"productionAmount\":286.21526685052993,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8830.011416236717,\"averagePrice\":8830.011416236717,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":true,\"marketTa2\":false,\"uiMarketPrice\":8833.839432506917,\"maxSellPerCycle\":916.4365839684216,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":11.48404881059829,\"demand\":54.54500057810028,\"demandRange\":[20,90],\"competition\":61.32769308615258,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":286.21526685052993,\"productionAmount\":286.21526685052993,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3057.258493419195,\"averagePrice\":3057.2584934191955,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":true,\"marketTa2\":false,\"uiMarketPrice\":3060.3209064353546,\"maxSellPerCycle\":576.8444532532077,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":1000,\"quality\":1,\"demand\":85.26152212865902,\"demandRange\":[80,90],\"competition\":76.92176979088211,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5727.16592532539,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":572.4312597638711,\"quality\":1,\"demand\":69.65819598286721,\"demandRange\":[40,70],\"competition\":64.36011965022377,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":57.24312597638711,\"actualSellAmount\":0,\"productionAmount\":-57.243053370106,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":14233.640721120313,\"averagePrice\":14233.640721120313,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":1000,\"quality\":1,\"demand\":91.3880745718893,\"demandRange\":[80,99],\"competition\":97.17188608982237,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":100813.28142943076,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":1400,\"quality\":1,\"demand\":91.32943875646137,\"demandRange\":[80,99],\"competition\":88.67653443006235,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":17000.591487937185,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":30000,\"quality\":1,\"demand\":46.23797189820378,\"demandRange\":[5,99],\"competition\":70.36929886065221,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":209996.894971968,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":1260.0000000000005,\"sizeUsed\":950.1754704586774,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":286.21562988193557}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":7,\"city\":\"Volhaven\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":1417.5728130456816,\"quality\":1,\"demand\":74.05241786661091,\"demandRange\":[65,85],\"competition\":47.91391473196171,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":141.75728130456815,\"actualSellAmount\":0,\"productionAmount\":-141.75709690031653,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1584.1684089693094,\"averagePrice\":1584.1684089693092,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":11.476114772780232,\"demand\":82.86473642073133,\"demandRange\":[70,90],\"competition\":35,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":283.51419380063305,\"productionAmount\":283.51419380063305,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7921.2489636693335,\"averagePrice\":7921.2489636693335,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":true,\"marketTa2\":false,\"uiMarketPrice\":7925.07433526026,\"maxSellPerCycle\":1470.8589596526035,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":11.476114772780232,\"demand\":59.10769449280246,\"demandRange\":[20,90],\"competition\":33.22889464198703,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":283.51419380063305,\"productionAmount\":283.51419380063305,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3437.382020514865,\"averagePrice\":3436.8814015838057,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":true,\"marketTa2\":false,\"uiMarketPrice\":3439.941698856547,\"maxSellPerCycle\":1064.3402187824395,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":1000,\"quality\":1,\"demand\":80.07212309502941,\"demandRange\":[80,90],\"competition\":74.07294680954772,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8708.503518498095,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":567.0291252182727,\"quality\":1,\"demand\":60.51575066621245,\"demandRange\":[40,70],\"competition\":63.00759180399282,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":56.70291252182726,\"actualSellAmount\":0,\"productionAmount\":-56.70283876012661,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7681.633539310821,\"averagePrice\":7681.633539310822,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":1000,\"quality\":1,\"demand\":84.83177138976966,\"demandRange\":[80,99],\"competition\":97.53182259529052,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":67670.54331459859,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":73922.98507317035,\"maxSellPerCycle\":13.860186250395714,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":1400,\"quality\":1,\"demand\":97.14522191199869,\"demandRange\":[80,99],\"competition\":80.10466927173718,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":19425.88740592709,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":30000,\"quality\":1,\"demand\":73.15803899035905,\"demandRange\":[5,99],\"competition\":47.525255197387516,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":512445.0060206585,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":1260.0000000000005,\"sizeUsed\":949.2300969131977,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":283.51456260913636}}},\"offices\":{\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Sector-12\",\"size\":18,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":78.52631578947368,\"avgCharisma\":69.10526315789474,\"avgCreativity\":83.47368421052632,\"avgEfficiency\":75.94736842105263,\"totalExperience\":1599.753000000536,\"numEmployees\":18,\"totalSalary\":21380.101105264763,\"autoTea\":true,\"autoParty\":true,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":8445.40745526367,\"Operations\":1729.184877193102,\"Engineer\":1368.2435131580291,\"Business\":490.93832456143343,\"Management\":1010.0240175439195,\"Research & Development\":3847.016722807186,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":4,\"Engineer\":3,\"Business\":2,\"Management\":2,\"Research & Development\":7,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":4,\"Engineer\":3,\"Business\":2,\"Management\":2,\"Research & Development\":7,\"Intern\":0,\"Unassigned\":0}}},\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Aevum\",\"size\":18,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":72.78947368421052,\"avgCharisma\":77.52631578947368,\"avgCreativity\":71.78947368421052,\"avgEfficiency\":69.52631578947368,\"totalExperience\":1654.6680000005415,\"numEmployees\":18,\"totalSalary\":20712.10926315952,\"autoTea\":true,\"autoParty\":true,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":8046.324073684727,\"Operations\":1622.4829473685418,\"Engineer\":1314.077526315925,\"Business\":518.4944210526618,\"Management\":1056.1677894737447,\"Research & Development\":3535.1013894738535,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":4,\"Engineer\":3,\"Business\":2,\"Management\":2,\"Research & Development\":7,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":4,\"Engineer\":3,\"Business\":2,\"Management\":2,\"Research & Development\":7,\"Intern\":0,\"Unassigned\":0}}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Chongqing\",\"size\":18,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":75.21052631578948,\"avgCharisma\":79.05263157894737,\"avgCreativity\":75.84210526315789,\"avgEfficiency\":73.42105263157895,\"totalExperience\":1616.4000000004933,\"numEmployees\":18,\"totalSalary\":21239.62105263306,\"autoTea\":true,\"autoParty\":true,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":8280.169473684682,\"Operations\":1674.1894736843205,\"Engineer\":1343.3210526317027,\"Business\":526.3473684210802,\"Management\":1078.2736842105815,\"Research & Development\":3658.0378947369973,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":4,\"Engineer\":3,\"Business\":2,\"Management\":2,\"Research & Development\":7,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":4,\"Engineer\":3,\"Business\":2,\"Management\":2,\"Research & Development\":7,\"Intern\":0,\"Unassigned\":0}}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"New Tokyo\",\"size\":18,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":74.10526315789474,\"avgCharisma\":79.94736842105263,\"avgCreativity\":76.10526315789474,\"avgEfficiency\":78.47368421052632,\"totalExperience\":1587.0665000004346,\"numEmployees\":18,\"totalSalary\":21427.3047631592,\"autoTea\":true,\"autoParty\":true,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":8352.576332895154,\"Operations\":1704.555128655068,\"Engineer\":1360.2087302632672,\"Business\":526.5282558479776,\"Management\":1096.5301959064814,\"Research & Development\":3664.754022222359,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":4,\"Engineer\":3,\"Business\":2,\"Management\":2,\"Research & Development\":7,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":4,\"Engineer\":3,\"Business\":2,\"Management\":2,\"Research & Development\":7,\"Intern\":0,\"Unassigned\":0}}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Ishima\",\"size\":18,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":74.94736842105263,\"avgCharisma\":76.52631578947368,\"avgCreativity\":72.3157894736842,\"avgEfficiency\":73,\"totalExperience\":1709.1590000004867,\"numEmployees\":18,\"totalSalary\":21154.108578948828,\"autoTea\":true,\"autoParty\":true,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":8249.332628947832,\"Operations\":1674.044690058588,\"Engineer\":1360.889750000122,\"Business\":520.9743304093839,\"Management\":1064.3697134503468,\"Research & Development\":3629.0541450293917,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":4,\"Engineer\":3,\"Business\":2,\"Management\":2,\"Research & Development\":7,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":4,\"Engineer\":3,\"Business\":2,\"Management\":2,\"Research & Development\":7,\"Intern\":0,\"Unassigned\":0}}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Volhaven\",\"size\":18,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":75.26315789473684,\"avgCharisma\":70.84210526315789,\"avgCreativity\":72.36842105263158,\"avgEfficiency\":71.52631578947368,\"totalExperience\":1684.2965000004592,\"numEmployees\":18,\"totalSalary\":20712.889500001376,\"autoTea\":true,\"autoParty\":true,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":8126.007990789912,\"Operations\":1653.9091637427928,\"Engineer\":1344.3162302632727,\"Business\":497.3615014620139,\"Management\":1012.0493187135016,\"Research & Development\":3618.371776608331,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":4,\"Engineer\":3,\"Business\":2,\"Management\":2,\"Research & Development\":7,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":4,\"Engineer\":3,\"Business\":2,\"Management\":2,\"Research & Development\":7,\"Intern\":0,\"Unassigned\":0}}}},\"numAdVerts\":12}}],[\"BImgot\",{\"ctor\":\"Division\",\"data\":{\"name\":\"BImgot\",\"type\":\"Refinery\",\"researchPoints\":4378.247084184243,\"researched\":{\"ctor\":\"JSONSet\",\"data\":[]},\"requiredMaterials\":{\"Ore\":1},\"producedMaterials\":[\"Metal\"],\"products\":{\"ctor\":\"JSONMap\",\"data\":[]},\"makesProducts\":false,\"awareness\":68.5575598457581,\"popularity\":17.83734856390683,\"startingCost\":50000000000,\"realEstateFactor\":0.3,\"researchFactor\":0.5,\"hardwareFactor\":0.5,\"robotFactor\":0.4,\"aiCoreFactor\":0.3,\"advertisingFactor\":0.04,\"productionMult\":70.14552390254839,\"lastCycleRevenue\":2290407.2146901838,\"lastCycleExpenses\":472993.20096821774,\"thisCycleRevenue\":0,\"thisCycleExpenses\":4546798.111217992,\"state\":\"PURCHASE\",\"newInd\":false,\"warehouses\":{\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":12,\"city\":\"Sector-12\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":1479.6118750430603,\"quality\":1,\"demand\":49.81344124558576,\"demandRange\":[40,60],\"competition\":76.1710900907867,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":147.96118750430603,\"actualSellAmount\":0,\"productionAmount\":-147.9605952936655,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":502.8828259582365,\"averagePrice\":502.8828259582365,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":70,\"demandRange\":[20,90],\"competition\":50,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":8.681028811516853,\"demand\":75.62019299413947,\"demandRange\":[75,85],\"competition\":78.33954709554571,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":147.9605952936655,\"productionAmount\":147.9605952936655,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2139.3755434341433,\"averagePrice\":2133.579861539311,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":2133.579861539311,\"maxSellPerCycle\":245.40346283932604,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":10000,\"quality\":1,\"demand\":84.73067204850732,\"demandRange\":[80,90],\"competition\":81.37977842425548,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9118.2065498607,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":2000,\"quality\":1,\"demand\":96.02642963332029,\"demandRange\":[80,99],\"competition\":92.38819056293785,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":79109.70082863241,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":2000,\"quality\":1,\"demand\":80.25466588413771,\"demandRange\":[80,99],\"competition\":94.16957499432563,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":11893.727234366788,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":5000,\"quality\":1,\"demand\":81.98574529720149,\"demandRange\":[5,99],\"competition\":58.608516722942426,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":82827.3461298245,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":2160.000000000001,\"sizeUsed\":1839.7961187504307,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":147.96118750430603}},\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":12,\"city\":\"Aevum\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":1478.305411757428,\"quality\":1,\"demand\":49.22140851508085,\"demandRange\":[40,60],\"competition\":76.55120569972442,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":147.83054117574278,\"actualSellAmount\":0,\"productionAmount\":-147.82994800010204,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":495.4786828054202,\"averagePrice\":495.4786828054202,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":70,\"demandRange\":[20,90],\"competition\":50,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":8.681352041343695,\"demand\":76.60003354912668,\"demandRange\":[75,85],\"competition\":62.364555529194405,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":147.82994800010204,\"productionAmount\":147.82994800010204,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2593.718896026177,\"averagePrice\":2589.0621975491904,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":2589.0621975491904,\"maxSellPerCycle\":433.3569649793942,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":10000,\"quality\":1,\"demand\":82.92936137632898,\"demandRange\":[80,90],\"competition\":78.23924363626749,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8624.807484566998,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":2000,\"quality\":1,\"demand\":80,\"demandRange\":[80,99],\"competition\":87.36314219067495,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":80682.86338326766,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":2000,\"quality\":1,\"demand\":86.90550171966233,\"demandRange\":[80,99],\"competition\":81.4851223527025,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":15969.748086583,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":5000,\"quality\":1,\"demand\":54.39782114259844,\"demandRange\":[5,99],\"competition\":33.2365396391453,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":102267.06383137777,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":2160.000000000001,\"sizeUsed\":1839.7830541175742,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":147.83054117574278}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":12,\"city\":\"Chongqing\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":1457.7835987666035,\"quality\":1,\"demand\":51.559451144163845,\"demandRange\":[40,60],\"competition\":84.27087722769477,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":145.77835987666035,\"actualSellAmount\":0,\"productionAmount\":-145.77775217179146,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":485.0138591150076,\"averagePrice\":485.0138591150076,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":70,\"demandRange\":[20,90],\"competition\":50,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":8.672731288390391,\"demand\":82.09934357212082,\"demandRange\":[75,85],\"competition\":74.44058131920426,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":145.77775217179146,\"productionAmount\":145.77775217179146,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2721.251878686782,\"averagePrice\":2711.8317226884087,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":2711.8317226884087,\"maxSellPerCycle\":304.3041526113369,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":10000,\"quality\":1,\"demand\":83.48329960754751,\"demandRange\":[80,90],\"competition\":65.23706170205917,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8102.224793110914,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":2000,\"quality\":1,\"demand\":80,\"demandRange\":[80,99],\"competition\":83.7212726250351,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":76444.15523089319,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":2000,\"quality\":1,\"demand\":81.91235112273807,\"demandRange\":[80,99],\"competition\":98.48764414614676,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":14183.974319296187,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":5000,\"quality\":1,\"demand\":63.51859710085788,\"demandRange\":[5,99],\"competition\":65.52544684802012,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":78344.79988463304,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":2160.000000000001,\"sizeUsed\":1839.577835987666,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":145.77835987666035}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":12,\"city\":\"New Tokyo\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":1520.5291938666096,\"quality\":1,\"demand\":47.75457654671317,\"demandRange\":[40,60],\"competition\":77.05457218000605,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":152.05291938666096,\"actualSellAmount\":0,\"productionAmount\":-152.05235462384098,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":499.7726795811259,\"averagePrice\":499.7726795811259,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":70,\"demandRange\":[20,90],\"competition\":50,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":8.73299388483721,\"demand\":80.39223762456245,\"demandRange\":[75,85],\"competition\":62.58590731610179,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":152.05235462384098,\"productionAmount\":152.05235462384098,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3167.965259821896,\"averagePrice\":3167.965259821896,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":3167.9652598218954,\"maxSellPerCycle\":465.3146328406412,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":10000,\"quality\":1,\"demand\":85.21897085467937,\"demandRange\":[80,90],\"competition\":95,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7622.4739693202055,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":2000,\"quality\":1,\"demand\":84.51762166673649,\"demandRange\":[80,99],\"competition\":82.33393169899165,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":78234.33199085906,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":2000,\"quality\":1,\"demand\":86.6480155922628,\"demandRange\":[80,99],\"competition\":91.212947691542,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":14903.015108863281,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":5000,\"quality\":1,\"demand\":38.34291423786214,\"demandRange\":[5,99],\"competition\":26.591305447234692,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":80080.62014992817,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":2160.000000000001,\"sizeUsed\":1840.205291938666,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":152.05291938666096}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":12,\"city\":\"Ishima\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":1494.172076458945,\"quality\":1,\"demand\":45.71104225439789,\"demandRange\":[40,60],\"competition\":76.0374632596299,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":149.4172076458945,\"actualSellAmount\":0,\"productionAmount\":-149.41662529090635,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":495.4298337433808,\"averagePrice\":495.4298337433808,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":70,\"demandRange\":[20,90],\"competition\":50,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":8.69944168701397,\"demand\":83.66938610858125,\"demandRange\":[75,85],\"competition\":63.25672500866582,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":149.41662529090635,\"productionAmount\":149.41662529090635,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2725.0975575726948,\"averagePrice\":2726.51470689898,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":2726.51470689898,\"maxSellPerCycle\":478.33844074631645,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":10000,\"quality\":1,\"demand\":83.48024695709586,\"demandRange\":[80,90],\"competition\":80.15411386954145,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7563.338240953669,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":2000,\"quality\":1,\"demand\":85.31901826198775,\"demandRange\":[80,99],\"competition\":90.37416053365875,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":75755.36340424372,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":2000,\"quality\":1,\"demand\":93.47627583943196,\"demandRange\":[80,99],\"competition\":95.33096288474796,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":13873.171102710383,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":5000,\"quality\":1,\"demand\":75.87980293007709,\"demandRange\":[5,99],\"competition\":32.44758786607672,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":98007.60195789134,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":2160.000000000001,\"sizeUsed\":1839.9417207645895,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":149.4172076458945}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":12,\"city\":\"Volhaven\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":1482.6933494234745,\"quality\":1,\"demand\":50.89908610091482,\"demandRange\":[40,60],\"competition\":81.5192295112459,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":148.26933494234746,\"actualSellAmount\":0,\"productionAmount\":-148.26874534278778,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":499.98343369185346,\"averagePrice\":499.98343369185346,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":70,\"demandRange\":[20,90],\"competition\":50,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":8.70380717602638,\"demand\":82.76133234258988,\"demandRange\":[75,85],\"competition\":74.2378439529511,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":148.26874534278778,\"productionAmount\":148.26874534278778,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2087.3522133166707,\"averagePrice\":2074.4264159748905,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":2074.4264159748905,\"maxSellPerCycle\":316.50348739831827,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":10000,\"quality\":1,\"demand\":87.0319875512983,\"demandRange\":[80,90],\"competition\":84.9729993076416,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8082.136484824564,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":2000,\"quality\":1,\"demand\":96.62677118020481,\"demandRange\":[80,99],\"competition\":94.59662832792831,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":79719.3144177522,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":2000,\"quality\":1,\"demand\":87.71017928189552,\"demandRange\":[80,99],\"competition\":97.3550517805404,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":16713.6036099977,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":5000,\"quality\":1,\"demand\":59.02913654711343,\"demandRange\":[5,99],\"competition\":72.62321282950947,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":79293.2841587632,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":2160.000000000001,\"sizeUsed\":1839.8269334942347,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":148.26933494234746}}},\"offices\":{\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Sector-12\",\"size\":9,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":66.7,\"avgCharisma\":81,\"avgCreativity\":68.8,\"avgEfficiency\":69.5,\"totalExperience\":757.3899999999423,\"numEmployees\":9,\"totalSalary\":9994.169999999827,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":2870.9874444443985,\"Operations\":776.3888888888763,\"Engineer\":829.6633333333144,\"Business\":257.43722222221913,\"Management\":532.9744444444383,\"Research & Development\":474.5235555555506,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":1,\"Management\":1,\"Research & Development\":1,\"Intern\":2,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":1,\"Management\":1,\"Research & Development\":1,\"Intern\":2,\"Unassigned\":0}}},\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Aevum\",\"size\":9,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":71.5,\"avgCharisma\":78.6,\"avgCreativity\":75.5,\"avgEfficiency\":67.1,\"totalExperience\":732.6664999999405,\"numEmployees\":9,\"totalSalary\":10100.899499999821,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":2888.0939388888414,\"Operations\":785.2547777777647,\"Engineer\":830.062166666647,\"Business\":255.1036944444412,\"Management\":519.9473888888824,\"Research & Development\":497.725911111106,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":1,\"Management\":1,\"Research & Development\":1,\"Intern\":2,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":1,\"Management\":1,\"Research & Development\":1,\"Intern\":2,\"Unassigned\":0}}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Chongqing\",\"size\":9,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":75.5,\"avgCharisma\":69.8,\"avgCreativity\":74.4,\"avgEfficiency\":70.8,\"totalExperience\":610.1134999999432,\"numEmployees\":9,\"totalSalary\":9673.840499999831,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":2803.289838888844,\"Operations\":776.7007777777653,\"Engineer\":816.491166666648,\"Business\":233.89519444444136,\"Management\":475.87038888888264,\"Research & Development\":500.3323111111062,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":1,\"Management\":1,\"Research & Development\":1,\"Intern\":2,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":1,\"Management\":1,\"Research & Development\":1,\"Intern\":2,\"Unassigned\":0}}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"New Tokyo\",\"size\":9,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":78.7,\"avgCharisma\":78.8,\"avgCreativity\":81.5,\"avgEfficiency\":79.2,\"totalExperience\":742.9869999999536,\"numEmployees\":9,\"totalSalary\":10820.36099999986,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":3123.5050111110745,\"Operations\":865.3082222222122,\"Engineer\":910.7823333333181,\"Business\":261.8370555555531,\"Management\":541.2341111111061,\"Research & Development\":544.343288888885,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":1,\"Management\":1,\"Research & Development\":1,\"Intern\":2,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":1,\"Management\":1,\"Research & Development\":1,\"Intern\":2,\"Unassigned\":0}}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Ishima\",\"size\":9,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":75.2,\"avgCharisma\":78.4,\"avgCreativity\":76.7,\"avgEfficiency\":76.8,\"totalExperience\":656.020999999955,\"numEmployees\":9,\"totalSalary\":10259.762999999864,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":2968.465922222187,\"Operations\":818.2224444444348,\"Engineer\":858.0336666666519,\"Business\":253.4056111111087,\"Management\":524.6912222222173,\"Research & Development\":514.112977777774,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":1,\"Management\":1,\"Research & Development\":1,\"Intern\":2,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":1,\"Management\":1,\"Research & Development\":1,\"Intern\":2,\"Unassigned\":0}}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Volhaven\",\"size\":9,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":72.4,\"avgCharisma\":71.4,\"avgCreativity\":70.2,\"avgEfficiency\":76.6,\"totalExperience\":720.6149999999591,\"numEmployees\":9,\"totalSalary\":10008.044999999876,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":2914.018833333301,\"Operations\":809.2566666666578,\"Engineer\":864.7649999999866,\"Business\":240.75416666666447,\"Management\":500.9883333333289,\"Research & Development\":498.2546666666632,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":1,\"Management\":1,\"Research & Development\":1,\"Intern\":2,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":1,\"Management\":1,\"Research & Development\":1,\"Intern\":2,\"Unassigned\":0}}}},\"numAdVerts\":3}}]]},\"maxDivisions\":20,\"funds\":77709439265.64532,\"revenue\":18301386.07180133,\"expenses\":5023477.065182574,\"fundingRound\":1,\"public\":false,\"totalShares\":1500000000,\"numShares\":900000000,\"shareSalesUntilPriceUpdate\":1000000,\"shareSaleCooldown\":0,\"issueNewSharesCooldown\":0,\"dividendRate\":0,\"dividendTax\":0.15,\"investorShares\":600000000,\"issuedShares\":0,\"sharePrice\":4110.249343735544,\"storedCycles\":324962,\"unlocks\":{\"ctor\":\"JSONSet\",\"data\":[\"Warehouse API\",\"Office API\",\"Smart Supply\"]},\"upgrades\":{\"Smart Factories\":{\"level\":20,\"value\":1.6000000000000005},\"Smart Storage\":{\"level\":8,\"value\":1.8000000000000007},\"DreamSense\":{\"level\":8,\"value\":0.008},\"Wilson Analytics\":{\"level\":3,\"value\":1.0149999999999997},\"Nuoptimal Nootropic Injector Implants\":{\"level\":10,\"value\":2.000000000000001},\"Speech Processor Implants\":{\"level\":10,\"value\":2.000000000000001},\"Neural Accelerators\":{\"level\":10,\"value\":2.000000000000001},\"FocusWires\":{\"level\":10,\"value\":2.000000000000001},\"ABC SalesBots\":{\"level\":2,\"value\":1.02},\"Project Insight\":{\"level\":15,\"value\":1.7500000000000007}},\"previousTotalAssets\":167576660175.57913,\"totalAssets\":167709439265.64532,\"cycleValuation\":5104317000000,\"valuationsList\":[5104728000000,5097864000000,5100484000000,5097713000000,5089353000000,5088319000000,5093173000000,5098781000000,5095597000000,5104317000000],\"valuation\":5097032900000,\"state\":{\"ctor\":\"CorporationState\",\"data\":{\"state\":2}},\"seedFunded\":true}},\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"Sector-12\",\"Netburners\"],\"factionInvitations\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":88,\"moneyGainRatePerSecond\":75.38565679583253,\"onlineTimeSeconds\":120001.1999999256,\"ram\":8,\"totalMoneyGenerated\":8951607.605058016,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":88,\"moneyGainRatePerSecond\":75.38565679583253,\"onlineTimeSeconds\":119821.19999992577,\"ram\":8,\"totalMoneyGenerated\":8950804.509542175,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":88,\"moneyGainRatePerSecond\":75.38565679583253,\"onlineTimeSeconds\":119820.99999992576,\"ram\":8,\"totalMoneyGenerated\":8950428.49054741,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":88,\"moneyGainRatePerSecond\":75.38565679583253,\"onlineTimeSeconds\":119820.99999992576,\"ram\":8,\"totalMoneyGenerated\":8949987.086752497,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":87,\"moneyGainRatePerSecond\":74.52900160497079,\"onlineTimeSeconds\":119820.79999992576,\"ram\":8,\"totalMoneyGenerated\":8848811.554862686,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":87,\"moneyGainRatePerSecond\":74.52900160497079,\"onlineTimeSeconds\":119820.79999992576,\"ram\":8,\"totalMoneyGenerated\":8848271.63353435,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":87,\"moneyGainRatePerSecond\":74.52900160497079,\"onlineTimeSeconds\":119820.59999992576,\"ram\":8,\"totalMoneyGenerated\":8847808.860331025,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":87,\"moneyGainRatePerSecond\":74.52900160497079,\"onlineTimeSeconds\":119760.39999992581,\"ram\":8,\"totalMoneyGenerated\":8846967.494567217,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":87,\"moneyGainRatePerSecond\":74.52900160497079,\"onlineTimeSeconds\":119760.39999992581,\"ram\":8,\"totalMoneyGenerated\":8846636.40176757,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":87,\"moneyGainRatePerSecond\":74.52900160497079,\"onlineTimeSeconds\":119280.19999992625,\"ram\":8,\"totalMoneyGenerated\":8839857.323452465,\"name\":\"hacknet-node-9\"}}],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":-4649.027499999917,\"numPeopleKilled\":0,\"location\":\"Alpha Enterprises\",\"money\":103349489.9460658,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-284160,\"codingcontract\":0,\"corporation\":0,\"crime\":190314421.6410361,\"gang\":0,\"hacking\":11767031.255584333,\"hacknet\":88881180.96102205,\"hacknet_expenses\":-5130096.911563547,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":103348376.9460658,\"work\":0,\"servers\":0,\"other\":-2200000,\"augmentations\":-180000000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-2629632,\"codingcontract\":0,\"corporation\":0,\"crime\":737261061.641056,\"gang\":0,\"hacking\":53765104.7735152,\"hacknet\":231103409.80021784,\"hacknet_expenses\":-31658508.834573537,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":149551426.9017285,\"work\":0,\"servers\":-500506790.06743765,\"other\":-2900000,\"augmentations\":-334883218.41539997}},\"playtimeSinceLastAug\":120009600,\"playtimeSinceLastBitnode\":340349400,\"lastAugReset\":1699740474922,\"lastNodeReset\":1699520134956,\"purchasedServers\":[],\"scriptProdSinceLastAug\":1890806.6723891292,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,2]]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1698143775838},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1698145455843},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1698146115849},{\"ID\":\"WORKOUT\",\"unlockedOn\":1698148695843},{\"ID\":\"TOR\",\"unlockedOn\":1698149535854},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1698151095842},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1698151335842},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1698151635846},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1698154575844},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1698154815845},{\"ID\":\"FROZE\",\"unlockedOn\":1698308283591},{\"ID\":\"NITESEC\",\"unlockedOn\":1698315243602},{\"ID\":\"TRAVEL\",\"unlockedOn\":1698325803591},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1698455311823},{\"ID\":\"DONATION\",\"unlockedOn\":1698538080066},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1698541620050},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1698566851474},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1698571351468},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1698571471475},{\"ID\":\"4S\",\"unlockedOn\":1698575311467},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1698739718915},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1698739838909},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1698741758910},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1698827725138},{\"ID\":\"SF1.1\",\"unlockedOn\":1698913793723},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1699519438328},{\"ID\":\"CORPORATION\",\"unlockedOn\":1699520218332}],\"terminalCommandHistory\":[\"./thief.js n00dles -t 4\",\"cls\",\"ps\",\"kill 5442\",\"cls\",\"biotic 1 --no-vps-upgrade\",\"run ./node-nurse.js \",\"run thief.js n00dles -t 6\",\"run thief.js n00dles -t 5\",\"run thief.js n00dles -t 4\",\"cls\",\"ps\",\"cls\",\"biotic 1 --no-vps-upgrade\",\"./node-nurse.js \",\"./thief.js n00dles -t 100\",\"./thief.js n00dles -t 50\",\"./thief.js n00dles -t 30\",\"free\",\"kill 19\",\"./thief.js n00dles -t 50\",\"./thief.js n00dles -t 40\",\"free\",\"cls\",\"p\",\"ps\",\"kill 2\",\"cls\",\"biotic 1 --no-vps-upgrade\",\"./thief.js n00dles -t 50\",\"./thief.js n00dles -t 42\",\"cls\",\"biotic 1 --no-vps-upgrade\",\"cls\",\"./thief.js n00dles -t 50\",\"./thief.js n00dles -t 40\",\"ps\",\"free\",\"cls\",\"biotic 1 --no-vps-upgrade\",\"buy -l\",\"buy BruteSSH.exe \",\"buy FTPCrack.exe \",\"./thief.js n00dles -t 38\",\"free\",\"kill 303\",\"./thief.js n00dles -t 48\",\"./thief.js n00dles -t 45\",\"free\",\"cls\"],\"lastUpdate\":1699860484699,\"lastSave\":1699860463510,\"totalPlaytime\":1716958800,\"currentWork\":null,\"focus\":false,\"entropy\":0,\"identifier\":\"1780e40f4efd62\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"27.2.2.5\",\"isConnectedTo\":true,\"maxRam\":128,\"messages\":[\"hackers-starting-handbook.lit\",\"corporation-management-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"home\"}}],[\"crawler.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { forEach } from \\\"utils.js\\\";\\n\\nexport function Crawler(ns, options){\\n  \\n  var resultLimit = options.resultLimit;\\n  var rootHost = options.rootHost;\\n  \\n  // These host names have already been scanned.\\n  var completeHosts = [];\\n  \\n  // These host names are recently discovered and\\n  // may not have been scanned.\\n  var discoveredHosts = [];\\n  \\n  // Returns false when there is no more work to do.\\n  async function step(){\\n    \\n    // Run out\\n    if(discoveredHosts.length == 0){\\n      return false;\\n    }\\n    \\n    // Result limit reached\\n    if(discoveredHosts.length >= resultLimit){\\n      return false;\\n    }\\n    \\n    // Processing\\n    var hostname = discoveredHosts.pop();\\n    var alreadyScanned = completeHosts.indexOf(hostname) >= 0;\\n    if (!alreadyScanned){\\n      completeHosts.push(hostname);\\n      var siblings = await ns.scan(hostname);\\n      forEach(siblings, function(i, e){\\n        discoveredHosts.push(e);\\n      });\\n    }\\n    return true;\\n    \\n  }\\n  \\n  async function crawl(){\\n    completeHosts = [];\\n    discoveredHosts = [rootHost];\\n    while(await step()){\\n      await ns.sleep(10);\\n    }\\n    return completeHosts;\\n  }\\n  \\n  return {\\n    crawl\\n  };\\n  \\n}\\n\",\"filename\":\"crawler.js\",\"server\":\"home\"}}],[\"traceroute.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { forEach, pushAll } from \\\"./utils.js\\\";\\n\\nfunction HostCollection(hostnames){\\n  \\n  var items = [...hostnames];\\n  \\n  function addAll(newHostnames){\\n    pushAll(items, newHostnames);\\n  }\\n  \\n  function notContains(hostname){\\n    return items.indexOf(hostname) < 0;\\n  }\\n  \\n  return {\\n    addAll,\\n    notContains\\n  }\\n  \\n}\\n\\nfunction ServerRoute (ns, knownHosts, parentRoute, hostname){\\n  \\n  function getRoute(){\\n    return [hostname].concat([...parentRoute]);\\n  }\\n  \\n  async function findChildren(){\\n    var neighbours = await ns.scan(hostname);\\n    var newHosts = neighbours.filter(knownHosts.notContains);\\n    knownHosts.addAll(newHosts);\\n    var children = newHosts.map(function(childHostname){\\n        return new ServerRoute(ns, knownHosts, getRoute(), childHostname);\\n      });\\n    return children;\\n  }\\n  \\n  return {\\n    hostname,\\n    getRoute,\\n    findChildren\\n  }\\n  \\n}\\n\\nexport function TraceRoute (ns, options){\\n  \\n  var resultLimit = options.resultLimit;\\n  var rootHost = options.rootHost;\\n  \\n  async function crawl(){\\n    \\n    var knownHostCollection = new HostCollection([rootHost]);\\n    var rootRoute = new ServerRoute(ns, knownHostCollection, [], rootHost);\\n    var unscannedHosts = [rootRoute];\\n    var scannedHosts = [];\\n    \\n    while(unscannedHosts.length > 0){\\n      \\n      var nextHost = unscannedHosts.pop();\\n      \\n      var resultLimitReached =\\n        unscannedHosts.length > resultLimit ||\\n        scannedHosts.length > resultLimit;\\n      if(resultLimitReached){\\n        ns.print(\\\"Trace route result limit reached.\\\");\\n        break;\\n      }\\n      \\n      var children = await nextHost.findChildren();\\n      pushAll(unscannedHosts, children);\\n      scannedHosts.push(nextHost);\\n      \\n    }\\n    \\n    return scannedHosts;\\n    \\n  }\\n  \\n  return {\\n    crawl\\n  };\\n  \\n}\\n\\nfunction printRoute(ns, route, connectMode){\\n  var hostnames = route.getRoute().reverse();\\n  var joiner = connectMode ? \\\"; connect \\\" : \\\" -> \\\";\\n  ns.tprint(hostnames.join(joiner));\\n}\\n\\nexport async function main(ns){\\n  \\n  var traceRoute = new TraceRoute(ns, {\\n    resultLimit: 1000,\\n    rootHost: \\\"home\\\"\\n  });\\n  var allRoutes = await traceRoute.crawl();\\n  \\n  var connectMode;\\n  if(ns.args.length >= 2 && ns.args[1] == \\\"--connect\\\"){\\n    connectMode = true;\\n  } else {\\n    connectMode = false;\\n  }\\n\\n  connectMode = true; // Because fuck it\\n  \\n  var matchingRoutes;\\n  if(ns.args.length == 0){\\n    matchingRoutes = allRoutes;\\n  } else {\\n    var targetHostname = ns.args[0];\\n    matchingRoutes = allRoutes\\n      .filter(function(route){\\n        return route.hostname == targetHostname;\\n      });\\n  }\\n  \\n  forEach(matchingRoutes, function(i, route){\\n    printRoute(ns, route, connectMode);\\n  });\\n\\n}\",\"filename\":\"traceroute.js\",\"server\":\"home\"}}],[\"thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nfunction Thief (ns, target) {\\n  \\n  var lastMoney = ns.getServerMoneyAvailable(target);\\n  var maxMoney = ns.getServerMaxMoney(target) * 0.95;\\n  \\n  var lastSecurity = ns.getServerSecurityLevel(target);\\n  var minSecurity = ns.getServerMinSecurityLevel(target) + 1;\\n\\n  async function heuristic(){\\n    \\n    var currentMoney = ns.getServerMoneyAvailable(target);\\n    var targetMoney = Math.min(maxMoney, lastMoney * 1.05 + 1);\\n    \\n    var currentSecurity = ns.getServerSecurityLevel(target);\\n    var targetSecurity = Math.max(minSecurity, lastSecurity * 0.8);\\n    \\n    ns.print(\\\"### Target security: \\\", currentSecurity, \\\" / \\\", targetSecurity);\\n    ns.print(\\\"### Target money: \\\", currentMoney, \\\" / \\\", targetMoney);\\n    \\n    if (currentSecurity > targetSecurity) {\\n      await ns.weaken(target);\\n    } else if (currentMoney < targetMoney) {\\n      await ns.grow(target);\\n    } else {\\n      lastSecurity = currentSecurity;\\n      lastMoney = currentMoney;\\n      await ns.hack(target);\\n    }\\n    \\n    await ns.sleep(Math.floor(1000*Math.random()));\\n    \\n  }\\n\\n  async function start() {\\n    await safeLoop(ns, heuristic);\\n  }\\n\\n  return {\\n    start\\n  };\\n\\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  thief.js <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var argc = ns.args.length;\\n  if(argc != 1){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var target = ns.args[0];\\n  var thief = new Thief(ns, target);\\n  await thief.start();\\n  \\n}\",\"filename\":\"thief.js\",\"server\":\"home\"}}],[\"root-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { forEachAsync } from \\\"./utils.js\\\";\\n\\nexport async function portPoppers(ns){\\n  \\n  var possiblePoppers = [\\n    { bin: \\\"FTPCrack.exe\\\", invoke: ns.ftpcrack },\\n    { bin: \\\"BruteSSH.exe\\\", invoke: ns.brutessh },\\n    { bin: \\\"relaySMTP.exe\\\", invoke: ns.relaysmtp },\\n    { bin: \\\"HTTPWorm.exe\\\", invoke: ns.httpworm },\\n    { bin: \\\"SQLInject.exe\\\", invoke: ns.sqlinject }\\n  ];\\n  \\n  var installedPopppers = [];\\n  await forEachAsync(possiblePoppers, async function(i, e){\\n    if (await ns.fileExists(e.bin, \\\"home\\\")){\\n      installedPopppers.push(e);\\n    }\\n  });\\n  \\n  return installedPopppers;\\n  \\n}\\n\\nexport async function isVulnerable(ns, hostname) {\\n  var poppers = await portPoppers(ns);\\n  var myLevel = await ns.getHackingLevel();\\n  var requiredLevel = await ns.getServerRequiredHackingLevel(hostname);\\n  var portsRequired = await ns.getServerNumPortsRequired(hostname);\\n  return myLevel >= requiredLevel && poppers.length >= portsRequired;\\n}\\n\\nexport async function rootServer(ns, hostname){\\n  var hasRootAccess = await ns.hasRootAccess(hostname);\\n  var vulnerable = await isVulnerable(ns, hostname);\\n  if(!hasRootAccess && vulnerable){\\n    var poppers = await portPoppers(ns);\\n    await forEachAsync(poppers, async function(i, e){\\n      await e.invoke(hostname);\\n    });\\n    await ns.nuke(hostname);\\n    return true;\\n  } else {\\n    return false;\\n  }\\n}\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  root-server.js <hostname>\\\");\\n}\\n\\nexport async function main(ns) {\\n  if (ns.args.length == 1){\\n    if(await rootServer(ns, ns.args[0])){\\n      ns.tprint(\\\"Success\\\");\\n    } else {\\n      ns.tprint(\\\"Failed\\\");\\n    }\\n  } else {\\n    printHelp(ns);\\n  }\\n}\",\"filename\":\"root-server.js\",\"server\":\"home\"}}],[\"node-nurse.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nfunction defaultOptions(){\\n  return {\\n    maxNodes: 32,\\n    maxNodeLevel: 200,\\n    maxNodeRam: 64,\\n    maxNodeCores: 16\\n  };\\n};\\n\\nexport function NodeNurse(ns, options){\\n  \\n  var maxNodes = options.maxNodes;\\n  var maxNodeLevel = options.maxNodeLevel;\\n  var maxNodeRam = options.maxNodeRam;\\n  var maxNodeCores = options.maxNodeCores;\\n  \\n  async function buyNodes(){\\n    while(await ns.hacknet.numNodes() < maxNodes){\\n      var currentFunds = await ns.getServerMoneyAvailable(\\\"home\\\");\\n      var cost = await ns.hacknet.getPurchaseNodeCost();\\n      if (cost > currentFunds) break;\\n      var newNode = await ns.hacknet.purchaseNode();\\n      if (newNode < 0) {\\n        ns.print(\\\"Attempted node purchase failed\\\");\\n        break;\\n      }\\n      await ns.sleep(100);\\n    }\\n  }\\n  \\n  async function nodesByLowest(getSize){\\n    var nodeCount = await ns.hacknet.numNodes();\\n    var scored = [];\\n    for(var i = 0; i < nodeCount; i++){\\n      scored.push({\\n        index: i,\\n        score: await getSize(i)\\n      });\\n    }\\n    return scored\\n      .sort(function(a, b){\\n        return a.score - b.score;\\n      })\\n      .map(function(x){\\n        return x.index;\\n      });\\n  }\\n  \\n  async function increaseOn(\\n      nodeId,\\n      max,\\n      getSize,\\n      getCost,\\n      upgrade){\\n    \\n    if(await getSize(nodeId) >= max) return false;\\n    \\n    var currentFunds = await ns.getServerMoneyAvailable(\\\"home\\\");\\n    var cost = await getCost(nodeId, 1);\\n    if (cost > currentFunds) return false;\\n    \\n    var success = await upgrade(nodeId);\\n    if (!success) {\\n      ns.print(\\\"Attempted upgrade failed\\\");\\n    };\\n    \\n    return success;\\n      \\n  }\\n  \\n  async function increase(max, getSize, getCost, upgrade){\\n    for(var success = true; success; ){\\n      var nodes = await nodesByLowest(getSize);\\n      var success = await increaseOn(\\n          nodes[0],\\n          max,\\n          getSize,\\n          getCost,\\n          upgrade);\\n    }\\n  }\\n  \\n  async function getCoreCount(i){\\n    var stats = await ns.hacknet.getNodeStats(i);\\n    return stats.cores;\\n  }\\n  \\n  async function getRamSize(i){\\n    var stats = await ns.hacknet.getNodeStats(i);\\n    return stats.ram;\\n  }\\n  \\n  async function getLevel(i){\\n    var stats = await ns.hacknet.getNodeStats(i);\\n    return stats.level;\\n  }\\n  \\n  async function maintain(){\\n    await buyNodes();\\n    await increase(\\n      maxNodeRam,\\n      getRamSize,\\n      ns.hacknet.getRamUpgradeCost,\\n      ns.hacknet.upgradeRam);\\n    await increase(\\n      maxNodeLevel,\\n      getLevel,\\n      ns.hacknet.getLevelUpgradeCost,\\n      ns.hacknet.upgradeLevel);\\n    await increase(\\n      maxNodeCores,\\n      getCoreCount,\\n      ns.hacknet.getCoreUpgradeCost,\\n      ns.hacknet.upgradeCore);\\n  }\\n  \\n  return {\\n    maintain\\n  };\\n  \\n}\\n\\nexport async function main(ns){\\n  var nurse = new NodeNurse(ns, defaultOptions());\\n  for(;;){\\n    await nurse.maintain();\\n    await ns.sleep(60 * 1000);\\n  }\\n}\",\"filename\":\"node-nurse.js\",\"server\":\"home\"}}],[\"vps.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport function getVpsNames(){\\n  return [\\n    \\\"vps-absol\\\",\\n    \\\"vps-arbok\\\",\\n    \\\"vps-arcanine\\\",\\n    \\\"vps-bonsly\\\",\\n    \\\"vps-buneary\\\",\\n    \\\"vps-charmander\\\",\\n    \\\"vps-clefairy\\\",\\n    \\\"vps-cubone\\\",\\n    \\\"vps-dartrix\\\",\\n    \\\"vps-diglet\\\",\\n    \\\"vps-dragonite\\\",\\n    \\\"vps-eevee\\\",\\n    \\\"vps-ekans\\\",\\n    \\\"vps-gengar\\\",\\n    \\\"vps-latios\\\",\\n    \\\"vps-marowak\\\",\\n    \\\"vps-meowth\\\",\\n    \\\"vps-nuzleaf\\\",\\n    \\\"vps-pikachu\\\",\\n    \\\"vps-poochyena\\\",\\n    \\\"vps-rattata\\\",\\n    \\\"vps-scorbunny\\\",\\n    \\\"vps-treecko\\\",\\n    \\\"vps-vulpix\\\",\\n    \\\"vps-zigzagoon\\\"\\n  ];\\n}\\n\\nasync function quote(ns, size){\\n  var dollars = await ns.getPurchasedServerCost(size);\\n  var kilodollars = dollars / 1000;\\n  ns.tprint(\\\"$\\\" + kilodollars + \\\"k\\\");\\n}\\n\\nasync function buy(ns, name, size){\\n  var newServer = await ns.purchaseServer(name, size);\\n  if (newServer == \\\"\\\"){\\n    ns.tprint(\\\"Failed to purchase server.\\\");\\n  }\\n}\\n\\nasync function sell(ns, name){\\n  var success = await ns.deleteServer(name);\\n  if (!success){\\n    ns.tprint(\\\"Failed to sell server.\\\");\\n  }\\n}\\n\\nfunction Vps(ns, options){\\n  \\n  var hostname = options.hostname;\\n  var decommission = options.decommission;\\n  var commission = options.commission;\\n  var trace = options.trace;\\n  \\n  async function getSize(){\\n    var exists = await ns.serverExists(hostname);\\n    if (exists){\\n      return await ns.getServerMaxRam(hostname);\\n    } else {\\n      return 0;\\n    }\\n  }\\n  \\n  async function quote(size){\\n    return await ns.getPurchasedServerCost(size);\\n  }\\n  \\n  async function install(size){\\n    var exists = await ns.serverExists(hostname);\\n    if (exists){\\n      await decommission(hostname);\\n      var deleteSuccess = await ns.deleteServer(hostname);\\n      if(!deleteSuccess){\\n        await trace(\\\"Failed to delete server \\\" + hostname);\\n        return false;\\n      }\\n    }\\n    var boughtServerName = await ns.purchaseServer(hostname, size);\\n    if(boughtServerName == \\\"\\\"){\\n      await trace(\\\"Failed to purchase server \\\" + hostname);\\n      return false;\\n    }\\n    await ns.sleep(1000);\\n    await commission(hostname);\\n    return true;\\n  }\\n  \\n  async function considerUpgrade(levelIncrease){\\n    \\n    var currentSize = await getSize();\\n    var newSize;\\n    if (currentSize > 0){\\n      var newSize = currentSize * 2**levelIncrease;\\n    } else {\\n      var newSize = 2**(levelIncrease + 2); // At least 8\\n    }\\n    \\n    async function quoteNewSize(){\\n      return await quote(newSize);\\n    }\\n    \\n    async function installNewSize(){\\n      return await install(newSize);\\n    }\\n    \\n    return {\\n      hostname: hostname,\\n      size: newSize,\\n      quote: quoteNewSize,\\n      install: installNewSize\\n    };\\n    \\n  }\\n\\n  async function currentState(){\\n    \\n    var currentSize = await getSize();\\n    \\n    async function quoteNothing(){\\n      return 0;\\n    }\\n    \\n    async function doNothing(){ }\\n    \\n    return {\\n      hostname: hostname,\\n      size: currentSize,\\n      quote: quoteNothing,\\n      install: doNothing\\n    };\\n    \\n  }\\n  \\n  return {\\n    hostname,\\n    currentState,\\n    considerUpgrade\\n  };\\n  \\n}\\n\\nexport function VpsManager(ns, options){\\n  \\n  var hostnames = options.hostnames;\\n  var decommission = options.decommission;\\n  var commission = options.commission;\\n  var trace = options.trace;\\n  \\n  var servers = hostnames.map(\\n    function(hostname){\\n      return new Vps(ns, {\\n        hostname,\\n        decommission,\\n        commission,\\n        trace\\n      });\\n    });\\n    \\n  async function quoteAll(proposals){\\n    var quote = 0;\\n    for(var i in proposals){\\n      quote += await proposals[i].upgrade.quote();\\n    }\\n    return quote;\\n  }\\n  \\n  async function currentPortfolio(){\\n    var serverStates = [];\\n    for(var i in servers){\\n      serverStates.push({\\n        server: servers[i],\\n        levelIncrease: 0,\\n        upgrade: await servers[i].currentState()\\n      });\\n    }\\n    return serverStates;\\n  }\\n  \\n  async function planUpgrade(){\\n    \\n    var proposals = await currentPortfolio();\\n    proposals.sort(function(a, b){ return a.upgrade.size - b.upgrade.size; });\\n    \\n    for(var i = 0; i < proposals.length; i++){\\n      \\n      // Current proposal\\n      var proposal = proposals[i];\\n      var server = proposal.server;\\n      var levelIncreaseBefore = proposal.levelIncrease;\\n      var upgradeBefore = proposal.upgrade;\\n      var quoteBefore = await upgradeBefore.quote();\\n      var totalQuoteBefore = await quoteAll(proposals);\\n      \\n      // Upgrade Server as much as possible\\n      for(var levelIncreaseAfter = levelIncreaseBefore; ; levelIncreaseAfter++){\\n        \\n        var upgradeAfter = await server.considerUpgrade(levelIncreaseAfter);\\n        var quoteAfter = await upgradeAfter.quote();\\n        var totalQuoteAfter = totalQuoteBefore - quoteBefore + quoteAfter;\\n        \\n        // Can afford it? Update the proposal\\n        var funds = await ns.getServerMoneyAvailable(\\\"home\\\");\\n        if(totalQuoteAfter <= funds){\\n          proposal.levelIncrease = levelIncreaseAfter;\\n          proposal.upgrade = upgradeAfter;\\n        } else {\\n          break;\\n        }\\n        \\n      }\\n      \\n    }\\n    \\n    return proposals;\\n    \\n  }\\n  \\n  async function traceUpgrade(proposals){\\n    for(var i in proposals){\\n      if(proposals[i].levelIncrease > 0){\\n        await trace(\\n          proposals[i].server.hostname\\n          + \\\": +\\\"\\n          + proposals[i].levelIncrease);\\n      }\\n    }\\n  }\\n  \\n  async function executeUpgrade(proposals){\\n    for(var i in proposals){\\n      await proposals[i].upgrade.install();\\n    }\\n  }\\n  \\n  async function upgrade(){\\n    var proposals = await planUpgrade();\\n    await traceUpgrade(proposals);\\n    await executeUpgrade(proposals);\\n  }\\n  \\n  return {\\n    upgrade\\n  }\\n  \\n}\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  vps.js quote <log2(ram)>\\\");\\n  ns.tprint(\\\"  vps.js buy <name> <log2(ram)>\\\");\\n  ns.tprint(\\\"  vps.js sell <name>\\\");\\n  ns.tprint(\\\"  vps.js upgrade\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  var managerOptions = {\\n    hostnames: getVpsNames(),\\n    decommission: async function(hostname){\\n        await ns.killall(hostname);\\n      },\\n    commission: async function(hostname) {\\n        ns.tprint(hostname, \\\" has been upgraded.\\\");\\n      },\\n    trace: async function(msg){\\n        ns.tprint(msg);\\n      }\\n  };\\n\\n  if (ns.args.length == 2 && ns.args[0] == \\\"quote\\\"){\\n    await quote(ns, 2**ns.args[1]);\\n  } else if (ns.args.length == 3 && ns.args[0] == \\\"buy\\\"){\\n    await buy(ns, ns.args[1], 2**ns.args[2]);\\n  } else if (ns.args.length == 2 && ns.args[0] == \\\"sell\\\"){\\n    await sell(ns, ns.args[1]);\\n  } else if (ns.args.length == 1 && ns.args[0] == \\\"upgrade\\\"){\\n    var manager = new VpsManager(ns, managerOptions);\\n    await manager.upgrade();\\n    ns.tprint(\\\"Done.\\\");\\n  } else {\\n    printHelp(ns);\\n  }\\n\\n}\",\"filename\":\"vps.js\",\"server\":\"home\"}}],[\"reach.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { Crawler } from \\\"./crawler.js\\\";\\nimport { InstallThief } from \\\"./install-thief.js\\\";\\nimport { rootServer } from \\\"./root-server.js\\\";\\nimport { ServerFinder } from \\\"./find-server.js\\\";\\nimport { forEach, forEachAsync } from \\\"./utils.js\\\";\\nimport { getVpsNames, VpsManager } from \\\"./vps.js\\\";\\n\\nexport function Reach(ns, options){\\n  \\n  var targetLimit = options.targets;\\n  var crawler = options.crawler;\\n  var installer = options.installer;\\n  var decommission = options.decommission;\\n  var trace = options.trace;\\n  \\n  var serverTargets = { };\\n  \\n  function getCurrentServerTarget(server){\\n    return serverTargets[server] || null;\\n  }\\n  \\n  function setCurrentServerTarget(server, target){\\n    serverTargets[server] = target;\\n  }\\n  \\n  async function generateSchedule(servers){\\n    \\n    var hostFinder = new ServerFinder(ns, {\\n      hostnames: servers,\\n      limit: null,\\n      onlyWithRootAccess: true,\\n      onlyNotHome: true,\\n      onlyWithMoney: false,\\n      onlyNotMine: false\\n    });\\n    var bestHosts = await hostFinder.findBestHosts();\\n    var targetFinder = new ServerFinder(ns, {\\n      hostnames: servers,\\n      limit: targetLimit,\\n      onlyWithRootAccess: true,\\n      onlyNotHome: true,\\n      onlyWithMoney: true,\\n      onlyNotMine: true\\n    });\\n    var bestTargets = await targetFinder.findBestTargets();\\n    \\n    var schedule = {};\\n    if(bestTargets.length > 0){\\n      bestHosts.sort();\\n      bestTargets.sort();\\n      forEach(bestHosts, function(i, host){\\n        var correspondingTargetIndex = i % bestTargets.length;\\n        var correspondingTarget = bestTargets[correspondingTargetIndex];\\n        schedule[host] = correspondingTarget;\\n      });\\n    }\\n    return schedule;\\n    \\n  }\\n  \\n  async function tryRootServer(hostname){\\n    var success = await rootServer(ns, hostname);\\n    if (success){\\n      await trace(\\\"> Rooted server \\\" + hostname);\\n    }\\n  }\\n  \\n  async function tryInstall(hostname, target){\\n    var canInstall =\\n      await ns.hasRootAccess(hostname) &&\\n      await ns.hasRootAccess(target) &&\\n      hostname != \\\"home\\\";\\n    if (canInstall){\\n      await trace(\\\"> Updating: \\\" + hostname + \\\" targeting \\\" + target);\\n      await installer.installMax(hostname, target);\\n      setCurrentServerTarget(hostname, target);\\n    } else {\\n      await trace(\\\"! Cannot update: \\\" + hostname);\\n    }\\n  }\\n  \\n  async function deployEverywhere(forceReinstall){\\n    \\n    // Root servers\\n    var servers = await crawler.crawl();\\n    await forEachAsync(servers, async function(i, e){\\n      await tryRootServer(e);\\n    });\\n    \\n    // Schedule hosts and targets\\n    var schedule = await generateSchedule(servers);\\n    for(var server in schedule){\\n      var newTarget = schedule[server] || null;\\n      var currentTarget = getCurrentServerTarget(server);\\n      var reinstall =\\n        newTarget != currentTarget ||\\n        forceReinstall;\\n      if (reinstall && newTarget){\\n        await tryInstall(server, newTarget);\\n        await ns.sleep(500);\\n      } else {\\n        trace(\\\"> No update for \\\" + server);\\n      }\\n    }\\n\\n    trace(\\\"> Deployment complete.\\\");\\n    \\n  }\\n  \\n  async function removeEverywhere(){\\n    var servers = await crawler.crawl();\\n    await forEachAsync(servers, async function(i, e){\\n      if(e != \\\"home\\\"){\\n        await installer.uninstall(e);\\n      }\\n    });\\n  }\\n  \\n  async function upgradeVps(){\\n    var vpsHosts = await getVpsNames();\\n    var manager = new VpsManager(ns, {\\n      hostnames: vpsHosts,\\n      decommission: decommission,\\n      commission: function(){ },\\n      trace: trace\\n    });\\n    await manager.upgrade();\\n    trace(\\\"> VPS upgrade complete.\\\");\\n  }\\n  \\n  async function manage(){\\n    var upgradePeriod = 60*1000;\\n    for(;;){\\n      await upgradeVps();\\n      await deployEverywhere(false);\\n      await ns.sleep(upgradePeriod);\\n    }\\n  }\\n  \\n  return {\\n    deployEverywhere,\\n    manage,\\n    removeEverywhere\\n  };\\n  \\n}\\n\\nexport async function main(ns) {\\n  \\n  var install =\\n    ns.args.length == 2 &&\\n    ns.args[0] == \\\"install\\\";\\n  var manage =\\n    ns.args.length == 2 &&\\n    ns.args[0] == \\\"manage\\\";\\n  var uninstall = \\n    ns.args.length == 1 &&\\n    ns.args[0] == \\\"uninstall\\\";\\n  var target = ns.args.length >= 2 ? ns.args[1] : null;\\n  \\n  var crawler = new Crawler(ns, {\\n    resultLimit: 1000,\\n    rootHost: \\\"home\\\"\\n  });\\n  var installer = new InstallThief(ns);\\n  var reach = new Reach(ns, {\\n    targets: target,\\n    crawler: crawler,\\n    installer: installer,\\n    decommission: async function(hostname){ await ns.killall(hostname); },\\n    trace: manage ? ns.print : ns.tprint\\n  });\\n  \\n  if (install){\\n    await reach.deployEverywhere(true);\\n    ns.tprint(\\\"Done.\\\");\\n  } else if (manage){\\n    await reach.manage();\\n  } else if (uninstall){\\n    await reach.removeEverywhere();\\n    ns.tprint(\\\"Done.\\\");\\n  } else {\\n    ns.tprint(\\\"Usage:\\\");\\n    ns.tprint(\\\"  reach.js install <target limit> <host>\\\");\\n    ns.tprint(\\\"  reach.js manage <target limit>\\\");\\n    ns.tprint(\\\"  reach.js uninstall\\\");\\n  }\\n  \\n}\",\"filename\":\"reach.js\",\"server\":\"home\"}}],[\"cache.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar caches = { };\\n\\nexport function Cache(ns, name){\\n  \\n  var localhost = ns.getHostname();\\n  var cache = null;\\n  \\n  function load(key){\\n    return cache[key];\\n  }\\n\\n  function save(key, value){\\n    cache[key] = value;\\n  }\\n  \\n  async function open(){\\n    \\n    if (typeof(caches[name]) == \\\"undefined\\\"){\\n      caches[name] = { };\\n    }\\n    cache = caches[name];\\n    \\n    return {\\n      load,\\n      save\\n    };\\n    \\n  }\\n  \\n  return {\\n    open\\n  };\\n  \\n}\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cache.js <cache-name> <key>\\\");\\n  ns.tprint(\\\"  cache.js <cache-name> <key> <value>\\\");\\n}\\n\\nexport async function main(ns){\\n  if (ns.args.length == 2){\\n    var dbName = ns.args[0];\\n    var key = ns.args[1];\\n    var cache = await (new Cache(ns, dbName)).open();\\n    ns.tprint(cache.load(key));\\n  } else if (ns.args.length == 3){\\n    var dbName = ns.args[0];\\n    var key = ns.args[1];\\n    var value = ns.args[2];\\n    var cache = await (new Cache(ns, dbName)).open();\\n    cache.save(key, value);\\n  } else {\\n    printHelp(ns);\\n  }\\n}\",\"filename\":\"cache.js\",\"server\":\"home\"}}],[\"install-thief.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport function InstallThief (ns){\\n  \\n  var scriptName = \\\"thief.js\\\";\\n  var utilsName = \\\"utils.js\\\";\\n  \\n  async function sendScript(host){\\n    await ns.scp(scriptName, host);\\n    await ns.scp(utilsName, host);\\n  }\\n  \\n  async function removeScript(host){\\n    await ns.rm(scriptName, host);\\n    await ns.rm(utilsName, host);\\n  }\\n  \\n  async function stopScript(host){\\n    await ns.scriptKill(scriptName, host);\\n  }\\n  \\n  async function startScript(host, target, threadCount){\\n    await ns.exec(scriptName, host, threadCount, target);\\n  }\\n  \\n  async function install(host, target, threadCount) {\\n    await stopScript(host);\\n    await sendScript(host);\\n    await startScript(host, target, threadCount);\\n  }\\n  \\n  async function installMax(host, target) {\\n    var ramRequired = await ns.getScriptRam(scriptName);\\n    await stopScript(host);\\n    var ramMax = await ns.getServerMaxRam(host);\\n    var ramUsed = await ns.getServerUsedRam(host);\\n    var ramAvailable = ramMax - ramUsed;\\n    var threadCount = Math.floor(ramAvailable / ramRequired);\\n    await sendScript(host);\\n    if (threadCount > 0){\\n      await startScript(host, target, threadCount);\\n    }\\n  }\\n\\n  async function uninstall(host) {\\n    await stopScript(host);\\n    await removeScript(host);\\n  }\\n  \\n  return {\\n    install,\\n    installMax,\\n    uninstall\\n  };\\n  \\n}\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  install-thief.js install <host> <target> <threads>\\\");\\n  ns.tprint(\\\"  install-thief.js install-max <host> <target>\\\");\\n  ns.tprint(\\\"  install-thief.js uninstall <host>\\\");\\n}\\n\\nfunction readArgs(ns){\\n  \\n  var argc  = ns.args.length;\\n  if(argc <= 0){\\n    return null;\\n  }\\n  \\n  var command = ns.args[0];\\n  if (command == \\\"install\\\" && argc == 4){\\n    var host = ns.args[1];\\n    var target = ns.args[2];\\n    var threads = ns.args[3];\\n    return {\\n      mode: \\\"install\\\",\\n      host: host,\\n      target: target,\\n      threads: threads\\n    };\\n  } else if (command == \\\"install-max\\\" && argc == 3){\\n    var host = ns.args[1];\\n    var target = ns.args[2];\\n    return {\\n      mode: \\\"install-max\\\",\\n      host: host,\\n      target: target\\n    };\\n  } else if(command == \\\"uninstall\\\" && argc == 2) {\\n    var host = ns.args[1];\\n    return {\\n      mode: \\\"uninstall\\\",\\n      host: host\\n    };\\n  } else {\\n    return null;\\n  }\\n  \\n}\\n\\nexport async function main(ns) {\\n  var installThief = new InstallThief(ns);\\n  var options = readArgs(ns);\\n  if (options == null){\\n    printHelp(ns);\\n  } else if(options.mode == \\\"install\\\"){\\n    await installThief.install(options.host, options.target, options.threads);\\n  } else if(options.mode == \\\"install-max\\\"){\\n    await installThief.installMax(options.host, options.target);\\n  } else if(options.mode == \\\"uninstall\\\"){\\n    await installThief.uninstall(options.host);\\n  } else {\\n    printHelp(ns);\\n  }\\n}\",\"filename\":\"install-thief.js\",\"server\":\"home\"}}],[\"find-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { forEach, forEachAsync } from \\\"utils.js\\\";\\nimport { Crawler } from \\\"crawler.js\\\";\\n\\nexport function ServerFinder(ns, options){\\n  \\n  var hostnames = options.hostnames;\\n  var limit = options.limit;\\n  var onlyWithRootAccess = options.onlyWithRootAccess;\\n  var onlyWithMoney = options.onlyWithMoney;\\n  var onlyNotMine = options.onlyNotMine;\\n  var onlyNotHome = options.onlyNotHome;\\n  var onlyLowSecurity = options.onlyLowSecurity;\\n    \\n  async function profileServers(){\\n    var profiles = [];\\n    await forEachAsync(hostnames, async function(i, e){\\n      profiles.push({\\n        hostname: e,\\n        hasRootAccess: await ns.hasRootAccess(e),\\n        maxMoney: await ns.getServerMaxMoney(e),\\n        maxRam: await ns.getServerMaxRam(e),\\n        minSecurity: await ns.getServerMinSecurityLevel(e),\\n      });\\n    });\\n    return profiles;\\n  }\\n  \\n  function getHostname(profile){\\n    return profile.hostname;\\n  }\\n  \\n  async function generateFilter(){\\n    \\n    var filters = [];\\n    \\n    if(onlyWithMoney){\\n      filters.push(function(serverProfile){\\n        return serverProfile.maxMoney > 0;\\n      });\\n    }\\n    \\n    if(onlyWithRootAccess){\\n      filters.push(function(serverProfile){\\n        return serverProfile.hasRootAccess;\\n      });\\n    }\\n    \\n    if(onlyNotMine){\\n      var myServers = await ns.getPurchasedServers();\\n      myServers.push(\\\"home\\\");\\n      filters.push(function(serverProfile){\\n        return myServers.indexOf(serverProfile.hostname) < 0;\\n      });\\n    }\\n    \\n    if(onlyNotHome){\\n      filters.push(function(serverProfile){\\n        return serverProfile.hostname != \\\"home\\\";\\n      });\\n    }\\n    \\n    if(onlyLowSecurity){\\n      var hackLevel = await ns.getHackingLevel();\\n      filters.push(function(serverProfile){\\n        var hackRequirement = (\\n          3 *\\n          serverProfile.minSecurity *\\n          serverProfile.minSecurity);\\n        return hackLevel >= hackRequirement ||\\n          serverProfile.minSecurity == 1;\\n      });\\n    }\\n    \\n    return function(serverProfile){\\n      var passing = true;\\n      forEach(filters, function(i, e){\\n        passing = passing && e(serverProfile);\\n      });\\n      return passing;\\n    };\\n    \\n  }\\n  \\n  function scoreTarget(profile){  \\n    var moneyScore = Math.log10(profile.maxMoney);\\n    var securityScore = 100 - profile.minSecurity;\\n    // Rank by min security, but bonus points for more money\\n    return securityScore + moneyScore;\\n  }\\n  \\n  function scoreHost(profile){\\n    return profile.maxRam;\\n  }\\n  \\n  function compareTargetsDesc(a, b){\\n    return scoreTarget(b) - scoreTarget(a);\\n  }\\n  \\n  function compareHostsDesc(a, b){\\n    return scoreHost(b) - scoreHost(a);\\n  }\\n  \\n  async function findBest(compareDesc){\\n    var profiles = await profileServers();\\n    var filter = await generateFilter();\\n    return profiles\\n      .filter(filter)\\n      .sort(compareDesc)\\n      .slice(0, limit || Infinity)\\n      .map(getHostname);\\n  }\\n  \\n  async function findBestTargets(){\\n    return await findBest(compareTargetsDesc);\\n  }\\n  \\n  async function findBestHosts(){\\n    return await findBest(compareHostsDesc);\\n  }\\n  \\n  return {\\n    findBestTargets,\\n    findBestHosts\\n  };\\n  \\n}\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  find-server.js host <limit>\\\");\\n  ns.tprint(\\\"  find-server.js target <limit>\\\");\\n}\\n\\nexport async function main(ns){\\n  \\n  var findHosts = ns.args.length == 2 && ns.args[0] == \\\"host\\\";\\n  var findTargets = ns.args.length == 2 && ns.args[0] == \\\"target\\\";\\n  var showHelp = !findHosts && !findTargets;\\n  \\n  if(showHelp){\\n    printHelp(ns);\\n    return;\\n  }\\n  \\n  var crawler = new Crawler(ns, {\\n    resultLimit: 1000,\\n    rootHost: \\\"home\\\"\\n  });\\n  var servers = await crawler.crawl();\\n  \\n  var serverFinder = new ServerFinder(ns, {\\n    hostnames: servers,\\n    limit: ns.args[1],\\n    onlyWithMoney: findTargets,\\n    onlyWithRootAccess: true,\\n    onlyNotMine: findTargets,\\n    onlyNotHome: true\\n  });\\n  \\n  var results;\\n  if (findHosts){\\n    results = await serverFinder.findBestHosts();\\n  } else {\\n    results = await serverFinder.findBestTargets();\\n  }\\n  \\n  forEach(results, function(i, e){\\n    ns.tprint(i+1, \\\": \\\", e);\\n  });\\n  \\n}\",\"filename\":\"find-server.js\",\"server\":\"home\"}}],[\"biotic.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { Crawler } from \\\"crawler.js\\\";\\nimport { ServerFinder } from \\\"find-server.js\\\";\\nimport { Cell, InstallCell } from \\\"install-cell.js\\\";\\nimport { rootServer } from \\\"root-server.js\\\";\\nimport { forEach, forEachAsync, safeLoop } from \\\"utils.js\\\";\\nimport { getVpsNames, VpsManager } from \\\"vps.js\\\";\\n\\nvar _bioticState;\\n\\nfunction getBioticState(){\\n  if(typeof(_bioticState) === \\\"undefined\\\"){\\n    _bioticState = {};\\n  }\\n  if(typeof(_bioticState.cellPool) === \\\"undefined\\\"){\\n    _bioticState.cellPool = new CellPool();\\n  }\\n  return _bioticState;\\n}\\n\\n// A distribution of jobs that a collection of Cells can handle.\\nfunction Schedule(weaken, grow, hack){\\n\\n  var total = weaken + grow + hack;\\n  var weakenProportion = weaken / total;\\n  var growProportion = grow / total;\\n  var hackProportion = 1 - weakenProportion - growProportion;\\n\\n  return {\\n    weaken: weakenProportion,\\n    grow: growProportion,\\n    hack: hackProportion\\n  };\\n\\n}\\n\\n// An allocation of work to a given target\\nfunction Allocation(target, cells, schedule){\\n  \\n  async function assignWork(assignCell){\\n    \\n    var totalCells = cells.length;\\n    var totalWeaken = Math.ceil(totalCells * schedule.weaken);\\n    var totalGrow = Math.floor(totalCells * schedule.grow);\\n    var totalHack = Math.floor(totalCells * schedule.hack);\\n    \\n    for(var i = 0; i < totalWeaken; i++){\\n      var cell = cells[i];\\n      await assignCell(cell, \\\"weaken\\\", target);\\n    }\\n    for(var i = 0; i < totalGrow; i++){\\n      var cell = cells[totalWeaken + i];\\n      await assignCell(cell, \\\"grow\\\", target);\\n    }\\n    for(var i = 0; i < totalHack; i++){\\n      var cell = cells[totalWeaken + totalGrow + i];\\n      await assignCell(cell, \\\"hack\\\", target);\\n    }\\n    \\n  }\\n  \\n  return {\\n    assignWork\\n  };\\n  \\n}\\n\\n// A maintainable collection of cells\\nfunction CellPool(){\\n  \\n  var hosts = {};\\n  \\n  function removeHost(hostname){\\n    delete hosts[hostname];\\n  }\\n  \\n  function addHost(hostname, cells){\\n    hosts[hostname] = cells;\\n  }\\n  \\n  function getCells(){\\n    var allCells = [];\\n    for(var hostname in hosts){\\n      var cells = hosts[hostname];\\n      forEach(cells, function(i, e){\\n        allCells.push(e);\\n      });\\n    }\\n    return allCells;\\n  }\\n  \\n  function clear(){\\n    hosts = {};\\n  }\\n  \\n  return {\\n    removeHost,\\n    addHost,\\n    getCells,\\n    clear\\n  };\\n  \\n}\\n\\nfunction Allocator(ns){\\n  \\n  var weakenSchedule = new Schedule(1,0,0);\\n  var growSchedule = new Schedule(1,3,0);\\n  var hackSchedule = new Schedule(1,1,1);\\n  \\n  async function updateCellCommand(cell, command, target){\\n    \\n    async function runUpdate(){\\n      await ns.exec(\\n        \\\"cell.js\\\",\\n        cell.hostname,\\n        1,\\n        cell.instanceId,\\n        command,\\n        target);\\n    }\\n    \\n    async function updateStillRunning(){\\n      return await ns.isRunning(\\n        \\\"cell.js\\\",\\n        cell.hostname,\\n        cell.instanceId,\\n        command,\\n        target)\\n    }\\n    \\n    await runUpdate();\\n    await ns.sleep(10);\\n    while(await updateStillRunning()){\\n      await ns.sleep(10);\\n    }\\n    \\n  }\\n  \\n  async function allocateWork(target, cells){\\n    \\n    var currentSecurity = await ns.getServerSecurityLevel(target);\\n    var targetMaxSecurity = await ns.getServerMinSecurityLevel(target) + 3;\\n    var weakenStage = currentSecurity > targetMaxSecurity;\\n    \\n    var currentMoney = await ns.getServerMoneyAvailable(target);\\n    var targetMinMoney = await ns.getServerMaxMoney(target) * 0.9;\\n    var growStage = currentMoney < targetMinMoney;\\n    \\n    var schedule;\\n    if(weakenStage){\\n      ns.tprint(\\\"Weakening \\\", target, \\\" (\\\", cells.length, \\\")\\\");\\n      schedule = weakenSchedule;\\n    } else if(growStage){\\n      ns.tprint(\\\"Growing \\\", target, \\\" (\\\", cells.length, \\\")\\\");\\n      schedule = growSchedule;\\n    } else {\\n      ns.tprint(\\\"Hacking \\\", target, \\\" (\\\", cells.length, \\\")\\\");\\n      schedule = hackSchedule;\\n    }\\n    \\n    return new Allocation(target, cells, schedule);\\n    \\n  }\\n  \\n  function allocateCells(targets, allCells){\\n    \\n    var totalCells = allCells.length;\\n    var totalTargets = targets.length;\\n    var cellsForFirst = Math.ceil(totalCells / totalTargets);\\n    var cellsForRest = Math.floor(totalCells / totalTargets);\\n    \\n    var allocations = [];\\n    forEach(targets, function(i, target){\\n      \\n      var firstCell;\\n      var stopCell;\\n      if (i==0){\\n        firstCell = 0;\\n        stopCell = cellsForFirst;\\n      } else {\\n        firstCell = cellsForFirst + cellsForRest*(i-1);\\n        stopCell = firstCell + cellsForRest;\\n      }\\n      \\n      allocations.push({\\n        target,\\n        cells: allCells.slice(firstCell, stopCell)\\n      });\\n      \\n    });\\n    \\n    return allocations;\\n    \\n  }\\n  \\n  async function allocate(targets, cellPool){\\n    var allCells = cellPool.getCells();\\n    var cellAllocation = allocateCells(targets, allCells);\\n    await forEachAsync(cellAllocation, async function(i, e){\\n      var workAllocation = await allocateWork(e.target, e.cells);\\n      await workAllocation.assignWork(updateCellCommand);\\n    });\\n  }\\n  \\n  async function spam(target, cellPool){\\n    var allCells = cellPool.getCells();\\n    var cellAllocation = allocateCells([target], allCells)[0];\\n    var workAllocation = new Allocation(\\n      cellAllocation.target,\\n      cellAllocation.cells,\\n      weakenSchedule);\\n    await workAllocation.assignWork(updateCellCommand);\\n  }\\n  \\n  return {\\n    allocate,\\n    spam\\n  };\\n  \\n}\\n\\nfunction CellManager(ns, options){\\n  \\n  var installer = options.installer;\\n  var crawler = options.crawler;\\n  \\n  var cellPool = getBioticState().cellPool;\\n  \\n  async function uninstallOn(hostname){\\n    await installer.uninstall(hostname);\\n  }\\n  \\n  async function installOn(hostname){\\n    var newCells = await installer.install(hostname);\\n    cellPool.addHost(hostname, newCells);\\n  }\\n  \\n  async function install(hostname){\\n    \\n    // Identify hosts\\n    var allServers = await crawler.crawl();\\n    var hosts = [];\\n    await forEachAsync(allServers, async function(i, hostname){\\n      var isHome = hostname == \\\"home\\\";\\n      var isRooted = await ns.hasRootAccess(hostname);\\n      if(isRooted && !isHome){\\n        hosts.push(hostname);\\n      }\\n    });\\n    \\n    // Install on hosts\\n    cellPool.clear();\\n    await forEachAsync(hosts, async function(i, hostname){\\n      await installOn(hostname);\\n    });\\n    \\n  }\\n  \\n  return {\\n    uninstallOn,\\n    installOn,\\n    install\\n  };\\n  \\n}\\n\\nfunction Biotic (ns, options){\\n  \\n  var trace = options.trace;\\n  var cellManager = options.cellManager;\\n  var crawler = options.crawler;\\n  var allocator = options.allocator;\\n  var targetLimit = options.targetLimit;\\n  var vpsUpgrade = options.vpsUpgrade;\\n  var spam = options.spam;\\n  \\n  var bioticState = getBioticState();\\n  var cellPool = bioticState.cellPool;\\n  \\n  var upgradePeriod = 60*1000;\\n  \\n  async function rootServers(){\\n    var allServers = await crawler.crawl();\\n    await forEachAsync(allServers, async function(i, hostname){\\n      var success = await rootServer(ns, hostname);\\n      if (success){\\n        await ns.sleep(1000);\\n        await cellManager.installOn(hostname);\\n        await trace(\\\"Rooted server \\\" + hostname);\\n      }\\n    });\\n  }\\n  \\n  async function upgradeVps(){\\n    var vpsHosts = await getVpsNames();\\n    var manager = new VpsManager(ns, {\\n      hostnames: vpsHosts,\\n      decommission: cellManager.uninstallOn,\\n      commission: cellManager.installOn,\\n      trace: trace\\n    });\\n    await manager.upgrade();\\n  }\\n  \\n  async function allocateWork(){\\n    if(!spam){\\n      var allServers = await crawler.crawl();\\n      var targetFinder = new ServerFinder(ns, {\\n        hostnames: allServers,\\n        limit: targetLimit,\\n        onlyWithRootAccess: true,\\n        onlyWithMoney: true,\\n        onlyNotMine: true,\\n        onlyNotHome: true,\\n        onlyLowSecurity: true\\n      });\\n      var targets = await targetFinder.findBestTargets();\\n      await allocator.allocate(targets, cellPool);\\n    } else {\\n      await allocator.spam(\\\"n00dles\\\", cellPool);\\n    }\\n  }\\n  \\n  async function manage(){\\n    await cellManager.install();\\n    await safeLoop(ns, async function (){\\n      await rootServers();\\n      if(vpsUpgrade){\\n        await upgradeVps();\\n      }\\n      await allocateWork();\\n      await ns.sleep(upgradePeriod);\\n    });\\n  }\\n  \\n  return {\\n    manage\\n  };\\n  \\n}\\n\\nexport async function main(ns) {\\n  \\n  var targetLimit;\\n  if(ns.args.length > 0){\\n    targetLimit = ns.args[0];\\n  }\\n  if (!targetLimit) {\\n    targetLimit = 1;\\n  }\\n  \\n  var vpsUpgrade = ns.args.indexOf(\\\"--no-vps-upgrade\\\") < 0;\\n  var spam = ns.args.indexOf(\\\"--spam\\\") >= 0;\\n  \\n  var crawler = new Crawler(ns, {\\n    resultLimit: 1000,\\n    rootHost: \\\"home\\\"\\n  });\\n  var allocator = new Allocator(ns);\\n  var installer = new InstallCell(ns);\\n  var cellManager = new CellManager(ns, {\\n    installer: installer,\\n    crawler: crawler\\n  });\\n  var biotic = new Biotic(ns, {\\n    trace: ns.tprint,\\n    cellManager: cellManager,\\n    crawler: crawler,\\n    allocator: allocator,\\n    targetLimit: targetLimit,\\n    vpsUpgrade: vpsUpgrade,\\n    spam: spam\\n  });\\n  await biotic.manage();\\n  \\n}\",\"filename\":\"biotic.js\",\"server\":\"home\"}}],[\"install-cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { forEachAsync } from \\\"utils.js\\\";\\n\\n// A model for an instance of Cell.js running on a server\\nexport function Cell(hostname, index){\\n  \\n  return {\\n    hostname,\\n    index,\\n    instanceId: hostname + \\\"|\\\" + index\\n  };\\n  \\n}\\n\\nexport function InstallCell (ns){\\n  \\n  var mainScript = \\\"cell.js\\\";\\n  var scripts = [\\n    \\\"utils.js\\\",\\n    \\\"cell.js\\\"\\n  ];\\n  \\n  async function install(hostname){\\n    \\n    await forEachAsync(scripts, async function(i,e){\\n      await ns.scriptKill(e, hostname);\\n    });\\n    await forEachAsync(scripts, async function(i,e){\\n      await ns.scp(e, hostname);\\n    });\\n    \\n    var spareInstances = 1; // How many instances-worth of RAM to leave free\\n    var ramRequired = await ns.getScriptRam(mainScript);\\n    var ramMax = await ns.getServerMaxRam(hostname);\\n    var ramUsed = await ns.getServerUsedRam(hostname);\\n    var ramAvailable = ramMax - ramUsed;\\n    var ramDedicated = ramAvailable - spareInstances * ramRequired;\\n    \\n    var instanceCount = Math.floor(ramDedicated / ramRequired);\\n    var instanceSize = 1;\\n    while(instanceCount > 200){\\n      instanceSize *= 2;\\n      instanceCount = Math.floor(\\n        ramDedicated\\n        / ramRequired\\n        / instanceSize);\\n    }\\n    \\n    var newCells = [];\\n    for(var i = 0; i < instanceCount; i++){\\n      var newCell = new Cell(hostname, i);\\n      await ns.sleep(10);\\n      await ns.exec(\\n        mainScript,\\n        hostname,\\n        instanceSize,\\n        newCell.instanceId);\\n      newCells.push(newCell);\\n    }\\n    \\n    return newCells;\\n    \\n  }\\n  \\n  async function uninstall(hostname){\\n    await forEachAsync(scripts, async function(i,e){\\n      await ns.scriptKill(e, hostname);\\n    });\\n    await forEachAsync(scripts, async function(i,e){\\n      await ns.rm(e, hostname);\\n    });\\n  }\\n  \\n  return {\\n    install,\\n    uninstall\\n  };\\n  \\n}\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  install-cell.js install <host>\\\");\\n  ns.tprint(\\\"  install-cell.js uninstall <host>\\\");\\n}\\n\\nexport async function main(ns) {\\n  var installCell = new InstallCell(ns);\\n  if(ns.args.length == 2 && ns.args[0] == \\\"install\\\"){\\n    var newCells = await installCell.install(ns.args[1]);\\n    ns.tprint(\\\"Instances installed: \\\", newCells.length);\\n  } else if(ns.args.length == 2 && ns.args[0] == \\\"uninstall\\\"){\\n    await installCell.uninstall(ns.args[1]);\\n  } else {\\n    printHelp(ns);\\n  }\\n}\",\"filename\":\"install-cell.js\",\"server\":\"home\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"home\"}}],[\"bubble-rider.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { numberWithMagnitude } from \\\"format.js\\\";\\nimport { forEach, forEachAsync } from \\\"utils.js\\\";\\n\\nvar transactionCost = 100*1000;\\nvar packetSize = 1000*1000*1000;\\nvar buyInGrowth = 0.55;\\nvar sellGrowth = 0.5;\\n  \\nasync function analyseMarket(ns){\\n  var symbols = await ns.stock.getSymbols();\\n  var profiles = [];\\n  await forEachAsync(symbols, async function(i, e){\\n    var position = await ns.stock.getPosition(e);\\n    var ownedShares = position[0];\\n    var maxShares = await ns.stock.getMaxShares(e);\\n    profiles.push({\\n      symbol: e,\\n      shares: ownedShares,\\n      askPrice: await ns.stock.getAskPrice(e),\\n      bidPrice: await ns.stock.getBidPrice(e),\\n      growthChance: await ns.stock.getForecast(e),\\n      maxShares: maxShares,\\n      availableShares: maxShares - ownedShares\\n    });\\n  });\\n  return profiles;\\n}\\n\\nfunction bestForecast(profiles){\\n  return profiles\\n    .filter(function(profile){\\n      var maxPurchase = profile.askPrice * profile.availableShares;\\n      return maxPurchase > packetSize;\\n    })\\n    .sort(function(a,b){\\n      return b.growthChance - a.growthChance\\n    })\\n    [0];\\n}\\n\\nasync function sellRisky(ns, profiles){\\n  await forEachAsync(profiles, async function(i ,e){\\n    var sellValue = e.bidPrice * e.shares;\\n    var sell =\\n      sellValue > transactionCost &&\\n      e.growthChance <= sellGrowth;\\n    if(sell){\\n      ns.tprint(\\n        \\\"Selling \\\",\\n        e.symbol,\\n        \\\" ($ \\\",\\n        numberWithMagnitude(e.shares * e.bidPrice, 2),\\n        \\\")\\\");\\n      await ns.stock.sellStock(e.symbol, e.shares);\\n    }\\n  });\\n}\\n\\nasync function buyBest(ns, profiles){\\n  var funds = await ns.getServerMoneyAvailable(\\\"home\\\");\\n  var bestStock = bestForecast(profiles);\\n  if(bestStock.growthChance > buyInGrowth){\\n    var maxPurchase = bestStock.askPrice * bestStock.availableShares;\\n    var maxPackets = Math.floor(maxPurchase / packetSize);\\n    var fundablePackets = Math.floor((funds - transactionCost) / packetSize);\\n    var packets = Math.min(maxPackets, fundablePackets);\\n    var shares = Math.floor(packets * packetSize / bestStock.askPrice);\\n    if(packets > 0){\\n      ns.tprint(\\n        \\\"Buying \\\",\\n        bestStock.symbol,\\n        \\\" ($ \\\",\\n        numberWithMagnitude(shares * bestStock.askPrice, 2),\\n        \\\")\\\");\\n      await ns.stock.buyStock(bestStock.symbol, shares);\\n    }\\n  }\\n}\\n\\n\\nasync function trade(ns, profiles){\\n    await sellRisky(ns, profiles);\\n    await buyBest(ns, profiles);\\n}\\n\\nasync function printNetWorth(ns, analysis){\\n  var total = 0;\\n  forEach(analysis, function(i, e){\\n    if(e.shares > 0){\\n      total += e.shares * e.bidPrice;\\n    }\\n  });\\n  ns.tprint(\\n    \\\"Current value: \\\",\\n    \\\" ($ \\\",\\n    numberWithMagnitude(total, 2),\\n    \\\")\\\");\\n}\\n\\nexport async function main(ns){\\n  \\n  async function loop(f){\\n    for(;;){\\n      var analysis = await analyseMarket(ns);\\n      await f(ns, analysis);\\n      await ns.sleep(6*1000);\\n    }\\n  }\\n  \\n  var f;\\n  if(ns.args.length == 1 && ns.args[0] == \\\"buy\\\"){\\n    await loop(buyBest);\\n  } else if(ns.args.length == 1 && ns.args[0] == \\\"sell\\\"){\\n    await loop(sellRisky);\\n  } else if(ns.args.length == 1 && ns.args[0] == \\\"trade\\\"){\\n    await loop(trade);\\n  } else if(ns.args.length == 1 && ns.args[0] == \\\"show-value\\\"){\\n    var analysis = await analyseMarket(ns);\\n    await printNetWorth(ns, analysis);\\n    return;\\n  } else {\\n    ns.tprint(\\\"Usage:\\\");\\n    ns.tprint(\\\"  bubble-rider.js buy\\\");\\n    ns.tprint(\\\"  bubble-rider.js sell\\\");\\n    ns.tprint(\\\"  bubble-rider.js trade\\\");\\n    ns.tprint(\\\"  bubble-rider.js show-value\\\");\\n    return;\\n  }\\n  \\n}\\n\",\"filename\":\"bubble-rider.js\",\"server\":\"home\"}}],[\"format.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\nexport function numberWithMagnitude(number, fractionDigits){\\n    \\n    var base = 1000;\\n    var magnitudes = [\\n      ' ',\\n      'k',\\n      'm',\\n      'b',\\n      't',\\n      'q'\\n    ];\\n    \\n    var multiple = number;\\n    var multipleRounded = multiple.toFixed(fractionDigits);\\n    var exponent;\\n    for(exponent = 0; exponent < magnitudes.length - 1; exponent++){\\n      if(multipleRounded < base){\\n        break;\\n      } else {\\n        multiple = multiple / base;\\n        multipleRounded = multiple.toFixed(fractionDigits);\\n        continue;\\n      }\\n    }\\n    \\n    var mantissa = multipleRounded;\\n    var magnitude = magnitudes[exponent];\\n    \\n    return mantissa.toString() + magnitude;\\n    \\n}\\n\\nexport async function main(ns){\\n\\n\\tns.tprint(\\\"Testing formats:\\\");\\n  \\n\\tns.tprint(numberWithMagnitude(123.456, 1));\\n\\tns.tprint(numberWithMagnitude(123.456, 2));\\n\\tns.tprint(numberWithMagnitude(123.456, 4));\\n\\n\\tns.tprint(numberWithMagnitude(1123.456, 1));\\n\\tns.tprint(numberWithMagnitude(1123.456, 2));\\n\\tns.tprint(numberWithMagnitude(1123.456, 4));\\n\\n\\tns.tprint(numberWithMagnitude(1234567.456, 1));\\n\\tns.tprint(numberWithMagnitude(1234567.456, 2));\\n\\tns.tprint(numberWithMagnitude(1234567.456, 4));\\n\\n\\tns.tprint(numberWithMagnitude(1234567.456 * 1000, 1));\\n\\tns.tprint(numberWithMagnitude(1234567.456 * 1000, 2));\\n\\tns.tprint(numberWithMagnitude(1234567.456 * 1000, 4));\\n\\n\\tns.tprint(numberWithMagnitude(1234567.456 * 1000 * 1000, 1));\\n\\tns.tprint(numberWithMagnitude(1234567.456 * 1000 * 1000, 2));\\n\\tns.tprint(numberWithMagnitude(1234567.456 * 1000 * 1000, 4));\\n\\n\\tns.tprint(numberWithMagnitude(1234567.456 * 1000 * 1000 * 1000, 1));\\n\\tns.tprint(numberWithMagnitude(1234567.456 * 1000 * 1000 * 1000, 2));\\n\\tns.tprint(numberWithMagnitude(1234567.456 * 1000 * 1000 * 1000, 4));\\n\\n\\tns.tprint(numberWithMagnitude(1234567.456 * 1000000 * 1000000, 1));\\n\\tns.tprint(numberWithMagnitude(1234567.456 * 1000000 * 1000000, 2));\\n\\tns.tprint(numberWithMagnitude(1234567.456 * 1000000 * 1000000, 4));\\n  \\n\\tns.tprint(numberWithMagnitude(1000 * 1000 * 1000 - 1, 2));\\n\\n}\",\"filename\":\"format.js\",\"server\":\"home\"}}],[\"portfolio.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { numberWithMagnitude } from \\\"format.js\\\";\\nimport { forEach, forEachAsync } from \\\"utils.js\\\";\\n\\nasync function analyseMarket(ns){\\n  var symbols = await ns.stock.getSymbols();\\n  var profiles = [];\\n  await forEachAsync(symbols, async function(i, e){\\n    var position = await ns.stock.getPosition(e);\\n    var ownedShares = position[0];\\n    var maxShares = await ns.stock.getMaxShares(e);\\n    profiles.push({\\n      symbol: e,\\n      shares: ownedShares,\\n      askPrice: await ns.stock.getAskPrice(e),\\n      bidPrice: await ns.stock.getBidPrice(e),\\n      growthChance: await ns.stock.getForecast(e),\\n      maxShares: maxShares,\\n      availableShares: maxShares - ownedShares\\n    });\\n  });\\n  return profiles;\\n}\\n\\nasync function printNetWorth(ns, analysis){\\n  var total = 0;\\n  forEach(analysis, function(i, e){\\n    if(e.shares > 0){\\n      total += e.shares * e.bidPrice;\\n    }\\n  });\\n  ns.print(\\n    \\\"Current value: \\\",\\n    \\\" $\\\",\\n    numberWithMagnitude(total, 2));\\n}\\n\\nexport async function main(ns){\\n  for(;;){\\n    await ns.sleep(6*1000);\\n    var analysis = await analyseMarket(ns);\\n    await printNetWorth(ns, analysis);\\n  }\\n}\\n\",\"filename\":\"portfolio.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[1,\"--no-vps-upgrade\"],\"dataMap\":{},\"filename\":\"biotic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2252.6100000001425,\"ramUsage\":14.65,\"server\":\"home\",\"scriptKey\":\"biotic.js*[1,\\\"--no-vps-upgrade\\\"]\",\"title\":\"biotic.js 1 --no-vps-upgrade\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[294498.6221475227,4050,2070,0]},\"filename\":\"thief.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26060.004471234668,\"onlineMoneyMade\":294498.6221475227,\"onlineRunningTime\":1877.81000000029,\"ramUsage\":2.4,\"server\":\"home\",\"scriptKey\":\"thief.js*[\\\"n00dles\\\"]\",\"title\":\"thief.js n00dles\",\"threads\":45,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"6.7.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":7735485601.400001,\"moneyMax\":38677428007,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1121,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"36.1.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":8833105398.800001,\"moneyMax\":44165526994,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1201,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-796920.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"2053071552\",85],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"51.0.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":4616001703,\"moneyMax\":23080008515,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1127,\"serverGrowth\":74,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-328920-Sector12.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"VIRUSMACROTRASHSHIFTMOUSE\",\"PRINTER\"],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"16.8.3.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":7312328556.8,\"moneyMax\":36561642784,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1145,\"serverGrowth\":58,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"72.6.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":6966664887.6,\"moneyMax\":34833324438,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1193,\"serverGrowth\":94,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-67039.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,7,10,0,1,0,2,0,1,0,6,0,2,4,9,7,7],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"39.5.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":3681601963.2000003,\"moneyMax\":18408009816,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1116,\"serverGrowth\":48,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-762699.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[12,[[0,10],[3,4],[0,8],[2,4],[7,8],[1,6],[7,10],[4,11],[6,9],[6,8],[0,5],[0,1],[2,10],[10,11],[7,9],[8,11],[3,11],[1,2],[2,9],[0,4],[9,11],[5,7],[2,3]]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"75.4.1.3\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":3282992426.6000004,\"moneyMax\":16414962133,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":947,\"serverGrowth\":98,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"64.8.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":3194495568.2000003,\"moneyMax\":15972477841,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1079,\"serverGrowth\":88,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"41.6.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":4298016267.400001,\"moneyMax\":21490081337,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1203,\"serverGrowth\":93,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-637502.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[179,6,84,181,57,63,75,184,60,2,116,137,121,89,90,2,109,67,81,30,57,100,123,162,88,181,118,135,15,137,121,102,116,176,163,175,133,121,118,87,49],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"83.7.8.5\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":302058160.40000004,\"moneyMax\":1510290802,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1187,\"serverGrowth\":84,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-371853.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[12,125,87,73,36,65,2,94,163,189,104,10,181,25,119,174,198,90,124,67]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"85.1.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":200000,\"moneyMax\":1000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1274,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-168075.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[56,90,80,107,96,74,13,29,188,196,198,104,70,21,167,174,148,140,112,80,147,72,33,156,156,170,95,60,126,163],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-690818-Netburners.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":1378,\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"67.3.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":217271814,\"moneyMax\":1086359070,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":970,\"serverGrowth\":77,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-473744-Netburners.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-9,-3,-5,-1,-7,-1,3,-3,1,-2,-5,7,-1,-7,-10,-5,-8,1,-8,10,10,-8,5,-2,3,-3,3,4,-10,6,-6,-2,-2,8,-6],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"13.9.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":170842462,\"moneyMax\":854212310,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":885,\"serverGrowth\":56,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"95.3.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":162037758,\"moneyMax\":810188790,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":936,\"serverGrowth\":61,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"95.8.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":126395544.2,\"moneyMax\":631977721,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":803,\"serverGrowth\":77,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-495158-Netburners.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[165,[1,3,4,5,6,7,8,9,10,11]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"94.5.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":147610273.4,\"moneyMax\":738051367,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":789,\"serverGrowth\":60,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"27.3.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":198462348.60000002,\"moneyMax\":992311743,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":890,\"serverGrowth\":87,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"59.4.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":222590641.60000002,\"moneyMax\":1112953208,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":889,\"serverGrowth\":88,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-38-Netburners.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[145,[1,4,5,7,8,9,10,12,13,15,18]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-608801.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":10957567385616206,\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"40.1.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":164625859,\"moneyMax\":823129295,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":853,\"serverGrowth\":73,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-619564.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[8,1],[1,8,4],[7,7,6,8],[3,1,3,8,8],[3,4,7,9,4,7],[9,2,6,5,8,8,5],[5,6,8,6,5,5,5,3]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-789764.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"4Q61kX4uUUUUqqqqqq08K1LxoLLLLLLuLLLM812opep8K32opep8KGQjS8KGQjS8KGQQ3\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"34.7.1.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":130050507.60000001,\"moneyMax\":650252538,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":804,\"serverGrowth\":72,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"59.0.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":165758807,\"moneyMax\":828794035,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":885,\"serverGrowth\":72,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-557596.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[5,10,-4,0,-8,4,-10,0,-3,10,-3,3,-10,-5,-10,-2,-6,-6,-10,-6,2,-3,-6,-8,-8,8,9,3,-3,-7,0,-1,-5,-1,3,-9,-1,8],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"19.9.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rho-construction\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":165353867.20000002,\"moneyMax\":826769336,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":856,\"serverGrowth\":78,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-846757-Sector12.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"ARRAY TABLE FRAME MODEM SHIFT\",15],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"5.2.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":222343446.60000002,\"moneyMax\":1111717233,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":857,\"serverGrowth\":60,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"74.3.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":193267623.4,\"moneyMax\":966338117,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":851,\"serverGrowth\":61,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"36.3.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":194143037.60000002,\"moneyMax\":970715188,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":815,\"serverGrowth\":74,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"63.2.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":162593430,\"moneyMax\":812967150,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":850,\"serverGrowth\":71,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-578261.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":236235381,\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"34.7.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":165857739.20000002,\"moneyMax\":829288696,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":774,\"serverGrowth\":80,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-761386-Netburners.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,1,0,0],[0,0,0,1,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,1,0],[0,0,0,0,0,1,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,1],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,1,0,0,0,0,0]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-673223-Netburners.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[41,18,105,186,120,98,18,107,145,146,44,183,8,61,141,6,34],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-692306.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[8,7],[6,6,3],[6,6,8,4]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"52.4.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":265070716.4,\"moneyMax\":1325353582,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":823,\"serverGrowth\":54,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-552543-Netburners.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[2,12],[16,19],[16,24],[5,9],[11,14],[11,12],[9,15],[4,8],[8,17],[21,22],[25,26],[1,11],[12,13],[15,17],[17,23],[21,26],[24,33],[21,28],[8,16]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"3.1.2.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":349038134.8,\"moneyMax\":1745190674,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":817,\"serverGrowth\":90,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"21.3.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":220873407.4,\"moneyMax\":1104367037,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":782,\"serverGrowth\":78,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-691493.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"EuGVDxuVDxuVDxuVDxuVDEbWxKBsDZ4UVU6UVU6UVU6Uk6UVm6pgw45pgw454w454w454w54w54w54ummZw54u\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"72.5.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":269574546.40000004,\"moneyMax\":1347872732,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":825,\"serverGrowth\":73,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-56796.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"5056\",9],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"15.0.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":217075995.4,\"moneyMax\":1085379977,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":780,\"serverGrowth\":73,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-115239.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[1,0,0,0,0,0],[1,0,0,0,0,0],[0,0,0,0,0,1],[0,0,0,0,0,1],[0,0,0,0,0,0],[0,0,0,1,0,1],[0,0,0,0,0,0],[0,1,0,1,0,0],[1,0,1,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"94.9.6.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":156996388.20000002,\"moneyMax\":784981941,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":707,\"serverGrowth\":64,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-225513.cct\",\"type\":\"Array Jumping Game II\",\"data\":[1,1,3,2,6,1],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-783897-Netburners.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"bbbbzzzzzzzzzejffW55ffaaaaaaaaaaaaaa55LLLLLLLLLLLBBYYYYYYYWWWWWWWWWWWWWWJJrTZZjTTTTTTTTT\",\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"92.2.0.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":125786649.4,\"moneyMax\":628933247,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":502,\"serverGrowth\":43,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-864313.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[166,30,28,54,173,52,139,139,156,17,83,74,106],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"58.2.1.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":134475893.8,\"moneyMax\":672379469,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":522,\"serverGrowth\":57,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-6513.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[109,4,126,193,78,119,19,62,137,129,11,161],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"8.5.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rothman-uni\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":58472793,\"moneyMax\":292363965,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":417,\"serverGrowth\":32,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-690291.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,10,9,0,0,2,10,4],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-8237-Sector12.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[141,141,81,123,166,115,59,79,75,19,135,89,191,177,112,117,74,143,72,17,141,99,154,24,38,174,121,104,107,122,42,79,121,173,74,77,23],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"50.2.8.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"avmnite-02h\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":48011687.400000006,\"moneyMax\":240058437,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":430,\"serverGrowth\":36,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"5.7.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":169003491.4,\"moneyMax\":845017457,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":775,\"serverGrowth\":77,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-79477.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"00001000010001010011101100011111\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-594495.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"711130\",-5],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"43.6.5.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\",\"lexo-corp\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":58411071.6,\"moneyMax\":292055358,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":450,\"serverGrowth\":45,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-328209.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[105,167,50,134,63,186,177,48,181,99,111,164,16,88,200,188,175,184,141,44,40]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"23.2.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":118208099.80000001,\"moneyMax\":591040499,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":613,\"serverGrowth\":66,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"16.9.8.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"avmnite-02h\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":91796864.4,\"moneyMax\":458984322,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":445,\"serverGrowth\":30,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"10.5.9.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":37,\"minDifficulty\":12,\"moneyAvailable\":34082548.800000004,\"moneyMax\":170412744,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":311,\"serverGrowth\":49,\"runningScripts\":[]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"9.2.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":46408584,\"moneyMax\":232042920,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":335,\"serverGrowth\":61,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"15.8.6.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":55000000,\"moneyMax\":275000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":424,\"serverGrowth\":61,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-872073-Netburners.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"zzzzzzzIIfff44qqLLLLLLLL33Ziiiii155W66666666oNNdsoo77AAoooooooooooooo33\",\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"86.5.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":15887965,\"moneyMax\":79439825,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":279,\"serverGrowth\":47,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"57.2.8.0\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"n00dles\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.056,\"minDifficulty\":1,\"moneyAvailable\":67943.76029586174,\"moneyMax\":70000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles|0\"],\"dataMap\":{\"n00dles\":[3628.7556859327465,50,0,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":472.6569438410221,\"onlineMoneyMade\":3628.7556859327465,\"onlineRunningTime\":2250.4100000001445,\"ramUsage\":2,\"server\":\"n00dles\",\"scriptKey\":\"cell.js*[\\\"n00dles|0\\\"]\",\"title\":\"cell.js n00dles|0\",\"threads\":1,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"79.6.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"foodnstuff\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":400000,\"moneyMax\":2000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff|0\"],\"dataMap\":{\"n00dles\":[0,0,16,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.87914122305096,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.6100000001443,\"ramUsage\":2,\"server\":\"foodnstuff\",\"scriptKey\":\"cell.js*[\\\"foodnstuff|0\\\"]\",\"title\":\"cell.js foodnstuff|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff|1\"],\"dataMap\":{\"n00dles\":[3652.1341659862974,50,0,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":472.6569438410221,\"onlineMoneyMade\":3652.1341659862974,\"onlineRunningTime\":2250.6100000001443,\"ramUsage\":2,\"server\":\"foodnstuff\",\"scriptKey\":\"cell.js*[\\\"foodnstuff|1\\\"]\",\"title\":\"cell.js foodnstuff|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff|2\"],\"dataMap\":{\"n00dles\":[3648.1747708086687,50,0,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":472.6569438410221,\"onlineMoneyMade\":3648.1747708086687,\"onlineRunningTime\":2250.6100000001443,\"ramUsage\":2,\"server\":\"foodnstuff\",\"scriptKey\":\"cell.js*[\\\"foodnstuff|2\\\"]\",\"title\":\"cell.js foodnstuff|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff|3\"],\"dataMap\":{\"n00dles\":[3644.2197451053034,50,0,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":472.6569438410221,\"onlineMoneyMade\":3644.2197451053034,\"onlineRunningTime\":2250.6100000001443,\"ramUsage\":2,\"server\":\"foodnstuff\",\"scriptKey\":\"cell.js*[\\\"foodnstuff|3\\\"]\",\"title\":\"cell.js foodnstuff|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff|4\"],\"dataMap\":{\"n00dles\":[3640.269083972172,50,0,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":472.6569438410221,\"onlineMoneyMade\":3640.269083972172,\"onlineRunningTime\":2250.6100000001443,\"ramUsage\":2,\"server\":\"foodnstuff\",\"scriptKey\":\"cell.js*[\\\"foodnstuff|4\\\"]\",\"title\":\"cell.js foodnstuff|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff|5\"],\"dataMap\":{\"n00dles\":[3636.6359013381802,50,0,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":472.6569438410221,\"onlineMoneyMade\":3636.6359013381802,\"onlineRunningTime\":2250.4100000001445,\"ramUsage\":2,\"server\":\"foodnstuff\",\"scriptKey\":\"cell.js*[\\\"foodnstuff|5\\\"]\",\"title\":\"cell.js foodnstuff|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff|6\"],\"dataMap\":{\"n00dles\":[3632.693618505905,50,0,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":472.6569438410221,\"onlineMoneyMade\":3632.693618505905,\"onlineRunningTime\":2250.4100000001445,\"ramUsage\":2,\"server\":\"foodnstuff\",\"scriptKey\":\"cell.js*[\\\"foodnstuff|6\\\"]\",\"title\":\"cell.js foodnstuff|6\",\"threads\":1,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-580823-Netburners.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"5584641081\",86],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"37.4.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"sigma-cosmetics\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":460000,\"moneyMax\":2300000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics|0\"],\"dataMap\":{\"n00dles\":[0,0,16,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.87914122305096,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.6100000001443,\"ramUsage\":2,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"cell.js*[\\\"sigma-cosmetics|0\\\"]\",\"title\":\"cell.js sigma-cosmetics|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics|1\"],\"dataMap\":{\"n00dles\":[0,0,16,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.87914122305096,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.6100000001443,\"ramUsage\":2,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"cell.js*[\\\"sigma-cosmetics|1\\\"]\",\"title\":\"cell.js sigma-cosmetics|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics|2\"],\"dataMap\":{\"n00dles\":[0,0,16,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.87914122305096,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.6100000001443,\"ramUsage\":2,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"cell.js*[\\\"sigma-cosmetics|2\\\"]\",\"title\":\"cell.js sigma-cosmetics|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics|3\"],\"dataMap\":{\"n00dles\":[0,0,16,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.87914122305096,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.6100000001443,\"ramUsage\":2,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"cell.js*[\\\"sigma-cosmetics|3\\\"]\",\"title\":\"cell.js sigma-cosmetics|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics|4\"],\"dataMap\":{\"n00dles\":[0,0,16,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.87914122305096,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.6100000001443,\"ramUsage\":2,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"cell.js*[\\\"sigma-cosmetics|4\\\"]\",\"title\":\"cell.js sigma-cosmetics|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics|5\"],\"dataMap\":{\"n00dles\":[0,0,16,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.87914122305096,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.6100000001443,\"ramUsage\":2,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"cell.js*[\\\"sigma-cosmetics|5\\\"]\",\"title\":\"cell.js sigma-cosmetics|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics|6\"],\"dataMap\":{\"n00dles\":[0,0,16,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.87914122305096,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.6100000001443,\"ramUsage\":2,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"cell.js*[\\\"sigma-cosmetics|6\\\"]\",\"title\":\"cell.js sigma-cosmetics|6\",\"threads\":1,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-295636-Sector12.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[6,0,-9,8,-4,2,5,10,6,1,-10,-10,-2,8,-10,-6,-5,-4,-9,2,-10,-1,9,-5,1,9,6,1,-5,-5,0,6,1,10],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-942284-Sector12.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[21,154,18,149,20,119,173,87,31,9,186,116,135,134,60,139,93,168,69,145,105,59,156,115,186,86,114,91,70,3,132,6,145,125,125,198,87,134],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"95.2.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"joesguns\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":500000,\"moneyMax\":2500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns|0\"],\"dataMap\":{\"n00dles\":[0,0,0,73]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.8464585621132,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.810000000144,\"ramUsage\":2,\"server\":\"joesguns\",\"scriptKey\":\"cell.js*[\\\"joesguns|0\\\"]\",\"title\":\"cell.js joesguns|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns|1\"],\"dataMap\":{\"n00dles\":[0,0,16,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.87914122305096,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.6100000001443,\"ramUsage\":2,\"server\":\"joesguns\",\"scriptKey\":\"cell.js*[\\\"joesguns|1\\\"]\",\"title\":\"cell.js joesguns|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns|2\"],\"dataMap\":{\"n00dles\":[0,0,16,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.87914122305096,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.6100000001443,\"ramUsage\":2,\"server\":\"joesguns\",\"scriptKey\":\"cell.js*[\\\"joesguns|2\\\"]\",\"title\":\"cell.js joesguns|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns|3\"],\"dataMap\":{\"n00dles\":[0,0,16,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.87914122305096,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.6100000001443,\"ramUsage\":2,\"server\":\"joesguns\",\"scriptKey\":\"cell.js*[\\\"joesguns|3\\\"]\",\"title\":\"cell.js joesguns|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns|4\"],\"dataMap\":{\"n00dles\":[0,0,16,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.87914122305096,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.6100000001443,\"ramUsage\":2,\"server\":\"joesguns\",\"scriptKey\":\"cell.js*[\\\"joesguns|4\\\"]\",\"title\":\"cell.js joesguns|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns|5\"],\"dataMap\":{\"n00dles\":[0,0,16,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.87914122305096,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.6100000001443,\"ramUsage\":2,\"server\":\"joesguns\",\"scriptKey\":\"cell.js*[\\\"joesguns|5\\\"]\",\"title\":\"cell.js joesguns|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns|6\"],\"dataMap\":{\"n00dles\":[0,0,16,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.87914122305096,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.6100000001443,\"ramUsage\":2,\"server\":\"joesguns\",\"scriptKey\":\"cell.js*[\\\"joesguns|6\\\"]\",\"title\":\"cell.js joesguns|6\",\"threads\":1,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"40.6.7.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"zer0\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":1500000,\"moneyMax\":7500000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|0\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1859.610000000286,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|0\\\"]\",\"title\":\"cell.js zer0|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|1\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1859.610000000286,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|1\\\"]\",\"title\":\"cell.js zer0|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|2\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1859.610000000286,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|2\\\"]\",\"title\":\"cell.js zer0|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|3\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1859.610000000286,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|3\\\"]\",\"title\":\"cell.js zer0|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|4\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1859.610000000286,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|4\\\"]\",\"title\":\"cell.js zer0|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|5\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1859.610000000286,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|5\\\"]\",\"title\":\"cell.js zer0|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|6\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1859.610000000286,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|6\\\"]\",\"title\":\"cell.js zer0|6\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|7\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1859.610000000286,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|7\\\"]\",\"title\":\"cell.js zer0|7\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|8\"],\"dataMap\":{\"n00dles\":[5983.832738564149,84,50,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":570.5948691414136,\"onlineMoneyMade\":5983.832738564149,\"onlineRunningTime\":1859.610000000286,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|8\\\"]\",\"title\":\"cell.js zer0|8\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|9\"],\"dataMap\":{\"n00dles\":[5977.347845586722,84,50,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":570.5948691414136,\"onlineMoneyMade\":5977.347845586722,\"onlineRunningTime\":1859.610000000286,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|9\\\"]\",\"title\":\"cell.js zer0|9\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|10\"],\"dataMap\":{\"n00dles\":[5971.330907085915,84,50,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":570.5948691414136,\"onlineMoneyMade\":5971.330907085915,\"onlineRunningTime\":1859.610000000286,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|10\\\"]\",\"title\":\"cell.js zer0|10\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|11\"],\"dataMap\":{\"n00dles\":[5964.859664295969,84,50,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":570.5948691414136,\"onlineMoneyMade\":5964.859664295969,\"onlineRunningTime\":1859.610000000286,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|11\\\"]\",\"title\":\"cell.js zer0|11\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|12\"],\"dataMap\":{\"n00dles\":[5958.395560361033,84,50,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":570.5948691414136,\"onlineMoneyMade\":5958.395560361033,\"onlineRunningTime\":1859.610000000286,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|12\\\"]\",\"title\":\"cell.js zer0|12\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|13\"],\"dataMap\":{\"n00dles\":[5951.9385872717285,84,50,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":570.5948691414136,\"onlineMoneyMade\":5951.9385872717285,\"onlineRunningTime\":1859.410000000286,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|13\\\"]\",\"title\":\"cell.js zer0|13\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0|14\"],\"dataMap\":{\"n00dles\":[5946.1225816563465,84,50,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":570.5948691414136,\"onlineMoneyMade\":5946.1225816563465,\"onlineRunningTime\":1859.410000000286,\"ramUsage\":2,\"server\":\"zer0\",\"scriptKey\":\"cell.js*[\\\"zer0|14\\\"]\",\"title\":\"cell.js zer0|14\",\"threads\":1,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-406730.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[7],[5,8],[5,2,7],[2,2,8,8],[7,4,9,7,6],[3,4,1,6,5,5]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"8.6.7.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"nectar-net\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":550000,\"moneyMax\":2750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net|0\"],\"dataMap\":{\"n00dles\":[3624.8220987366026,50,0,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":472.6569438410221,\"onlineMoneyMade\":3624.8220987366026,\"onlineRunningTime\":2250.4100000001445,\"ramUsage\":2,\"server\":\"nectar-net\",\"scriptKey\":\"cell.js*[\\\"nectar-net|0\\\"]\",\"title\":\"cell.js nectar-net|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net|1\"],\"dataMap\":{\"n00dles\":[3620.8928520409354,50,0,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":472.6569438410221,\"onlineMoneyMade\":3620.8928520409354,\"onlineRunningTime\":2250.4100000001445,\"ramUsage\":2,\"server\":\"nectar-net\",\"scriptKey\":\"cell.js*[\\\"nectar-net|1\\\"]\",\"title\":\"cell.js nectar-net|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net|2\"],\"dataMap\":{\"n00dles\":[3616.967940974767,50,0,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":472.6569438410221,\"onlineMoneyMade\":3616.967940974767,\"onlineRunningTime\":2250.4100000001445,\"ramUsage\":2,\"server\":\"nectar-net\",\"scriptKey\":\"cell.js*[\\\"nectar-net|2\\\"]\",\"title\":\"cell.js nectar-net|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net|3\"],\"dataMap\":{\"n00dles\":[3613.0473606726796,50,0,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":472.6569438410221,\"onlineMoneyMade\":3613.0473606726796,\"onlineRunningTime\":2250.4100000001445,\"ramUsage\":2,\"server\":\"nectar-net\",\"scriptKey\":\"cell.js*[\\\"nectar-net|3\\\"]\",\"title\":\"cell.js nectar-net|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net|4\"],\"dataMap\":{\"n00dles\":[3609.131106274797,50,0,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":472.6569438410221,\"onlineMoneyMade\":3609.131106274797,\"onlineRunningTime\":2250.4100000001445,\"ramUsage\":2,\"server\":\"nectar-net\",\"scriptKey\":\"cell.js*[\\\"nectar-net|4\\\"]\",\"title\":\"cell.js nectar-net|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net|5\"],\"dataMap\":{\"n00dles\":[3609.369441671243,50,0,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":472.6569438410221,\"onlineMoneyMade\":3609.369441671243,\"onlineRunningTime\":2250.4100000001445,\"ramUsage\":2,\"server\":\"nectar-net\",\"scriptKey\":\"cell.js*[\\\"nectar-net|5\\\"]\",\"title\":\"cell.js nectar-net|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net|6\"],\"dataMap\":{\"n00dles\":[3605.5335033366673,50,0,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":472.6569438410221,\"onlineMoneyMade\":3605.5335033366673,\"onlineRunningTime\":2250.4100000001445,\"ramUsage\":2,\"server\":\"nectar-net\",\"scriptKey\":\"cell.js*[\\\"nectar-net|6\\\"]\",\"title\":\"cell.js nectar-net|6\",\"threads\":1,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-428389.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[67,20,123,182,75,178,15,185,109,16,69,89,68,192,123,52,8,62,184,189,66,20,77,140,127,107,3,112,182,87,43,170,49,65,83,51,60,9,106,154,3,150,6,61,66,133,92,137,13,14]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"9.8.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"neo-net\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":1000000,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|0\"],\"dataMap\":{\"n00dles\":[15201.090723629757,213,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":945.3138876820398,\"onlineMoneyMade\":15201.090723629757,\"onlineRunningTime\":1857.0100000002853,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|0\\\"]\",\"title\":\"cell.js neo-net|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|1\"],\"dataMap\":{\"n00dles\":[15187.182513346586,213,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":945.3138876820398,\"onlineMoneyMade\":15187.182513346586,\"onlineRunningTime\":1857.0100000002853,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|1\\\"]\",\"title\":\"cell.js neo-net|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|2\"],\"dataMap\":{\"n00dles\":[15170.72726084606,213,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":945.3138876820398,\"onlineMoneyMade\":15170.72726084606,\"onlineRunningTime\":1857.0100000002853,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|2\\\"]\",\"title\":\"cell.js neo-net|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|3\"],\"dataMap\":{\"n00dles\":[15154.290157617492,213,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":945.3138876820398,\"onlineMoneyMade\":15154.290157617492,\"onlineRunningTime\":1857.0100000002853,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|3\\\"]\",\"title\":\"cell.js neo-net|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|4\"],\"dataMap\":{\"n00dles\":[15136.824849198718,213,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":945.3138876820398,\"onlineMoneyMade\":15136.824849198718,\"onlineRunningTime\":1857.0100000002853,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|4\\\"]\",\"title\":\"cell.js neo-net|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|5\"],\"dataMap\":{\"n00dles\":[15120.425108908223,213,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":945.3138876820398,\"onlineMoneyMade\":15120.425108908223,\"onlineRunningTime\":1857.0100000002853,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|5\\\"]\",\"title\":\"cell.js neo-net|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|6\"],\"dataMap\":{\"n00dles\":[15104.043455651441,213,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":945.3138876820398,\"onlineMoneyMade\":15104.043455651441,\"onlineRunningTime\":1857.0100000002853,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|6\\\"]\",\"title\":\"cell.js neo-net|6\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|7\"],\"dataMap\":{\"n00dles\":[15087.679869140786,213,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":945.3138876820398,\"onlineMoneyMade\":15087.679869140786,\"onlineRunningTime\":1857.0100000002853,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|7\\\"]\",\"title\":\"cell.js neo-net|7\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|8\"],\"dataMap\":{\"n00dles\":[15071.33432911184,213,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":945.3138876820398,\"onlineMoneyMade\":15071.33432911184,\"onlineRunningTime\":1857.0100000002853,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|8\\\"]\",\"title\":\"cell.js neo-net|8\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|9\"],\"dataMap\":{\"n00dles\":[15055.006815323217,213,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":945.3138876820398,\"onlineMoneyMade\":15055.006815323217,\"onlineRunningTime\":1857.0100000002853,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|9\\\"]\",\"title\":\"cell.js neo-net|9\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|10\"],\"dataMap\":{\"n00dles\":[15040.454063830659,213,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":945.3138876820398,\"onlineMoneyMade\":15040.454063830659,\"onlineRunningTime\":1857.0100000002853,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|10\\\"]\",\"title\":\"cell.js neo-net|10\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|11\"],\"dataMap\":{\"n00dles\":[15024.16062738195,213,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":945.3138876820398,\"onlineMoneyMade\":15024.16062738195,\"onlineRunningTime\":1857.0100000002853,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|11\\\"]\",\"title\":\"cell.js neo-net|11\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|12\"],\"dataMap\":{\"n00dles\":[15038.312395552426,213,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":945.3138876820398,\"onlineMoneyMade\":15038.312395552426,\"onlineRunningTime\":1857.0100000002853,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|12\\\"]\",\"title\":\"cell.js neo-net|12\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|13\"],\"dataMap\":{\"n00dles\":[15022.021634650824,213,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":945.3138876820398,\"onlineMoneyMade\":15022.021634650824,\"onlineRunningTime\":1857.0100000002853,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|13\\\"]\",\"title\":\"cell.js neo-net|13\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net|14\"],\"dataMap\":{\"n00dles\":[15005.748838198762,213,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":945.3138876820398,\"onlineMoneyMade\":15005.748838198762,\"onlineRunningTime\":1857.0100000002853,\"ramUsage\":2,\"server\":\"neo-net\",\"scriptKey\":\"cell.js*[\\\"neo-net|14\\\"]\",\"title\":\"cell.js neo-net|14\",\"threads\":1,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-359091.cct\",\"type\":\"Array Jumping Game\",\"data\":[7,9,9,8],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"95.8.6.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"silver-helix\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"zer0\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":9000000,\"moneyMax\":45000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|0\"],\"dataMap\":{\"n00dles\":[5967.731265728661,84,50,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":570.5948691414136,\"onlineMoneyMade\":5967.731265728661,\"onlineRunningTime\":1858.4100000002857,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|0\\\"]\",\"title\":\"cell.js silver-helix|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|1\"],\"dataMap\":{\"n00dles\":[5961.264578707413,84,50,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":570.5948691414136,\"onlineMoneyMade\":5961.264578707413,\"onlineRunningTime\":1858.4100000002857,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|1\\\"]\",\"title\":\"cell.js silver-helix|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|2\"],\"dataMap\":{\"n00dles\":[5955.007824391604,84,50,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":570.5948691414136,\"onlineMoneyMade\":5955.007824391604,\"onlineRunningTime\":1858.4100000002857,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|2\\\"]\",\"title\":\"cell.js silver-helix|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|3\"],\"dataMap\":{\"n00dles\":[15454.37210918457,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15454.37210918457,\"onlineRunningTime\":1858.4100000002857,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|3\\\"]\",\"title\":\"cell.js silver-helix|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|4\"],\"dataMap\":{\"n00dles\":[15443.928864725462,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15443.928864725462,\"onlineRunningTime\":1858.4100000002857,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|4\\\"]\",\"title\":\"cell.js silver-helix|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|5\"],\"dataMap\":{\"n00dles\":[15427.188828818607,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15427.188828818607,\"onlineRunningTime\":1858.4100000002857,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|5\\\"]\",\"title\":\"cell.js silver-helix|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|6\"],\"dataMap\":{\"n00dles\":[15412.402691735859,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15412.402691735859,\"onlineRunningTime\":1858.4100000002857,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|6\\\"]\",\"title\":\"cell.js silver-helix|6\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|7\"],\"dataMap\":{\"n00dles\":[15396.201979723,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15396.201979723,\"onlineRunningTime\":1858.4100000002857,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|7\\\"]\",\"title\":\"cell.js silver-helix|7\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|8\"],\"dataMap\":{\"n00dles\":[15379.514622832688,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15379.514622832688,\"onlineRunningTime\":1858.4100000002857,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|8\\\"]\",\"title\":\"cell.js silver-helix|8\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|9\"],\"dataMap\":{\"n00dles\":[15362.845677211957,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15362.845677211957,\"onlineRunningTime\":1858.4100000002857,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|9\\\"]\",\"title\":\"cell.js silver-helix|9\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|10\"],\"dataMap\":{\"n00dles\":[15348.13207742346,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15348.13207742346,\"onlineRunningTime\":1858.4100000002857,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|10\\\"]\",\"title\":\"cell.js silver-helix|10\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|11\"],\"dataMap\":{\"n00dles\":[15331.49780008186,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15331.49780008186,\"onlineRunningTime\":1858.4100000002857,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|11\\\"]\",\"title\":\"cell.js silver-helix|11\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|12\"],\"dataMap\":{\"n00dles\":[15314.881874404704,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15314.881874404704,\"onlineRunningTime\":1858.4100000002857,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|12\\\"]\",\"title\":\"cell.js silver-helix|12\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|13\"],\"dataMap\":{\"n00dles\":[15270.21855775897,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15270.21855775897,\"onlineRunningTime\":1858.4100000002857,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|13\\\"]\",\"title\":\"cell.js silver-helix|13\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|14\"],\"dataMap\":{\"n00dles\":[15253.670272560272,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15253.670272560272,\"onlineRunningTime\":1858.4100000002857,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|14\\\"]\",\"title\":\"cell.js silver-helix|14\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|15\"],\"dataMap\":{\"n00dles\":[15300.318485430631,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15300.318485430631,\"onlineRunningTime\":1858.2100000002856,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|15\\\"]\",\"title\":\"cell.js silver-helix|15\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|16\"],\"dataMap\":{\"n00dles\":[15283.737073753438,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15283.737073753438,\"onlineRunningTime\":1858.2100000002856,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|16\\\"]\",\"title\":\"cell.js silver-helix|16\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|17\"],\"dataMap\":{\"n00dles\":[15239.312984731525,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15239.312984731525,\"onlineRunningTime\":1858.2100000002856,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|17\\\"]\",\"title\":\"cell.js silver-helix|17\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|18\"],\"dataMap\":{\"n00dles\":[15224.731351173037,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15224.731351173037,\"onlineRunningTime\":1858.2100000002856,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|18\\\"]\",\"title\":\"cell.js silver-helix|18\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|19\"],\"dataMap\":{\"n00dles\":[15210.212966801557,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15210.212966801557,\"onlineRunningTime\":1858.2100000002856,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|19\\\"]\",\"title\":\"cell.js silver-helix|19\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|20\"],\"dataMap\":{\"n00dles\":[15213.274934029067,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15213.274934029067,\"onlineRunningTime\":1858.2100000002856,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|20\\\"]\",\"title\":\"cell.js silver-helix|20\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|21\"],\"dataMap\":{\"n00dles\":[15196.789968287063,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15196.789968287063,\"onlineRunningTime\":1858.2100000002856,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|21\\\"]\",\"title\":\"cell.js silver-helix|21\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|22\"],\"dataMap\":{\"n00dles\":[15180.323186124282,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15180.323186124282,\"onlineRunningTime\":1858.2100000002856,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|22\\\"]\",\"title\":\"cell.js silver-helix|22\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|23\"],\"dataMap\":{\"n00dles\":[15164.108969086308,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15164.108969086308,\"onlineRunningTime\":1858.2100000002856,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|23\\\"]\",\"title\":\"cell.js silver-helix|23\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|24\"],\"dataMap\":{\"n00dles\":[15147.678241958032,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15147.678241958032,\"onlineRunningTime\":1858.2100000002856,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|24\\\"]\",\"title\":\"cell.js silver-helix|24\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|25\"],\"dataMap\":{\"n00dles\":[15171.106948953817,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15171.106948953817,\"onlineRunningTime\":1858.2100000002856,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|25\\\"]\",\"title\":\"cell.js silver-helix|25\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|26\"],\"dataMap\":{\"n00dles\":[15154.66918545097,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15154.66918545097,\"onlineRunningTime\":1858.2100000002856,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|26\\\"]\",\"title\":\"cell.js silver-helix|26\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|27\"],\"dataMap\":{\"n00dles\":[15138.249551854331,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15138.249551854331,\"onlineRunningTime\":1858.2100000002856,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|27\\\"]\",\"title\":\"cell.js silver-helix|27\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|28\"],\"dataMap\":{\"n00dles\":[15121.848027827202,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15121.848027827202,\"onlineRunningTime\":1858.2100000002856,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|28\\\"]\",\"title\":\"cell.js silver-helix|28\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|29\"],\"dataMap\":{\"n00dles\":[15105.464593056078,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15105.464593056078,\"onlineRunningTime\":1858.2100000002856,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|29\\\"]\",\"title\":\"cell.js silver-helix|29\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix|30\"],\"dataMap\":{\"n00dles\":[15089.099227250612,214,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":949.5720583472742,\"onlineMoneyMade\":15089.099227250612,\"onlineRunningTime\":1858.2100000002856,\"ramUsage\":2,\"server\":\"silver-helix\",\"scriptKey\":\"cell.js*[\\\"silver-helix|30\\\"]\",\"title\":\"cell.js silver-helix|30\",\"threads\":1,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"21.3.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"hong-fang-tea\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":600000,\"moneyMax\":3000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea|0\"],\"dataMap\":{\"n00dles\":[0,0,0,73]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.8464585621132,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.810000000144,\"ramUsage\":2,\"server\":\"hong-fang-tea\",\"scriptKey\":\"cell.js*[\\\"hong-fang-tea|0\\\"]\",\"title\":\"cell.js hong-fang-tea|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea|1\"],\"dataMap\":{\"n00dles\":[0,0,0,73]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.8464585621132,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.810000000144,\"ramUsage\":2,\"server\":\"hong-fang-tea\",\"scriptKey\":\"cell.js*[\\\"hong-fang-tea|1\\\"]\",\"title\":\"cell.js hong-fang-tea|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea|2\"],\"dataMap\":{\"n00dles\":[0,0,0,73]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.8464585621132,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.810000000144,\"ramUsage\":2,\"server\":\"hong-fang-tea\",\"scriptKey\":\"cell.js*[\\\"hong-fang-tea|2\\\"]\",\"title\":\"cell.js hong-fang-tea|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea|3\"],\"dataMap\":{\"n00dles\":[0,0,0,73]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.8464585621132,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.810000000144,\"ramUsage\":2,\"server\":\"hong-fang-tea\",\"scriptKey\":\"cell.js*[\\\"hong-fang-tea|3\\\"]\",\"title\":\"cell.js hong-fang-tea|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea|4\"],\"dataMap\":{\"n00dles\":[0,0,0,73]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.8464585621132,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.810000000144,\"ramUsage\":2,\"server\":\"hong-fang-tea\",\"scriptKey\":\"cell.js*[\\\"hong-fang-tea|4\\\"]\",\"title\":\"cell.js hong-fang-tea|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea|5\"],\"dataMap\":{\"n00dles\":[0,0,0,73]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.8464585621132,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.810000000144,\"ramUsage\":2,\"server\":\"hong-fang-tea\",\"scriptKey\":\"cell.js*[\\\"hong-fang-tea|5\\\"]\",\"title\":\"cell.js hong-fang-tea|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea|6\"],\"dataMap\":{\"n00dles\":[0,0,0,73]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.8464585621132,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.810000000144,\"ramUsage\":2,\"server\":\"hong-fang-tea\",\"scriptKey\":\"cell.js*[\\\"hong-fang-tea|6\\\"]\",\"title\":\"cell.js hong-fang-tea|6\",\"threads\":1,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"9.0.1.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"harakiri-sushi\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":800000,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi|0\"],\"dataMap\":{\"n00dles\":[0,0,0,73]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.8464585621132,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.810000000144,\"ramUsage\":2,\"server\":\"harakiri-sushi\",\"scriptKey\":\"cell.js*[\\\"harakiri-sushi|0\\\"]\",\"title\":\"cell.js harakiri-sushi|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi|1\"],\"dataMap\":{\"n00dles\":[0,0,0,73]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.8464585621132,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.810000000144,\"ramUsage\":2,\"server\":\"harakiri-sushi\",\"scriptKey\":\"cell.js*[\\\"harakiri-sushi|1\\\"]\",\"title\":\"cell.js harakiri-sushi|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi|2\"],\"dataMap\":{\"n00dles\":[0,0,0,73]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.8464585621132,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.810000000144,\"ramUsage\":2,\"server\":\"harakiri-sushi\",\"scriptKey\":\"cell.js*[\\\"harakiri-sushi|2\\\"]\",\"title\":\"cell.js harakiri-sushi|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi|3\"],\"dataMap\":{\"n00dles\":[0,0,0,73]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.8464585621132,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.810000000144,\"ramUsage\":2,\"server\":\"harakiri-sushi\",\"scriptKey\":\"cell.js*[\\\"harakiri-sushi|3\\\"]\",\"title\":\"cell.js harakiri-sushi|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi|4\"],\"dataMap\":{\"n00dles\":[0,0,0,73]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.8464585621132,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.810000000144,\"ramUsage\":2,\"server\":\"harakiri-sushi\",\"scriptKey\":\"cell.js*[\\\"harakiri-sushi|4\\\"]\",\"title\":\"cell.js harakiri-sushi|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi|5\"],\"dataMap\":{\"n00dles\":[0,0,0,73]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.8464585621132,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.810000000144,\"ramUsage\":2,\"server\":\"harakiri-sushi\",\"scriptKey\":\"cell.js*[\\\"harakiri-sushi|5\\\"]\",\"title\":\"cell.js harakiri-sushi|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi|6\"],\"dataMap\":{\"n00dles\":[0,0,0,73]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.8464585621132,\"onlineMoneyMade\":0,\"onlineRunningTime\":2250.810000000144,\"ramUsage\":2,\"server\":\"harakiri-sushi\",\"scriptKey\":\"cell.js*[\\\"harakiri-sushi|6\\\"]\",\"title\":\"cell.js harakiri-sushi|6\",\"threads\":1,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"23.6.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"phantasy\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"computek\",\"netlink\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":4800000,\"moneyMax\":24000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|0\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1862.0100000002865,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|0\\\"]\",\"title\":\"cell.js phantasy|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|1\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1862.0100000002865,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|1\\\"]\",\"title\":\"cell.js phantasy|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|2\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1861.8100000002864,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|2\\\"]\",\"title\":\"cell.js phantasy|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|3\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1861.8100000002864,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|3\\\"]\",\"title\":\"cell.js phantasy|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|4\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1861.8100000002864,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|4\\\"]\",\"title\":\"cell.js phantasy|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|5\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1861.8100000002864,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|5\\\"]\",\"title\":\"cell.js phantasy|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|6\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1861.8100000002864,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|6\\\"]\",\"title\":\"cell.js phantasy|6\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|7\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1861.8100000002864,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|7\\\"]\",\"title\":\"cell.js phantasy|7\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|8\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1861.8100000002864,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|8\\\"]\",\"title\":\"cell.js phantasy|8\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|9\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1861.8100000002864,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|9\\\"]\",\"title\":\"cell.js phantasy|9\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|10\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1861.8100000002864,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|10\\\"]\",\"title\":\"cell.js phantasy|10\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|11\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1861.8100000002864,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|11\\\"]\",\"title\":\"cell.js phantasy|11\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|12\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1861.8100000002864,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|12\\\"]\",\"title\":\"cell.js phantasy|12\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|13\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1861.8100000002864,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|13\\\"]\",\"title\":\"cell.js phantasy|13\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy|14\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1861.8100000002864,\"ramUsage\":2,\"server\":\"phantasy\",\"scriptKey\":\"cell.js*[\\\"phantasy|14\\\"]\",\"title\":\"cell.js phantasy|14\",\"threads\":1,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-764267.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"N11u4wRVkN11u4wRAPC354wR7lkK1TK1TXTK1TaMnwK1TaMnMnwZ5768CxbPmXHWjZ4ASjZ4A\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"36.6.7.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"max-hardware\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"harakiri-sushi\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2000000,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|0\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1863.2100000002868,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|0\\\"]\",\"title\":\"cell.js max-hardware|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|1\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1863.0100000002867,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|1\\\"]\",\"title\":\"cell.js max-hardware|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|2\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1863.0100000002867,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|2\\\"]\",\"title\":\"cell.js max-hardware|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|3\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1863.0100000002867,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|3\\\"]\",\"title\":\"cell.js max-hardware|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|4\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1863.0100000002867,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|4\\\"]\",\"title\":\"cell.js max-hardware|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|5\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1863.0100000002867,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|5\\\"]\",\"title\":\"cell.js max-hardware|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|6\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1863.0100000002867,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|6\\\"]\",\"title\":\"cell.js max-hardware|6\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|7\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1863.0100000002867,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|7\\\"]\",\"title\":\"cell.js max-hardware|7\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|8\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1863.0100000002867,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|8\\\"]\",\"title\":\"cell.js max-hardware|8\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|9\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1863.0100000002867,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|9\\\"]\",\"title\":\"cell.js max-hardware|9\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|10\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1863.0100000002867,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|10\\\"]\",\"title\":\"cell.js max-hardware|10\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|11\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1863.0100000002867,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|11\\\"]\",\"title\":\"cell.js max-hardware|11\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|12\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1863.0100000002867,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|12\\\"]\",\"title\":\"cell.js max-hardware|12\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|13\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1863.0100000002867,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|13\\\"]\",\"title\":\"cell.js max-hardware|13\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware|14\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1863.0100000002867,\"ramUsage\":2,\"server\":\"max-hardware\",\"scriptKey\":\"cell.js*[\\\"max-hardware|14\\\"]\",\"title\":\"cell.js max-hardware|14\",\"threads\":1,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"61.6.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"omega-net\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":12482374.4,\"moneyMax\":62411872,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":207,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net|0\"],\"dataMap\":{\"n00dles\":[9213.240154910567,129,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":587.6275518023511,\"onlineMoneyMade\":9213.240154910567,\"onlineRunningTime\":1205.2100000001371,\"ramUsage\":2,\"server\":\"omega-net\",\"scriptKey\":\"cell.js*[\\\"omega-net|0\\\"]\",\"title\":\"cell.js omega-net|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net|1\"],\"dataMap\":{\"n00dles\":[9203.25846520763,129,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":587.6275518023511,\"onlineMoneyMade\":9203.25846520763,\"onlineRunningTime\":1205.2100000001371,\"ramUsage\":2,\"server\":\"omega-net\",\"scriptKey\":\"cell.js*[\\\"omega-net|1\\\"]\",\"title\":\"cell.js omega-net|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net|2\"],\"dataMap\":{\"n00dles\":[9193.28778390383,129,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":587.6275518023511,\"onlineMoneyMade\":9193.28778390383,\"onlineRunningTime\":1205.2100000001371,\"ramUsage\":2,\"server\":\"omega-net\",\"scriptKey\":\"cell.js*[\\\"omega-net|2\\\"]\",\"title\":\"cell.js omega-net|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net|3\"],\"dataMap\":{\"n00dles\":[9187.22332374874,129,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":587.6275518023511,\"onlineMoneyMade\":9187.22332374874,\"onlineRunningTime\":1205.010000000137,\"ramUsage\":2,\"server\":\"omega-net\",\"scriptKey\":\"cell.js*[\\\"omega-net|3\\\"]\",\"title\":\"cell.js omega-net|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net|4\"],\"dataMap\":{\"n00dles\":[9177.270269907473,129,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":587.6275518023511,\"onlineMoneyMade\":9177.270269907473,\"onlineRunningTime\":1205.010000000137,\"ramUsage\":2,\"server\":\"omega-net\",\"scriptKey\":\"cell.js*[\\\"omega-net|4\\\"]\",\"title\":\"cell.js omega-net|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net|5\"],\"dataMap\":{\"n00dles\":[9167.328192406192,129,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":587.6275518023511,\"onlineMoneyMade\":9167.328192406192,\"onlineRunningTime\":1205.010000000137,\"ramUsage\":2,\"server\":\"omega-net\",\"scriptKey\":\"cell.js*[\\\"omega-net|5\\\"]\",\"title\":\"cell.js omega-net|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net|6\"],\"dataMap\":{\"n00dles\":[9157.397078933936,129,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":587.6275518023511,\"onlineMoneyMade\":9157.397078933936,\"onlineRunningTime\":1205.010000000137,\"ramUsage\":2,\"server\":\"omega-net\",\"scriptKey\":\"cell.js*[\\\"omega-net|6\\\"]\",\"title\":\"cell.js omega-net|6\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net|7\"],\"dataMap\":{\"n00dles\":[9147.47691719377,129,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":587.6275518023511,\"onlineMoneyMade\":9147.47691719377,\"onlineRunningTime\":1205.010000000137,\"ramUsage\":2,\"server\":\"omega-net\",\"scriptKey\":\"cell.js*[\\\"omega-net|7\\\"]\",\"title\":\"cell.js omega-net|7\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net|8\"],\"dataMap\":{\"n00dles\":[9137.567694902773,129,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":587.6275518023511,\"onlineMoneyMade\":9137.567694902773,\"onlineRunningTime\":1205.010000000137,\"ramUsage\":2,\"server\":\"omega-net\",\"scriptKey\":\"cell.js*[\\\"omega-net|8\\\"]\",\"title\":\"cell.js omega-net|8\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net|9\"],\"dataMap\":{\"n00dles\":[9135.015682742074,129,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":587.6275518023511,\"onlineMoneyMade\":9135.015682742074,\"onlineRunningTime\":1205.010000000137,\"ramUsage\":2,\"server\":\"omega-net\",\"scriptKey\":\"cell.js*[\\\"omega-net|9\\\"]\",\"title\":\"cell.js omega-net|9\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net|10\"],\"dataMap\":{\"n00dles\":[9125.120369037233,129,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":587.6275518023511,\"onlineMoneyMade\":9125.120369037233,\"onlineRunningTime\":1205.010000000137,\"ramUsage\":2,\"server\":\"omega-net\",\"scriptKey\":\"cell.js*[\\\"omega-net|10\\\"]\",\"title\":\"cell.js omega-net|10\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net|11\"],\"dataMap\":{\"n00dles\":[9115.235966739212,129,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":587.6275518023511,\"onlineMoneyMade\":9115.235966739212,\"onlineRunningTime\":1205.010000000137,\"ramUsage\":2,\"server\":\"omega-net\",\"scriptKey\":\"cell.js*[\\\"omega-net|11\\\"]\",\"title\":\"cell.js omega-net|11\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net|12\"],\"dataMap\":{\"n00dles\":[9119.342353681308,129,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":587.6275518023511,\"onlineMoneyMade\":9119.342353681308,\"onlineRunningTime\":1205.010000000137,\"ramUsage\":2,\"server\":\"omega-net\",\"scriptKey\":\"cell.js*[\\\"omega-net|12\\\"]\",\"title\":\"cell.js omega-net|12\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net|13\"],\"dataMap\":{\"n00dles\":[9109.464385009245,129,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":587.6275518023511,\"onlineMoneyMade\":9109.464385009245,\"onlineRunningTime\":1205.010000000137,\"ramUsage\":2,\"server\":\"omega-net\",\"scriptKey\":\"cell.js*[\\\"omega-net|13\\\"]\",\"title\":\"cell.js omega-net|13\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net|14\"],\"dataMap\":{\"n00dles\":[9099.597308227294,129,9,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":587.6275518023511,\"onlineMoneyMade\":9099.597308227294,\"onlineRunningTime\":1205.010000000137,\"ramUsage\":2,\"server\":\"omega-net\",\"scriptKey\":\"cell.js*[\\\"omega-net|14\\\"]\",\"title\":\"cell.js omega-net|14\",\"threads\":1,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-747655.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,7,0,6,3,9,5,3,3,0,10,9],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"66.3.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":10802108.8,\"moneyMax\":54010544,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":225,\"serverGrowth\":29,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-859972.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[98,114,64,110,46,12,128,117,116,89,35,10,5,88,135,119,20,172,67,82,169,160]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"53.3.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"iron-gym\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":4000000,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|0\"],\"dataMap\":{\"n00dles\":[0,0,0,61]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":259.74841057929984,\"onlineMoneyMade\":0,\"onlineRunningTime\":1865.4100000002873,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|0\\\"]\",\"title\":\"cell.js iron-gym|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|1\"],\"dataMap\":{\"n00dles\":[0,0,7,55]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":264.0065812445343,\"onlineMoneyMade\":0,\"onlineRunningTime\":1865.4100000002873,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|1\\\"]\",\"title\":\"cell.js iron-gym|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|2\"],\"dataMap\":{\"n00dles\":[0,0,7,55]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":264.0065812445343,\"onlineMoneyMade\":0,\"onlineRunningTime\":1865.2100000002872,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|2\\\"]\",\"title\":\"cell.js iron-gym|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|3\"],\"dataMap\":{\"n00dles\":[0,0,7,55]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":264.0065812445343,\"onlineMoneyMade\":0,\"onlineRunningTime\":1865.2100000002872,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|3\\\"]\",\"title\":\"cell.js iron-gym|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|4\"],\"dataMap\":{\"n00dles\":[0,0,7,55]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":264.0065812445343,\"onlineMoneyMade\":0,\"onlineRunningTime\":1865.2100000002872,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|4\\\"]\",\"title\":\"cell.js iron-gym|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|5\"],\"dataMap\":{\"n00dles\":[0,0,7,55]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":264.0065812445343,\"onlineMoneyMade\":0,\"onlineRunningTime\":1865.2100000002872,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|5\\\"]\",\"title\":\"cell.js iron-gym|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|6\"],\"dataMap\":{\"n00dles\":[0,0,7,55]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":264.0065812445343,\"onlineMoneyMade\":0,\"onlineRunningTime\":1865.2100000002872,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|6\\\"]\",\"title\":\"cell.js iron-gym|6\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|7\"],\"dataMap\":{\"n00dles\":[0,0,7,55]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":264.0065812445343,\"onlineMoneyMade\":0,\"onlineRunningTime\":1865.2100000002872,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|7\\\"]\",\"title\":\"cell.js iron-gym|7\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|8\"],\"dataMap\":{\"n00dles\":[0,0,7,55]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":264.0065812445343,\"onlineMoneyMade\":0,\"onlineRunningTime\":1865.2100000002872,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|8\\\"]\",\"title\":\"cell.js iron-gym|8\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|9\"],\"dataMap\":{\"n00dles\":[0,0,7,55]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":264.0065812445343,\"onlineMoneyMade\":0,\"onlineRunningTime\":1865.2100000002872,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|9\\\"]\",\"title\":\"cell.js iron-gym|9\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|10\"],\"dataMap\":{\"n00dles\":[0,0,35,33]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":289.55560523594096,\"onlineMoneyMade\":0,\"onlineRunningTime\":1865.2100000002872,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|10\\\"]\",\"title\":\"cell.js iron-gym|10\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|11\"],\"dataMap\":{\"n00dles\":[0,0,35,33]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":289.55560523594096,\"onlineMoneyMade\":0,\"onlineRunningTime\":1865.2100000002872,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|11\\\"]\",\"title\":\"cell.js iron-gym|11\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|12\"],\"dataMap\":{\"n00dles\":[0,0,35,33]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":289.55560523594096,\"onlineMoneyMade\":0,\"onlineRunningTime\":1865.2100000002872,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|12\\\"]\",\"title\":\"cell.js iron-gym|12\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|13\"],\"dataMap\":{\"n00dles\":[0,0,35,33]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":289.55560523594096,\"onlineMoneyMade\":0,\"onlineRunningTime\":1865.2100000002872,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|13\\\"]\",\"title\":\"cell.js iron-gym|13\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym|14\"],\"dataMap\":{\"n00dles\":[0,0,35,33]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":289.55560523594096,\"onlineMoneyMade\":0,\"onlineRunningTime\":1865.2100000002872,\"ramUsage\":2,\"server\":\"iron-gym\",\"scriptKey\":\"cell.js*[\\\"iron-gym|14\\\"]\",\"title\":\"cell.js iron-gym|14\",\"threads\":1,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-829973-Netburners.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,0],[0,0,1,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0],[0,0,1,1,1,0,0,0,0],[1,0,1,1,0,0,0,0,0]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"80.1.2.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":50000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":517,\"serverGrowth\":42,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-763934-Netburners.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[149,28,68,46,33,48,179,196,177,48,79,78,34,168,160,115,84,111,186,137,150,73,131,165,181,54,79,5,88,131,20,150,189,171,84,118,189]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"87.2.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":180000000,\"moneyMax\":900000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1088,\"serverGrowth\":53,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-748121.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[2,6],[2,3,1],[2,5,3,2],[4,9,2,3,2]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"99.9.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":90000000,\"moneyMax\":450000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":783,\"serverGrowth\":48,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-328525.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-5,0,1,0,-10,3,3,3,-7,0,3,-3,-1],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"89.8.4.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":514,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"67.7.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":362,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"99.2.0.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"avmnite-02h\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"zb-institute\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":202,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"avmnite-02h|0\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1860.8100000002862,\"ramUsage\":2,\"server\":\"avmnite-02h\",\"scriptKey\":\"cell.js*[\\\"avmnite-02h|0\\\"]\",\"title\":\"cell.js avmnite-02h|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"avmnite-02h|1\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1860.8100000002862,\"ramUsage\":2,\"server\":\"avmnite-02h\",\"scriptKey\":\"cell.js*[\\\"avmnite-02h|1\\\"]\",\"title\":\"cell.js avmnite-02h|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"avmnite-02h|2\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1860.8100000002862,\"ramUsage\":2,\"server\":\"avmnite-02h\",\"scriptKey\":\"cell.js*[\\\"avmnite-02h|2\\\"]\",\"title\":\"cell.js avmnite-02h|2\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"avmnite-02h|3\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1860.8100000002862,\"ramUsage\":2,\"server\":\"avmnite-02h\",\"scriptKey\":\"cell.js*[\\\"avmnite-02h|3\\\"]\",\"title\":\"cell.js avmnite-02h|3\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"avmnite-02h|4\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1860.6100000002862,\"ramUsage\":2,\"server\":\"avmnite-02h\",\"scriptKey\":\"cell.js*[\\\"avmnite-02h|4\\\"]\",\"title\":\"cell.js avmnite-02h|4\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"avmnite-02h|5\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1860.6100000002862,\"ramUsage\":2,\"server\":\"avmnite-02h\",\"scriptKey\":\"cell.js*[\\\"avmnite-02h|5\\\"]\",\"title\":\"cell.js avmnite-02h|5\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"avmnite-02h|6\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1860.6100000002862,\"ramUsage\":2,\"server\":\"avmnite-02h\",\"scriptKey\":\"cell.js*[\\\"avmnite-02h|6\\\"]\",\"title\":\"cell.js avmnite-02h|6\",\"threads\":1,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"55.0.8.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":510,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-767726.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"b33333333IIttttttyyyyyyyyyyii5CIIIIIIIIII66UFFFFFFFFFFFFllDDDDD\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"32.9.0.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nvar portNames = {\\n  \\\"telemetry\\\" : 1,\\n  \\\"db\\\" : 2,\\n  \\\"test\\\" : 20\\n}\\n\\nexport async function safeLoop(ns, f){\\n\\tfor(;;){\\n\\t\\tawait f();\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\nexport function forEach(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    f(i, arr[i]);\\n  }\\n}\\n\\nexport async function forEachAsync(arr, f){\\n  for(var i = 0; i < arr.length; i++){\\n    await f(i, arr[i]);\\n  }\\n}\\n\\nexport function pushAll(destination, newElements){\\n  forEach(newElements, function(i, e){\\n    destination.push(e);\\n  });\\n}\\n\\nexport async function portSend(ns, portName, message){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  await port.write(message);\\n}\\n\\nexport async function portReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  while(await port.empty()){\\n    await ns.sleep(100);\\n  }\\n  return await port.read();\\n}\\n\\nexport async function portTryReceive(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.read();\\n}\\n\\nexport async function portPeek(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.peek();\\n}\\n\\nexport async function portClear(ns, portName){\\n  var portNumber = portNames[portName];\\n  var port = await ns.getPortHandle(portNumber);\\n  return await port.clear();\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"CSEC\"}}],[\"cell.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport { safeLoop } from \\\"./utils.js\\\";\\n\\nvar _cellStates;\\n\\nfunction getLocalCellState(instanceId){\\n  if(typeof(_cellStates) === \\\"undefined\\\"){\\n    _cellStates = [];\\n  }\\n  if(typeof(_cellStates[instanceId]) === \\\"undefined\\\"){\\n    _cellStates[instanceId] = {\\n      command: \\\"idle\\\",\\n      target: null\\n    };\\n  }\\n  return _cellStates[instanceId];\\n}\\n\\nfunction Cell (ns, options) {\\n  \\n  var instanceId = options.instanceId;\\n  \\n  var cellState = getLocalCellState(instanceId);\\n  \\n  async function execute(){\\n    cellState.command = \\\"idle\\\";\\n    await safeLoop(ns, async function(){\\n      switch(cellState.command){\\n        case \\\"hack\\\":\\n          await ns.hack(cellState.target);\\n          break;\\n        case \\\"weaken\\\":\\n          await ns.weaken(cellState.target);\\n          break;\\n        case \\\"grow\\\":\\n          await ns.grow(cellState.target);\\n          break;\\n        default:\\n          await ns.sleep(6*1000);\\n          break;\\n      }\\n    });\\n  }\\n  \\n  return {\\n\\t  execute\\n  }\\n  \\n};\\n\\nfunction printHelp(ns){\\n  ns.tprint(\\\"Usage:\\\");\\n  ns.tprint(\\\"  cell.js <instance number>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> status\\\");\\n  ns.tprint(\\\"  cell.js <instance number> hack <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> weaken <target>\\\");\\n  ns.tprint(\\\"  cell.js <instance number> grow <target>\\\");\\n}\\n\\nexport async function main(ns) {\\n  \\n  if(ns.args.length == 1){\\n    var instanceId = ns.args[0];\\n    var newCell = new Cell(ns, { instanceId });\\n    await newCell.execute();\\n  } else if(ns.args.length == 2 && ns.args[1] == \\\"status\\\"){\\n    var instanceId = ns.args[0];\\n    var cellState = getLocalCellState(instanceId);\\n    ns.tprint(\\n      \\\"Cell \\\",\\n      instanceId,\\n      \\\": \\\",\\n      cellState.command,\\n      \\\" \\\",\\n      cellState.target);\\n  } else if(ns.args.length == 3){\\n    var instanceId = ns.args[0];\\n    var command = ns.args[1];\\n    var target = ns.args[2];\\n    var cellState = getLocalCellState(instanceId);\\n    cellState.command = command;\\n    cellState.target = target;\\n  } else {\\n    printHelp(ns);\\n  }\\n  \\n}\",\"filename\":\"cell.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":55,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC|0\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1864.210000000287,\"ramUsage\":2,\"server\":\"CSEC\",\"scriptKey\":\"cell.js*[\\\"CSEC|0\\\"]\",\"title\":\"cell.js CSEC|0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC|1\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1864.210000000287,\"ramUsage\":2,\"server\":\"CSEC\",\"scriptKey\":\"cell.js*[\\\"CSEC|1\\\"]\",\"title\":\"cell.js CSEC|1\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC|2\"],\"dataMap\":{\"n00dles\":[0,0,76,0]},\"filename\":\"cell.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":323.6209705578165,\"onlineMoneyMade\":0,\"onlineRunningTime\":1864.210000000287,\"ramUsage\":2,\"server\":\"CSEC\",\"scriptKey\":\"cell.js*[\\\"CSEC|2\\\"]\",\"title\":\"cell.js CSEC|2\",\"threads\":1,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-683266.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[17,84,111,124,82,23,104,199,132,77,24,26,32,195,176],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"38.2.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"8.6.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"44.1.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":8.106200000000001,\"isBanned\":false,\"isMember\":true,\"playerReputation\":3665.629012436816}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":46.5461,\"isBanned\":false,\"isMember\":true,\"playerReputation\":85251.26919339073}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":2.3071,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}}}","AliasesSave":"{\"analyse\":\"analyze\",\"traceroute\":\"./traceroute.js\",\"reach\":\"./reach.js\",\"biotic\":\"./biotic.js\",\"portfolio\":\"./portfolio.js --tail\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1,\"y\":1,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"35","AllGangsSave":"","LastExportBonus":"1699860484740","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}